// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/choria-io/go-choria/inter (interfaces: DDLResolver)

// Package imock is a generated GoMock package.
package imock

import (
	context "context"
	reflect "reflect"

	inter "github.com/choria-io/go-choria/inter"
	gomock "github.com/golang/mock/gomock"
)

// MockDDLResolver is a mock of DDLResolver interface.
type MockDDLResolver struct {
	ctrl     *gomock.Controller
	recorder *MockDDLResolverMockRecorder
}

// MockDDLResolverMockRecorder is the mock recorder for MockDDLResolver.
type MockDDLResolverMockRecorder struct {
	mock *MockDDLResolver
}

// NewMockDDLResolver creates a new mock instance.
func NewMockDDLResolver(ctrl *gomock.Controller) *MockDDLResolver {
	mock := &MockDDLResolver{ctrl: ctrl}
	mock.recorder = &MockDDLResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDDLResolver) EXPECT() *MockDDLResolverMockRecorder {
	return m.recorder
}

// DDL mocks base method.
func (m *MockDDLResolver) DDL(arg0 context.Context, arg1, arg2 string, arg3 any, arg4 inter.Framework) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DDL", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DDL indicates an expected call of DDL.
func (mr *MockDDLResolverMockRecorder) DDL(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DDL", reflect.TypeOf((*MockDDLResolver)(nil).DDL), arg0, arg1, arg2, arg3, arg4)
}

// DDLBytes mocks base method.
func (m *MockDDLResolver) DDLBytes(arg0 context.Context, arg1, arg2 string, arg3 inter.Framework) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DDLBytes", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DDLBytes indicates an expected call of DDLBytes.
func (mr *MockDDLResolverMockRecorder) DDLBytes(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DDLBytes", reflect.TypeOf((*MockDDLResolver)(nil).DDLBytes), arg0, arg1, arg2, arg3)
}

// DDLNames mocks base method.
func (m *MockDDLResolver) DDLNames(arg0 context.Context, arg1 string, arg2 inter.Framework) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DDLNames", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DDLNames indicates an expected call of DDLNames.
func (mr *MockDDLResolverMockRecorder) DDLNames(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DDLNames", reflect.TypeOf((*MockDDLResolver)(nil).DDLNames), arg0, arg1, arg2)
}

// String mocks base method.
func (m *MockDDLResolver) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockDDLResolverMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockDDLResolver)(nil).String))
}
