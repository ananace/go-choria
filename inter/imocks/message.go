// Code generated by MockGen. DO NOT EDIT.
// Source: ../message.go

// Package imock is a generated GoMock package.
package imock

import (
	reflect "reflect"
	time "time"

	inter "github.com/choria-io/go-choria/inter"
	protocol "github.com/choria-io/go-choria/protocol"
	gomock "github.com/golang/mock/gomock"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Agent mocks base method.
func (m *MockMessage) Agent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Agent")
	ret0, _ := ret[0].(string)
	return ret0
}

// Agent indicates an expected call of Agent.
func (mr *MockMessageMockRecorder) Agent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Agent", reflect.TypeOf((*MockMessage)(nil).Agent))
}

// Base64Payload mocks base method.
func (m *MockMessage) Base64Payload() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base64Payload")
	ret0, _ := ret[0].(string)
	return ret0
}

// Base64Payload indicates an expected call of Base64Payload.
func (mr *MockMessageMockRecorder) Base64Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base64Payload", reflect.TypeOf((*MockMessage)(nil).Base64Payload))
}

// CacheTransport mocks base method.
func (m *MockMessage) CacheTransport() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheTransport")
}

// CacheTransport indicates an expected call of CacheTransport.
func (mr *MockMessageMockRecorder) CacheTransport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheTransport", reflect.TypeOf((*MockMessage)(nil).CacheTransport))
}

// CallerID mocks base method.
func (m *MockMessage) CallerID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallerID")
	ret0, _ := ret[0].(string)
	return ret0
}

// CallerID indicates an expected call of CallerID.
func (mr *MockMessageMockRecorder) CallerID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallerID", reflect.TypeOf((*MockMessage)(nil).CallerID))
}

// Collective mocks base method.
func (m *MockMessage) Collective() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collective")
	ret0, _ := ret[0].(string)
	return ret0
}

// Collective indicates an expected call of Collective.
func (mr *MockMessageMockRecorder) Collective() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collective", reflect.TypeOf((*MockMessage)(nil).Collective))
}

// CustomTarget mocks base method.
func (m *MockMessage) CustomTarget() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomTarget")
	ret0, _ := ret[0].(string)
	return ret0
}

// CustomTarget indicates an expected call of CustomTarget.
func (mr *MockMessageMockRecorder) CustomTarget() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomTarget", reflect.TypeOf((*MockMessage)(nil).CustomTarget))
}

// DiscoveredHosts mocks base method.
func (m *MockMessage) DiscoveredHosts() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveredHosts")
	ret0, _ := ret[0].([]string)
	return ret0
}

// DiscoveredHosts indicates an expected call of DiscoveredHosts.
func (mr *MockMessageMockRecorder) DiscoveredHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveredHosts", reflect.TypeOf((*MockMessage)(nil).DiscoveredHosts))
}

// ExpectedMessageID mocks base method.
func (m *MockMessage) ExpectedMessageID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpectedMessageID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExpectedMessageID indicates an expected call of ExpectedMessageID.
func (mr *MockMessageMockRecorder) ExpectedMessageID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectedMessageID", reflect.TypeOf((*MockMessage)(nil).ExpectedMessageID))
}

// Filter mocks base method.
func (m *MockMessage) Filter() *protocol.Filter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter")
	ret0, _ := ret[0].(*protocol.Filter)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockMessageMockRecorder) Filter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockMessage)(nil).Filter))
}

// IsCachedTransport mocks base method.
func (m *MockMessage) IsCachedTransport() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCachedTransport")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCachedTransport indicates an expected call of IsCachedTransport.
func (mr *MockMessageMockRecorder) IsCachedTransport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCachedTransport", reflect.TypeOf((*MockMessage)(nil).IsCachedTransport))
}

// NotifyPublish mocks base method.
func (m *MockMessage) NotifyPublish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyPublish")
}

// NotifyPublish indicates an expected call of NotifyPublish.
func (mr *MockMessageMockRecorder) NotifyPublish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyPublish", reflect.TypeOf((*MockMessage)(nil).NotifyPublish))
}

// OnPublish mocks base method.
func (m *MockMessage) OnPublish(arg0 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPublish", arg0)
}

// OnPublish indicates an expected call of OnPublish.
func (mr *MockMessageMockRecorder) OnPublish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPublish", reflect.TypeOf((*MockMessage)(nil).OnPublish), arg0)
}

// Payload mocks base method.
func (m *MockMessage) Payload() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].(string)
	return ret0
}

// Payload indicates an expected call of Payload.
func (mr *MockMessageMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockMessage)(nil).Payload))
}

// ProtocolVersion mocks base method.
func (m *MockMessage) ProtocolVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtocolVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProtocolVersion indicates an expected call of ProtocolVersion.
func (mr *MockMessageMockRecorder) ProtocolVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtocolVersion", reflect.TypeOf((*MockMessage)(nil).ProtocolVersion))
}

// ReplyTarget mocks base method.
func (m *MockMessage) ReplyTarget() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyTarget")
	ret0, _ := ret[0].(string)
	return ret0
}

// ReplyTarget indicates an expected call of ReplyTarget.
func (mr *MockMessageMockRecorder) ReplyTarget() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyTarget", reflect.TypeOf((*MockMessage)(nil).ReplyTarget))
}

// ReplyTo mocks base method.
func (m *MockMessage) ReplyTo() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyTo")
	ret0, _ := ret[0].(string)
	return ret0
}

// ReplyTo indicates an expected call of ReplyTo.
func (mr *MockMessageMockRecorder) ReplyTo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyTo", reflect.TypeOf((*MockMessage)(nil).ReplyTo))
}

// Request mocks base method.
func (m *MockMessage) Request() inter.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].(inter.Message)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockMessageMockRecorder) Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockMessage)(nil).Request))
}

// RequestID mocks base method.
func (m *MockMessage) RequestID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestID")
	ret0, _ := ret[0].(string)
	return ret0
}

// RequestID indicates an expected call of RequestID.
func (mr *MockMessageMockRecorder) RequestID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestID", reflect.TypeOf((*MockMessage)(nil).RequestID))
}

// SenderID mocks base method.
func (m *MockMessage) SenderID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SenderID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SenderID indicates an expected call of SenderID.
func (mr *MockMessageMockRecorder) SenderID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SenderID", reflect.TypeOf((*MockMessage)(nil).SenderID))
}

// SetBase64Payload mocks base method.
func (m *MockMessage) SetBase64Payload(payload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBase64Payload", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBase64Payload indicates an expected call of SetBase64Payload.
func (mr *MockMessageMockRecorder) SetBase64Payload(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBase64Payload", reflect.TypeOf((*MockMessage)(nil).SetBase64Payload), payload)
}

// SetCollective mocks base method.
func (m *MockMessage) SetCollective(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCollective", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCollective indicates an expected call of SetCollective.
func (mr *MockMessageMockRecorder) SetCollective(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCollective", reflect.TypeOf((*MockMessage)(nil).SetCollective), arg0)
}

// SetCustomTarget mocks base method.
func (m *MockMessage) SetCustomTarget(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCustomTarget", arg0)
}

// SetCustomTarget indicates an expected call of SetCustomTarget.
func (mr *MockMessageMockRecorder) SetCustomTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomTarget", reflect.TypeOf((*MockMessage)(nil).SetCustomTarget), arg0)
}

// SetDiscoveredHosts mocks base method.
func (m *MockMessage) SetDiscoveredHosts(hosts []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDiscoveredHosts", hosts)
}

// SetDiscoveredHosts indicates an expected call of SetDiscoveredHosts.
func (mr *MockMessageMockRecorder) SetDiscoveredHosts(hosts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDiscoveredHosts", reflect.TypeOf((*MockMessage)(nil).SetDiscoveredHosts), hosts)
}

// SetExpectedMsgID mocks base method.
func (m *MockMessage) SetExpectedMsgID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpectedMsgID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExpectedMsgID indicates an expected call of SetExpectedMsgID.
func (mr *MockMessageMockRecorder) SetExpectedMsgID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpectedMsgID", reflect.TypeOf((*MockMessage)(nil).SetExpectedMsgID), id)
}

// SetFilter mocks base method.
func (m *MockMessage) SetFilter(arg0 *protocol.Filter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFilter", arg0)
}

// SetFilter indicates an expected call of SetFilter.
func (mr *MockMessageMockRecorder) SetFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilter", reflect.TypeOf((*MockMessage)(nil).SetFilter), arg0)
}

// SetPayload mocks base method.
func (m *MockMessage) SetPayload(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPayload", arg0)
}

// SetPayload indicates an expected call of SetPayload.
func (mr *MockMessageMockRecorder) SetPayload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayload", reflect.TypeOf((*MockMessage)(nil).SetPayload), arg0)
}

// SetProtocolVersion mocks base method.
func (m *MockMessage) SetProtocolVersion(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProtocolVersion", arg0)
}

// SetProtocolVersion indicates an expected call of SetProtocolVersion.
func (mr *MockMessageMockRecorder) SetProtocolVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProtocolVersion", reflect.TypeOf((*MockMessage)(nil).SetProtocolVersion), arg0)
}

// SetReplyTo mocks base method.
func (m *MockMessage) SetReplyTo(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReplyTo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReplyTo indicates an expected call of SetReplyTo.
func (mr *MockMessageMockRecorder) SetReplyTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplyTo", reflect.TypeOf((*MockMessage)(nil).SetReplyTo), arg0)
}

// SetTTL mocks base method.
func (m *MockMessage) SetTTL(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTTL", arg0)
}

// SetTTL indicates an expected call of SetTTL.
func (mr *MockMessageMockRecorder) SetTTL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTTL", reflect.TypeOf((*MockMessage)(nil).SetTTL), arg0)
}

// SetType mocks base method.
func (m *MockMessage) SetType(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetType", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetType indicates an expected call of SetType.
func (mr *MockMessageMockRecorder) SetType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetType", reflect.TypeOf((*MockMessage)(nil).SetType), arg0)
}

// String mocks base method.
func (m *MockMessage) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockMessageMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockMessage)(nil).String))
}

// TTL mocks base method.
func (m *MockMessage) TTL() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL")
	ret0, _ := ret[0].(int)
	return ret0
}

// TTL indicates an expected call of TTL.
func (mr *MockMessageMockRecorder) TTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockMessage)(nil).TTL))
}

// TimeStamp mocks base method.
func (m *MockMessage) TimeStamp() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeStamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// TimeStamp indicates an expected call of TimeStamp.
func (mr *MockMessageMockRecorder) TimeStamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeStamp", reflect.TypeOf((*MockMessage)(nil).TimeStamp))
}

// Transport mocks base method.
func (m *MockMessage) Transport() (protocol.TransportMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transport")
	ret0, _ := ret[0].(protocol.TransportMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transport indicates an expected call of Transport.
func (mr *MockMessageMockRecorder) Transport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transport", reflect.TypeOf((*MockMessage)(nil).Transport))
}

// Type mocks base method.
func (m *MockMessage) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockMessageMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockMessage)(nil).Type))
}

// Validate mocks base method.
func (m *MockMessage) Validate() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockMessageMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockMessage)(nil).Validate))
}

// ValidateTTL mocks base method.
func (m *MockMessage) ValidateTTL() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTTL")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateTTL indicates an expected call of ValidateTTL.
func (mr *MockMessageMockRecorder) ValidateTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTTL", reflect.TypeOf((*MockMessage)(nil).ValidateTTL))
}
