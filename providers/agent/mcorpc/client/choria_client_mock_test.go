// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	choria "github.com/choria-io/go-choria/choria"
	client "github.com/choria-io/go-choria/client/client"
	config "github.com/choria-io/go-choria/config"
	inter "github.com/choria-io/go-choria/inter"
	protocol "github.com/choria-io/go-choria/protocol"
	srvcache "github.com/choria-io/go-choria/srvcache"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// MockChoriaFramework is a mock of ChoriaFramework interface.
type MockChoriaFramework struct {
	ctrl     *gomock.Controller
	recorder *MockChoriaFrameworkMockRecorder
}

// MockChoriaFrameworkMockRecorder is the mock recorder for MockChoriaFramework.
type MockChoriaFrameworkMockRecorder struct {
	mock *MockChoriaFramework
}

// NewMockChoriaFramework creates a new mock instance.
func NewMockChoriaFramework(ctrl *gomock.Controller) *MockChoriaFramework {
	mock := &MockChoriaFramework{ctrl: ctrl}
	mock.recorder = &MockChoriaFrameworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChoriaFramework) EXPECT() *MockChoriaFrameworkMockRecorder {
	return m.recorder
}

// Certname mocks base method.
func (m *MockChoriaFramework) Certname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Certname")
	ret0, _ := ret[0].(string)
	return ret0
}

// Certname indicates an expected call of Certname.
func (mr *MockChoriaFrameworkMockRecorder) Certname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Certname", reflect.TypeOf((*MockChoriaFramework)(nil).Certname))
}

// Configuration mocks base method.
func (m *MockChoriaFramework) Configuration() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configuration")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// Configuration indicates an expected call of Configuration.
func (mr *MockChoriaFrameworkMockRecorder) Configuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configuration", reflect.TypeOf((*MockChoriaFramework)(nil).Configuration))
}

// Logger mocks base method.
func (m *MockChoriaFramework) Logger(arg0 string) *logrus.Entry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger", arg0)
	ret0, _ := ret[0].(*logrus.Entry)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockChoriaFrameworkMockRecorder) Logger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockChoriaFramework)(nil).Logger), arg0)
}

// MiddlewareServers mocks base method.
func (m *MockChoriaFramework) MiddlewareServers() (srvcache.Servers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MiddlewareServers")
	ret0, _ := ret[0].(srvcache.Servers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MiddlewareServers indicates an expected call of MiddlewareServers.
func (mr *MockChoriaFrameworkMockRecorder) MiddlewareServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MiddlewareServers", reflect.TypeOf((*MockChoriaFramework)(nil).MiddlewareServers))
}

// NewConnector mocks base method.
func (m *MockChoriaFramework) NewConnector(ctx context.Context, servers func() (srvcache.Servers, error), name string, logger *logrus.Entry) (choria.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConnector", ctx, servers, name, logger)
	ret0, _ := ret[0].(choria.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConnector indicates an expected call of NewConnector.
func (mr *MockChoriaFrameworkMockRecorder) NewConnector(ctx, servers, name, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConnector", reflect.TypeOf((*MockChoriaFramework)(nil).NewConnector), ctx, servers, name, logger)
}

// NewMessage mocks base method.
func (m *MockChoriaFramework) NewMessage(payload, agent, collective, msgType string, request inter.Message) (inter.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessage", payload, agent, collective, msgType, request)
	ret0, _ := ret[0].(inter.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMessage indicates an expected call of NewMessage.
func (mr *MockChoriaFrameworkMockRecorder) NewMessage(payload, agent, collective, msgType, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessage", reflect.TypeOf((*MockChoriaFramework)(nil).NewMessage), payload, agent, collective, msgType, request)
}

// NewReplyFromTransportJSON mocks base method.
func (m *MockChoriaFramework) NewReplyFromTransportJSON(payload []byte, skipvalidate bool) (protocol.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReplyFromTransportJSON", payload, skipvalidate)
	ret0, _ := ret[0].(protocol.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReplyFromTransportJSON indicates an expected call of NewReplyFromTransportJSON.
func (mr *MockChoriaFrameworkMockRecorder) NewReplyFromTransportJSON(payload, skipvalidate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReplyFromTransportJSON", reflect.TypeOf((*MockChoriaFramework)(nil).NewReplyFromTransportJSON), payload, skipvalidate)
}

// NewRequestID mocks base method.
func (m *MockChoriaFramework) NewRequestID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequestID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequestID indicates an expected call of NewRequestID.
func (mr *MockChoriaFrameworkMockRecorder) NewRequestID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequestID", reflect.TypeOf((*MockChoriaFramework)(nil).NewRequestID))
}

// NewTransportFromJSON mocks base method.
func (m *MockChoriaFramework) NewTransportFromJSON(data string) (protocol.TransportMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransportFromJSON", data)
	ret0, _ := ret[0].(protocol.TransportMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTransportFromJSON indicates an expected call of NewTransportFromJSON.
func (mr *MockChoriaFrameworkMockRecorder) NewTransportFromJSON(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransportFromJSON", reflect.TypeOf((*MockChoriaFramework)(nil).NewTransportFromJSON), data)
}

// PQLQueryCertNames mocks base method.
func (m *MockChoriaFramework) PQLQueryCertNames(query string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PQLQueryCertNames", query)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PQLQueryCertNames indicates an expected call of PQLQueryCertNames.
func (mr *MockChoriaFrameworkMockRecorder) PQLQueryCertNames(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PQLQueryCertNames", reflect.TypeOf((*MockChoriaFramework)(nil).PQLQueryCertNames), query)
}

// MockRequestResult is a mock of RequestResult interface.
type MockRequestResult struct {
	ctrl     *gomock.Controller
	recorder *MockRequestResultMockRecorder
}

// MockRequestResultMockRecorder is the mock recorder for MockRequestResult.
type MockRequestResultMockRecorder struct {
	mock *MockRequestResult
}

// NewMockRequestResult creates a new mock instance.
func NewMockRequestResult(ctrl *gomock.Controller) *MockRequestResult {
	mock := &MockRequestResult{ctrl: ctrl}
	mock.recorder = &MockRequestResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestResult) EXPECT() *MockRequestResultMockRecorder {
	return m.recorder
}

// Stats mocks base method.
func (m *MockRequestResult) Stats() *Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(*Stats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockRequestResultMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockRequestResult)(nil).Stats))
}

// MockChoriaClient is a mock of ChoriaClient interface.
type MockChoriaClient struct {
	ctrl     *gomock.Controller
	recorder *MockChoriaClientMockRecorder
}

// MockChoriaClientMockRecorder is the mock recorder for MockChoriaClient.
type MockChoriaClientMockRecorder struct {
	mock *MockChoriaClient
}

// NewMockChoriaClient creates a new mock instance.
func NewMockChoriaClient(ctrl *gomock.Controller) *MockChoriaClient {
	mock := &MockChoriaClient{ctrl: ctrl}
	mock.recorder = &MockChoriaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChoriaClient) EXPECT() *MockChoriaClientMockRecorder {
	return m.recorder
}

// Request mocks base method.
func (m *MockChoriaClient) Request(ctx context.Context, msg inter.Message, handler client.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", ctx, msg, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockChoriaClientMockRecorder) Request(ctx, msg, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockChoriaClient)(nil).Request), ctx, msg, handler)
}

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockConnector) Publish(msg inter.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockConnectorMockRecorder) Publish(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockConnector)(nil).Publish), msg)
}

// QueueSubscribe mocks base method.
func (m *MockConnector) QueueSubscribe(ctx context.Context, name, subject, group string, output chan inter.ConnectorMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSubscribe", ctx, name, subject, group, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSubscribe indicates an expected call of QueueSubscribe.
func (mr *MockConnectorMockRecorder) QueueSubscribe(ctx, name, subject, group, output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockConnector)(nil).QueueSubscribe), ctx, name, subject, group, output)
}
