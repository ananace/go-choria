// Code generated by MockGen. DO NOT EDIT.
// Source: updatemgr.go

// Package stream is a generated GoMock package.
package stream

import (
	gomock "github.com/golang/mock/gomock"
	nats_go "github.com/nats-io/nats.go"
	logrus "github.com/sirupsen/logrus"
	reflect "reflect"
)

// Mockupdatable is a mock of updatable interface
type Mockupdatable struct {
	ctrl     *gomock.Controller
	recorder *MockupdatableMockRecorder
}

// MockupdatableMockRecorder is the mock recorder for Mockupdatable
type MockupdatableMockRecorder struct {
	mock *Mockupdatable
}

// NewMockupdatable creates a new mock instance
func NewMockupdatable(ctrl *gomock.Controller) *Mockupdatable {
	mock := &Mockupdatable{ctrl: ctrl}
	mock.recorder = &MockupdatableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockupdatable) EXPECT() *MockupdatableMockRecorder {
	return m.recorder
}

// Instance mocks base method
func (m *Mockupdatable) Instance() interface{} {
	ret := m.ctrl.Call(m, "Instance")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Instance indicates an expected call of Instance
func (mr *MockupdatableMockRecorder) Instance() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instance", reflect.TypeOf((*Mockupdatable)(nil).Instance))
}

// Update mocks base method
func (m *Mockupdatable) Update(arg0 interface{}) {
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update
func (mr *MockupdatableMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*Mockupdatable)(nil).Update), arg0)
}

// MockFramework is a mock of Framework interface
type MockFramework struct {
	ctrl     *gomock.Controller
	recorder *MockFrameworkMockRecorder
}

// MockFrameworkMockRecorder is the mock recorder for MockFramework
type MockFrameworkMockRecorder struct {
	mock *MockFramework
}

// NewMockFramework creates a new mock instance
func NewMockFramework(ctrl *gomock.Controller) *MockFramework {
	mock := &MockFramework{ctrl: ctrl}
	mock.recorder = &MockFrameworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFramework) EXPECT() *MockFrameworkMockRecorder {
	return m.recorder
}

// NATSConn mocks base method
func (m *MockFramework) NATSConn() *nats_go.Conn {
	ret := m.ctrl.Call(m, "NATSConn")
	ret0, _ := ret[0].(*nats_go.Conn)
	return ret0
}

// NATSConn indicates an expected call of NATSConn
func (mr *MockFrameworkMockRecorder) NATSConn() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NATSConn", reflect.TypeOf((*MockFramework)(nil).NATSConn))
}

// Logger mocks base method
func (m *MockFramework) Logger(arg0 string) *logrus.Entry {
	ret := m.ctrl.Call(m, "Logger", arg0)
	ret0, _ := ret[0].(*logrus.Entry)
	return ret0
}

// Logger indicates an expected call of Logger
func (mr *MockFrameworkMockRecorder) Logger(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockFramework)(nil).Logger), arg0)
}
