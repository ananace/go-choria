// Code generated by MockGen. DO NOT EDIT.
// Source: entity.go

// Package scout is a generated GoMock package.
package scout

import (
	gomock "github.com/golang/mock/gomock"
	nats_go "github.com/nats-io/nats.go"
	logrus "github.com/sirupsen/logrus"
	reflect "reflect"
)

// MockFramework is a mock of Framework interface
type MockFramework struct {
	ctrl     *gomock.Controller
	recorder *MockFrameworkMockRecorder
}

// MockFrameworkMockRecorder is the mock recorder for MockFramework
type MockFrameworkMockRecorder struct {
	mock *MockFramework
}

// NewMockFramework creates a new mock instance
func NewMockFramework(ctrl *gomock.Controller) *MockFramework {
	mock := &MockFramework{ctrl: ctrl}
	mock.recorder = &MockFrameworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFramework) EXPECT() *MockFrameworkMockRecorder {
	return m.recorder
}

// Identity mocks base method
func (m *MockFramework) Identity() string {
	ret := m.ctrl.Call(m, "Identity")
	ret0, _ := ret[0].(string)
	return ret0
}

// Identity indicates an expected call of Identity
func (mr *MockFrameworkMockRecorder) Identity() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockFramework)(nil).Identity))
}

// NATSConn mocks base method
func (m *MockFramework) NATSConn() *nats_go.Conn {
	ret := m.ctrl.Call(m, "NATSConn")
	ret0, _ := ret[0].(*nats_go.Conn)
	return ret0
}

// NATSConn indicates an expected call of NATSConn
func (mr *MockFrameworkMockRecorder) NATSConn() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NATSConn", reflect.TypeOf((*MockFramework)(nil).NATSConn))
}

// Logger mocks base method
func (m *MockFramework) Logger(arg0 string) *logrus.Entry {
	ret := m.ctrl.Call(m, "Logger", arg0)
	ret0, _ := ret[0].(*logrus.Entry)
	return ret0
}

// Logger indicates an expected call of Logger
func (mr *MockFrameworkMockRecorder) Logger(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockFramework)(nil).Logger), arg0)
}

// ScoutOverridesFile mocks base method
func (m *MockFramework) ScoutOverridesFile() string {
	ret := m.ctrl.Call(m, "ScoutOverridesFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// ScoutOverridesFile indicates an expected call of ScoutOverridesFile
func (mr *MockFrameworkMockRecorder) ScoutOverridesFile() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScoutOverridesFile", reflect.TypeOf((*MockFramework)(nil).ScoutOverridesFile))
}

// ScoutTags mocks base method
func (m *MockFramework) ScoutTags() []string {
	ret := m.ctrl.Call(m, "ScoutTags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ScoutTags indicates an expected call of ScoutTags
func (mr *MockFrameworkMockRecorder) ScoutTags() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScoutTags", reflect.TypeOf((*MockFramework)(nil).ScoutTags))
}

// MachineSourceDir mocks base method
func (m *MockFramework) MachineSourceDir() string {
	ret := m.ctrl.Call(m, "MachineSourceDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// MachineSourceDir indicates an expected call of MachineSourceDir
func (mr *MockFrameworkMockRecorder) MachineSourceDir() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineSourceDir", reflect.TypeOf((*MockFramework)(nil).MachineSourceDir))
}
