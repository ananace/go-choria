// Code generated by MockGen. DO NOT EDIT.
// Source: security.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecurityProvider is a mock of SecurityProvider interface.
type MockSecurityProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityProviderMockRecorder
}

// MockSecurityProviderMockRecorder is the mock recorder for MockSecurityProvider.
type MockSecurityProviderMockRecorder struct {
	mock *MockSecurityProvider
}

// NewMockSecurityProvider creates a new mock instance.
func NewMockSecurityProvider(ctrl *gomock.Controller) *MockSecurityProvider {
	mock := &MockSecurityProvider{ctrl: ctrl}
	mock.recorder = &MockSecurityProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityProvider) EXPECT() *MockSecurityProviderMockRecorder {
	return m.recorder
}

// CachePublicData mocks base method.
func (m *MockSecurityProvider) CachePublicData(data []byte, identity string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CachePublicData", data, identity)
	ret0, _ := ret[0].(error)
	return ret0
}

// CachePublicData indicates an expected call of CachePublicData.
func (mr *MockSecurityProviderMockRecorder) CachePublicData(data, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachePublicData", reflect.TypeOf((*MockSecurityProvider)(nil).CachePublicData), data, identity)
}

// CallerIdentity mocks base method.
func (m *MockSecurityProvider) CallerIdentity(caller string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallerIdentity", caller)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallerIdentity indicates an expected call of CallerIdentity.
func (mr *MockSecurityProviderMockRecorder) CallerIdentity(caller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallerIdentity", reflect.TypeOf((*MockSecurityProvider)(nil).CallerIdentity), caller)
}

// ChecksumString mocks base method.
func (m *MockSecurityProvider) ChecksumString(data string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChecksumString", data)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ChecksumString indicates an expected call of ChecksumString.
func (mr *MockSecurityProviderMockRecorder) ChecksumString(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChecksumString", reflect.TypeOf((*MockSecurityProvider)(nil).ChecksumString), data)
}

// PrivilegedVerifyStringSignature mocks base method.
func (m *MockSecurityProvider) PrivilegedVerifyStringSignature(dat string, sig []byte, identity string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivilegedVerifyStringSignature", dat, sig, identity)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PrivilegedVerifyStringSignature indicates an expected call of PrivilegedVerifyStringSignature.
func (mr *MockSecurityProviderMockRecorder) PrivilegedVerifyStringSignature(dat, sig, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivilegedVerifyStringSignature", reflect.TypeOf((*MockSecurityProvider)(nil).PrivilegedVerifyStringSignature), dat, sig, identity)
}

// PublicCertTXT mocks base method.
func (m *MockSecurityProvider) PublicCertTXT() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicCertTXT")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicCertTXT indicates an expected call of PublicCertTXT.
func (mr *MockSecurityProviderMockRecorder) PublicCertTXT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicCertTXT", reflect.TypeOf((*MockSecurityProvider)(nil).PublicCertTXT))
}

// RemoteSignRequest mocks base method.
func (m *MockSecurityProvider) RemoteSignRequest(ctx context.Context, str []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteSignRequest", ctx, str)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteSignRequest indicates an expected call of RemoteSignRequest.
func (mr *MockSecurityProviderMockRecorder) RemoteSignRequest(ctx, str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteSignRequest", reflect.TypeOf((*MockSecurityProvider)(nil).RemoteSignRequest), ctx, str)
}

// SignString mocks base method.
func (m *MockSecurityProvider) SignString(s string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignString", s)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignString indicates an expected call of SignString.
func (mr *MockSecurityProviderMockRecorder) SignString(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignString", reflect.TypeOf((*MockSecurityProvider)(nil).SignString), s)
}
