// Code generated by MockGen. DO NOT EDIT.
// Source: puppet_security.go

// Package choria is a generated GoMock package.
package choria

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MocksettingsProvider is a mock of settingsProvider interface
type MocksettingsProvider struct {
	ctrl     *gomock.Controller
	recorder *MocksettingsProviderMockRecorder
}

// MocksettingsProviderMockRecorder is the mock recorder for MocksettingsProvider
type MocksettingsProviderMockRecorder struct {
	mock *MocksettingsProvider
}

// NewMocksettingsProvider creates a new mock instance
func NewMocksettingsProvider(ctrl *gomock.Controller) *MocksettingsProvider {
	mock := &MocksettingsProvider{ctrl: ctrl}
	mock.recorder = &MocksettingsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksettingsProvider) EXPECT() *MocksettingsProviderMockRecorder {
	return m.recorder
}

// PuppetSetting mocks base method
func (m *MocksettingsProvider) PuppetSetting(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "PuppetSetting", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PuppetSetting indicates an expected call of PuppetSetting
func (mr *MocksettingsProviderMockRecorder) PuppetSetting(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PuppetSetting", reflect.TypeOf((*MocksettingsProvider)(nil).PuppetSetting), arg0)
}

// Getuid mocks base method
func (m *MocksettingsProvider) Getuid() int {
	ret := m.ctrl.Call(m, "Getuid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getuid indicates an expected call of Getuid
func (mr *MocksettingsProviderMockRecorder) Getuid() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getuid", reflect.TypeOf((*MocksettingsProvider)(nil).Getuid))
}

// QuerySrvRecords mocks base method
func (m *MocksettingsProvider) QuerySrvRecords(records []string) ([]Server, error) {
	ret := m.ctrl.Call(m, "QuerySrvRecords", records)
	ret0, _ := ret[0].([]Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySrvRecords indicates an expected call of QuerySrvRecords
func (mr *MocksettingsProviderMockRecorder) QuerySrvRecords(records interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySrvRecords", reflect.TypeOf((*MocksettingsProvider)(nil).QuerySrvRecords), records)
}
