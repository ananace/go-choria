version: 2
jobs:
  test:
    docker:
      - image: choria/packager:el7-puppet-go1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      MCOLLECTIVE_CERTNAME: rip.mcollective
      GO111MODULE: "on"
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin:/opt/puppetlabs/bin:/root/bin:/go/bin
      GOFLAGS: "-p=1"
    steps:
      - checkout
      - setup_remote_docker
      - run: go mod download github.com/fatih/structtag
      - run: go generate
      - run: go get -u github.com/onsi/ginkgo/ginkgo
      - run: go get -u honnef.co/go/tools/cmd/staticcheck
      - run: go get -u github.com/client9/misspell/cmd/misspell
      - run: echo $PATH
      - run: ls -l /go/bin
      - run: go list ./...|xargs staticcheck
      - run: find . -type f -name "*.go" | grep -v "/vendor/" | xargs misspell -error -locale US -i flavour
      - run: go vet ./...
      - run: go test ./...
      - run: mkdir -p /tmp/workspace
      - run: cd .. ; tar -czf /tmp/workspace/go-choria.tgz go-choria
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - go-choria.tgz

  build_el6_64bit_rpms:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: el6_64
      BUILD: foss
      BUILDER: choria/packager:el6-go1.16

    steps: &std_build_steps
      - setup_remote_docker

      - attach_workspace:
          at: /tmp/workspace

      - run: docker create -v /go -v /build/artifacts --name store alpine:3.4 /bin/true
      - run: cd .. ; tar -xzf /tmp/workspace/go-choria.tgz

      - run: docker cp /go store:/

      - run: |
          VERSION="${CIRCLE_TAG:1}"

          if [ -z "${CIRCLE_TAG}" ]
          then
            VERSION=${CIRCLE_SHA1}
            if [ ! -z "${NIGHTLY}" ]
            then
              VERSION="0.99.0.$(date +'%Y%m%d')"
            fi
          fi

          docker run --volumes-from store --rm -e SOURCE_DIR=/go/src/github.com/choria-io/go-choria -e SHA1=${CIRCLE_SHA1} -e BUILD=${BUILD} -e VERSION=${VERSION} -e ARTIFACTS=/build/artifacts -e PACKAGE=${PACKAGE} ${BUILDER}

      - run: |
          mkdir -p /tmp/workspace/artifacts/${BUILD}/${PACKAGE}
          for i in $(docker run --volumes-from store --rm ${BUILDER} ls /build/artifacts);do
            docker cp store:/build/artifacts/${i} /tmp/workspace/artifacts/${BUILD}/${PACKAGE}
          done
          ls -l /tmp/workspace/artifacts/${BUILD}/${PACKAGE}

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - artifacts

  build_el6_32bit_rpms:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: el6_32
      BUILD: foss
      BUILDER: choria/packager:el6-go1.16

    steps: *std_build_steps

  build_el7_64bit_rpms:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: el7_64
      BUILD: foss
      BUILDER: choria/packager:el7-go1.16

    steps: *std_build_steps

  build_el7_ppc64le_rpms:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: el7_ppc64le
      BUILD: foss
      BUILDER: choria/packager:el7-go1.16

    steps: *std_build_steps

  build_el8_64bit_rpms:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: el8_64
      BUILD: foss
      BUILDER: choria/packager:el8-go1.16

    steps: *std_build_steps

  build_el8_ppc64le_rpms:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: el8_ppc64le
      BUILD: foss
      BUILDER: choria/packager:el8-go1.16

    steps: *std_build_steps

  build_xenial_64bit_debs:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: xenial_64
      BUILD: foss
      BUILDER: choria/packager:xenial-go1.16

    steps: *std_build_steps

  build_stretch_64bit_debs:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: stretch_64
      BUILD: foss
      BUILDER: choria/packager:stretch-go1.16

    steps: *std_build_steps

  build_buster_64bit_debs:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: buster_64
      BUILD: foss
      BUILDER: choria/packager:buster-go1.16

    steps: *std_build_steps

  build_buster_armhf_debs:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: buster_armhf
      BUILD: foss
      BUILDER: choria/packager:buster-go1.16

    steps: *std_build_steps

  build_bionic_64bit_debs:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: bionic_64
      BUILD: foss
      BUILDER: choria/packager:stretch-go1.16

    steps: *std_build_steps

  build_focal_64bit_debs:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: focal_64
      BUILD: foss
      BUILDER: choria/packager:focal-go1.16

    steps: *std_build_steps

  build_windows_64bit_msi:
    docker:
      - image: circleci/golang:1.16

    working_directory: /go/src/github.com/choria-io/go-choria

    environment:
      PACKAGE: windows_64
      BUILD: foss
      BUILDER: choria/packager:stretch-go1.16

    steps: *std_build_steps

  gather_artifacts:
    docker:
      - image: circleci/golang:1.16

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run: ls /tmp/workspace
      - run: cd /tmp/workspace && tar -czf artifacts.tgz artifacts

      - store_artifacts:
          path: /tmp/workspace

  nightly_packagecloud: &packagecloud_push
    environment:
      REPO: nightly

    docker:
      - image: circleci/ruby:2.7

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run: gem install package_cloud

      - run: |
          for d in 6 7 8
          do
            for i in $(find /tmp/workspace -name \*.el${d}.\*.rpm | grep -v src.rpm)
            do
              package_cloud push choria/${REPO}/el/${d} ${i}
            done
          done

  release_packagecloud:
    environment:
      REPO: release

    docker:
      - image: circleci/ruby:2.7

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run: gem install package_cloud

      - run: |
          for d in 6 7 8
          do
            for i in $(find /tmp/workspace -name \*.el${d}.\*.rpm | grep -v src.rpm)
            do
              package_cloud push choria/${REPO}/el/${d} ${i}
            done
          done

          for d in stretch_64 buster_64 buster_armhf
          do
            for i in $(find /tmp/workspace/artifacts/foss/${d} -name \*.deb)
            do
              distro=$(echo $d|cut -d "_" -f 1)
              package_cloud push choria/${REPO}/debian/${distro} $i
            done
          done

          for d in focal_64 bionic_64 xenial_64
          do
            for i in $(find /tmp/workspace/artifacts/foss/${d} -name \*.deb)
            do
              distro=$(echo $d|cut -d "_" -f 1)
              package_cloud push choria/${REPO}/ubuntu/${distro} $i
            done
          done


workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
                - main

    jobs:
      - test

      - build_el8_64bit_rpms:
          context: org-global
          requires:
            - test

      - build_el8_ppc64le_rpms:
          context: org-global
          requires:
            - test

      - build_el7_64bit_rpms:
          context: org-global
          requires:
            - test

      - build_el7_ppc64le_rpms:
          context: org-global
          requires:
            - test

      - build_windows_64bit_msi:
          context: org-global
          requires:
            - test

      - gather_artifacts:
          requires:
            - build_el7_64bit_rpms
            - build_el7_ppc64le_rpms
            - build_el8_64bit_rpms
            - build_el8_ppc64le_rpms
            - build_windows_64bit_msi

      - nightly_packagecloud:
          requires:
            - gather_artifacts

  test_and_ship:
    jobs:
      - test:
          filters:
            tags:
              only: /.+/

      - hold:
          type: approval
          requires:
            - test
          filters: &semver_only
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/

      - build_el7_64bit_rpms:
          filters: *semver_only
          requires:
            - hold

      - build_el7_ppc64le_rpms:
          filters: *semver_only
          requires:
            - hold

      - build_el8_64bit_rpms:
          filters: *semver_only
          requires:
            - hold

      - build_el8_ppc64le_rpms:
          filters: *semver_only
          requires:
            - hold

      - build_xenial_64bit_debs:
          filters: *semver_only
          requires:
            - hold

      - build_stretch_64bit_debs:
          filters: *semver_only
          requires:
            - hold

      - build_buster_armhf_debs:
          filters: *semver_only
          requires:
            - hold

      - build_buster_64bit_debs:
          filters: *semver_only
          requires:
            - hold

      - build_bionic_64bit_debs:
          filters: *semver_only
          requires:
            - hold

      - build_focal_64bit_debs:
          filters: *semver_only
          requires:
            - hold

      - gather_artifacts:
          requires:
            - build_el7_64bit_rpms
            - build_el7_ppc64le_rpms
            - build_el8_64bit_rpms
            - build_el8_ppc64le_rpms
            - build_xenial_64bit_debs
            - build_stretch_64bit_debs
            - build_buster_armhf_debs
            - build_buster_64bit_debs
            - build_bionic_64bit_debs
            - build_focal_64bit_debs

          filters: *semver_only

      - release_packagecloud:
          filters: *semver_only
          requires:
            - gather_artifacts
