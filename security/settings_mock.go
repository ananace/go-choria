// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package security is a generated GoMock package.
package security

import (
	context "context"
	tls "crypto/tls"
	pem "encoding/pem"
	config "github.com/choria-io/go-choria/config"
	srvcache "github.com/choria-io/go-choria/srvcache"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
	time "time"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockProvider) Validate() ([]string, bool) {
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockProviderMockRecorder) Validate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockProvider)(nil).Validate))
}

// Identity mocks base method
func (m *MockProvider) Identity() string {
	ret := m.ctrl.Call(m, "Identity")
	ret0, _ := ret[0].(string)
	return ret0
}

// Identity indicates an expected call of Identity
func (mr *MockProviderMockRecorder) Identity() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockProvider)(nil).Identity))
}

// CallerName mocks base method
func (m *MockProvider) CallerName() string {
	ret := m.ctrl.Call(m, "CallerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// CallerName indicates an expected call of CallerName
func (mr *MockProviderMockRecorder) CallerName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallerName", reflect.TypeOf((*MockProvider)(nil).CallerName))
}

// CallerIdentity mocks base method
func (m *MockProvider) CallerIdentity(caller string) (string, error) {
	ret := m.ctrl.Call(m, "CallerIdentity", caller)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallerIdentity indicates an expected call of CallerIdentity
func (mr *MockProviderMockRecorder) CallerIdentity(caller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallerIdentity", reflect.TypeOf((*MockProvider)(nil).CallerIdentity), caller)
}

// SignBytes mocks base method
func (m *MockProvider) SignBytes(b []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "SignBytes", b)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignBytes indicates an expected call of SignBytes
func (mr *MockProviderMockRecorder) SignBytes(b interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignBytes", reflect.TypeOf((*MockProvider)(nil).SignBytes), b)
}

// VerifyByteSignature mocks base method
func (m *MockProvider) VerifyByteSignature(str, signature []byte, identity string) bool {
	ret := m.ctrl.Call(m, "VerifyByteSignature", str, signature, identity)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyByteSignature indicates an expected call of VerifyByteSignature
func (mr *MockProviderMockRecorder) VerifyByteSignature(str, signature, identity interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyByteSignature", reflect.TypeOf((*MockProvider)(nil).VerifyByteSignature), str, signature, identity)
}

// SignString mocks base method
func (m *MockProvider) SignString(s string) ([]byte, error) {
	ret := m.ctrl.Call(m, "SignString", s)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignString indicates an expected call of SignString
func (mr *MockProviderMockRecorder) SignString(s interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignString", reflect.TypeOf((*MockProvider)(nil).SignString), s)
}

// VerifyStringSignature mocks base method
func (m *MockProvider) VerifyStringSignature(str string, signature []byte, identity string) bool {
	ret := m.ctrl.Call(m, "VerifyStringSignature", str, signature, identity)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyStringSignature indicates an expected call of VerifyStringSignature
func (mr *MockProviderMockRecorder) VerifyStringSignature(str, signature, identity interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyStringSignature", reflect.TypeOf((*MockProvider)(nil).VerifyStringSignature), str, signature, identity)
}

// PrivilegedVerifyByteSignature mocks base method
func (m *MockProvider) PrivilegedVerifyByteSignature(dat, sig []byte, identity string) bool {
	ret := m.ctrl.Call(m, "PrivilegedVerifyByteSignature", dat, sig, identity)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PrivilegedVerifyByteSignature indicates an expected call of PrivilegedVerifyByteSignature
func (mr *MockProviderMockRecorder) PrivilegedVerifyByteSignature(dat, sig, identity interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivilegedVerifyByteSignature", reflect.TypeOf((*MockProvider)(nil).PrivilegedVerifyByteSignature), dat, sig, identity)
}

// PrivilegedVerifyStringSignature mocks base method
func (m *MockProvider) PrivilegedVerifyStringSignature(dat string, sig []byte, identity string) bool {
	ret := m.ctrl.Call(m, "PrivilegedVerifyStringSignature", dat, sig, identity)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PrivilegedVerifyStringSignature indicates an expected call of PrivilegedVerifyStringSignature
func (mr *MockProviderMockRecorder) PrivilegedVerifyStringSignature(dat, sig, identity interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivilegedVerifyStringSignature", reflect.TypeOf((*MockProvider)(nil).PrivilegedVerifyStringSignature), dat, sig, identity)
}

// ChecksumBytes mocks base method
func (m *MockProvider) ChecksumBytes(data []byte) []byte {
	ret := m.ctrl.Call(m, "ChecksumBytes", data)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ChecksumBytes indicates an expected call of ChecksumBytes
func (mr *MockProviderMockRecorder) ChecksumBytes(data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChecksumBytes", reflect.TypeOf((*MockProvider)(nil).ChecksumBytes), data)
}

// ChecksumString mocks base method
func (m *MockProvider) ChecksumString(data string) []byte {
	ret := m.ctrl.Call(m, "ChecksumString", data)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ChecksumString indicates an expected call of ChecksumString
func (mr *MockProviderMockRecorder) ChecksumString(data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChecksumString", reflect.TypeOf((*MockProvider)(nil).ChecksumString), data)
}

// TLSConfig mocks base method
func (m *MockProvider) TLSConfig() (*tls.Config, error) {
	ret := m.ctrl.Call(m, "TLSConfig")
	ret0, _ := ret[0].(*tls.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TLSConfig indicates an expected call of TLSConfig
func (mr *MockProviderMockRecorder) TLSConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLSConfig", reflect.TypeOf((*MockProvider)(nil).TLSConfig))
}

// SSLContext mocks base method
func (m *MockProvider) SSLContext() (*http.Transport, error) {
	ret := m.ctrl.Call(m, "SSLContext")
	ret0, _ := ret[0].(*http.Transport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSLContext indicates an expected call of SSLContext
func (mr *MockProviderMockRecorder) SSLContext() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSLContext", reflect.TypeOf((*MockProvider)(nil).SSLContext))
}

// HTTPClient mocks base method
func (m *MockProvider) HTTPClient(secure bool) (*http.Client, error) {
	ret := m.ctrl.Call(m, "HTTPClient", secure)
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTTPClient indicates an expected call of HTTPClient
func (mr *MockProviderMockRecorder) HTTPClient(secure interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPClient", reflect.TypeOf((*MockProvider)(nil).HTTPClient), secure)
}

// VerifyCertificate mocks base method
func (m *MockProvider) VerifyCertificate(certpem []byte, identity string) error {
	ret := m.ctrl.Call(m, "VerifyCertificate", certpem, identity)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyCertificate indicates an expected call of VerifyCertificate
func (mr *MockProviderMockRecorder) VerifyCertificate(certpem, identity interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCertificate", reflect.TypeOf((*MockProvider)(nil).VerifyCertificate), certpem, identity)
}

// PublicCertPem mocks base method
func (m *MockProvider) PublicCertPem() (*pem.Block, error) {
	ret := m.ctrl.Call(m, "PublicCertPem")
	ret0, _ := ret[0].(*pem.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicCertPem indicates an expected call of PublicCertPem
func (mr *MockProviderMockRecorder) PublicCertPem() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicCertPem", reflect.TypeOf((*MockProvider)(nil).PublicCertPem))
}

// PublicCertTXT mocks base method
func (m *MockProvider) PublicCertTXT() ([]byte, error) {
	ret := m.ctrl.Call(m, "PublicCertTXT")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicCertTXT indicates an expected call of PublicCertTXT
func (mr *MockProviderMockRecorder) PublicCertTXT() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicCertTXT", reflect.TypeOf((*MockProvider)(nil).PublicCertTXT))
}

// CachePublicData mocks base method
func (m *MockProvider) CachePublicData(data []byte, identity string) error {
	ret := m.ctrl.Call(m, "CachePublicData", data, identity)
	ret0, _ := ret[0].(error)
	return ret0
}

// CachePublicData indicates an expected call of CachePublicData
func (mr *MockProviderMockRecorder) CachePublicData(data, identity interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachePublicData", reflect.TypeOf((*MockProvider)(nil).CachePublicData), data, identity)
}

// CachedPublicData mocks base method
func (m *MockProvider) CachedPublicData(identity string) ([]byte, error) {
	ret := m.ctrl.Call(m, "CachedPublicData", identity)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CachedPublicData indicates an expected call of CachedPublicData
func (mr *MockProviderMockRecorder) CachedPublicData(identity interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachedPublicData", reflect.TypeOf((*MockProvider)(nil).CachedPublicData), identity)
}

// Enroll mocks base method
func (m *MockProvider) Enroll(ctx context.Context, wait time.Duration, cb func(int)) error {
	ret := m.ctrl.Call(m, "Enroll", ctx, wait, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enroll indicates an expected call of Enroll
func (mr *MockProviderMockRecorder) Enroll(ctx, wait, cb interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enroll", reflect.TypeOf((*MockProvider)(nil).Enroll), ctx, wait, cb)
}

// MocksettingsProvider is a mock of settingsProvider interface
type MocksettingsProvider struct {
	ctrl     *gomock.Controller
	recorder *MocksettingsProviderMockRecorder
}

// MocksettingsProviderMockRecorder is the mock recorder for MocksettingsProvider
type MocksettingsProviderMockRecorder struct {
	mock *MocksettingsProvider
}

// NewMocksettingsProvider creates a new mock instance
func NewMocksettingsProvider(ctrl *gomock.Controller) *MocksettingsProvider {
	mock := &MocksettingsProvider{ctrl: ctrl}
	mock.recorder = &MocksettingsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksettingsProvider) EXPECT() *MocksettingsProviderMockRecorder {
	return m.recorder
}

// PuppetSetting mocks base method
func (m *MocksettingsProvider) PuppetSetting(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "PuppetSetting", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PuppetSetting indicates an expected call of PuppetSetting
func (mr *MocksettingsProviderMockRecorder) PuppetSetting(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PuppetSetting", reflect.TypeOf((*MocksettingsProvider)(nil).PuppetSetting), arg0)
}

// Getuid mocks base method
func (m *MocksettingsProvider) Getuid() int {
	ret := m.ctrl.Call(m, "Getuid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getuid indicates an expected call of Getuid
func (mr *MocksettingsProviderMockRecorder) Getuid() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getuid", reflect.TypeOf((*MocksettingsProvider)(nil).Getuid))
}

// QuerySrvRecords mocks base method
func (m *MocksettingsProvider) QuerySrvRecords(records []string) ([]srvcache.Server, error) {
	ret := m.ctrl.Call(m, "QuerySrvRecords", records)
	ret0, _ := ret[0].([]srvcache.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySrvRecords indicates an expected call of QuerySrvRecords
func (mr *MocksettingsProviderMockRecorder) QuerySrvRecords(records interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySrvRecords", reflect.TypeOf((*MocksettingsProvider)(nil).QuerySrvRecords), records)
}

// OverrideCertname mocks base method
func (m *MocksettingsProvider) OverrideCertname() string {
	ret := m.ctrl.Call(m, "OverrideCertname")
	ret0, _ := ret[0].(string)
	return ret0
}

// OverrideCertname indicates an expected call of OverrideCertname
func (mr *MocksettingsProviderMockRecorder) OverrideCertname() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverrideCertname", reflect.TypeOf((*MocksettingsProvider)(nil).OverrideCertname))
}

// DisableTLSVerify mocks base method
func (m *MocksettingsProvider) DisableTLSVerify() bool {
	ret := m.ctrl.Call(m, "DisableTLSVerify")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DisableTLSVerify indicates an expected call of DisableTLSVerify
func (mr *MocksettingsProviderMockRecorder) DisableTLSVerify() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTLSVerify", reflect.TypeOf((*MocksettingsProvider)(nil).DisableTLSVerify))
}

// Configuration mocks base method
func (m *MocksettingsProvider) Configuration() *config.Config {
	ret := m.ctrl.Call(m, "Configuration")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// Configuration indicates an expected call of Configuration
func (mr *MocksettingsProviderMockRecorder) Configuration() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configuration", reflect.TypeOf((*MocksettingsProvider)(nil).Configuration))
}
