// generated code; DO NOT EDIT

package choria_utilclient

import (
	"encoding/base64"
	"encoding/json"

	"github.com/choria-io/go-choria/providers/agent/mcorpc/ddl/agent"
)

var rawDDL = "ewogICIkc2NoZW1hIjogImh0dHBzOi8vY2hvcmlhLmlvL3NjaGVtYXMvbWNvcnBjL2RkbC92MS9hZ2VudC5qc29uIiwKICAibWV0YWRhdGEiOiB7CiAgICAibmFtZSI6ICJjaG9yaWFfdXRpbCIsCiAgICAiZGVzY3JpcHRpb24iOiAiQ2hvcmlhIFV0aWxpdGllcyIsCiAgICAiYXV0aG9yIjogIlIuSS5QaWVuYWFyIDxyaXBAZGV2Y28ubmV0PiIsCiAgICAibGljZW5zZSI6ICJBcGFjaGUtMi4wIiwKICAgICJ2ZXJzaW9uIjogIjAuMjIuMCIsCiAgICAidXJsIjogImh0dHBzOi8vY2hvcmlhLmlvIiwKICAgICJ0aW1lb3V0IjogMgogIH0sCiAgImFjdGlvbnMiOiBbCiAgICB7CiAgICAgICJhY3Rpb24iOiAiaW5mbyIsCiAgICAgICJpbnB1dCI6IHsKICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAic2VjdXJpdHkiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU2VjdXJpdHkgUHJvdmlkZXIgcGx1Z2luIiwKICAgICAgICAgICJkaXNwbGF5X2FzIjogIlNlY3VyaXR5IFByb3ZpZGVyIiwKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICB9LAogICAgICAgICJzZWN1cmVfcHJvdG9jb2wiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSWYgdGhlIHByb3RvY29sIGlzIHJ1bm5pbmcgd2l0aCBQS0kgc2VjdXJpdHkgZW5hYmxlZCIsCiAgICAgICAgICAiZGlzcGxheV9hcyI6ICJQcm90b2NvbCBTZWN1cmUiLAogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICB9LAogICAgICAgICJjb25uZWN0b3IiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQ29ubmVjdG9yIHBsdWdpbiIsCiAgICAgICAgICAiZGlzcGxheV9hcyI6ICJDb25uZWN0b3IiLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgIH0sCiAgICAgICAgImNvbm5lY3Rvcl90bHMiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSWYgdGhlIGNvbm5lY3RvciBpcyBydW5uaW5nIHdpdGggVExTIHNlY3VyaXR5IGVuYWJsZWQiLAogICAgICAgICAgImRpc3BsYXlfYXMiOiAiQ29ubmVjdG9yIFRMUyIsCiAgICAgICAgICAidHlwZSI6ICJib29sZWFuIgogICAgICAgIH0sCiAgICAgICAgInBhdGgiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQWN0aXZlIE9TIFBBVEgiLAogICAgICAgICAgImRpc3BsYXlfYXMiOiAiUGF0aCIsCiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgfSwKICAgICAgICAiY2hvcmlhX3ZlcnNpb24iOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQ2hvcmlhIHZlcnNpb24iLAogICAgICAgICAgImRpc3BsYXlfYXMiOiAiQ2hvcmlhIFZlcnNpb24iLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgIH0sCiAgICAgICAgImNsaWVudF92ZXJzaW9uIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1pZGRsZXdhcmUgY2xpZW50IGxpYnJhcnkgdmVyc2lvbiIsCiAgICAgICAgICAiZGlzcGxheV9hcyI6ICJNaWRkbGV3YXJlIENsaWVudCBMaWJyYXJ5IFZlcnNpb24iLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgIH0sCiAgICAgICAgImNsaWVudF9mbGF2b3VyIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1pZGRsZXdhcmUgY2xpZW50IGxpYnJhcnkgZmxhdm91ciIsCiAgICAgICAgICAiZGlzcGxheV9hcyI6ICJNaWRkbGV3YXJlIENsaWVudCBGbGF2b3VyIiwKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICB9LAogICAgICAgICJjbGllbnRfb3B0aW9ucyI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBY3RpdmUgTWlkZGxld2FyZSBjbGllbnQgb3B0aW9ucyIsCiAgICAgICAgICAiZGlzcGxheV9hcyI6ICJNaWRkbGV3YXJlIENsaWVudCBPcHRpb25zIiwKICAgICAgICAgICJ0eXBlIjogImhhc2giCiAgICAgICAgfSwKICAgICAgICAiY29ubmVjdGVkX3NlcnZlciI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJDb25uZWN0ZWQgbWlkZGxld2FyZSBzZXJ2ZXIiLAogICAgICAgICAgImRpc3BsYXlfYXMiOiAiQ29ubmVjdGVkIEJyb2tlciIsCiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgfSwKICAgICAgICAiY2xpZW50X3N0YXRzIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1pZGRsZXdhcmUgY2xpZW50IHN0YXRpc3RpY3MiLAogICAgICAgICAgImRpc3BsYXlfYXMiOiAiTWlkZGxld2FyZSBDbGllbnQgU3RhdHMiLAogICAgICAgICAgInR5cGUiOiAiaGFzaCIKICAgICAgICB9LAogICAgICAgICJmYWN0ZXJfZG9tYWluIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkZhY3RlciBkb21haW4iLAogICAgICAgICAgImRpc3BsYXlfYXMiOiAiRmFjdGVyIERvbWFpbiIsCiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgfSwKICAgICAgICAiZmFjdGVyX2NvbW1hbmQiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQ29tbWFuZCB1c2VkIGZvciBGYWN0ZXIiLAogICAgICAgICAgImRpc3BsYXlfYXMiOiAiRmFjdGVyIiwKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICB9LAogICAgICAgICJzcnZfZG9tYWluIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkNvbmZpZ3VyZWQgU1JWIGRvbWFpbiIsCiAgICAgICAgICAiZGlzcGxheV9hcyI6ICJTUlYgRG9tYWluIiwKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICB9LAogICAgICAgICJ1c2luZ19zcnYiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSW5kaWNhdGVzIGlmIFNSViByZWNvcmRzIGFyZSBjb25zaWRlcmVkIiwKICAgICAgICAgICJkaXNwbGF5X2FzIjogIlNSViBVc2VkIiwKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICAgICAgfSwKICAgICAgICAibWlkZGxld2FyZV9zZXJ2ZXJzIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1pZGRsZXdhcmUgU2VydmVycyBjb25maWd1cmVkIG9yIGRpc2NvdmVyZWQiLAogICAgICAgICAgImRpc3BsYXlfYXMiOiAiTWlkZGxld2FyZSIsCiAgICAgICAgICAidHlwZSI6ICJhcnJheSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJkaXNwbGF5IjogImZhaWxlZCIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJDaG9yaWEgcmVsYXRlZCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBydW5uaW5nIERhZW1vbiBhbmQgTWlkZGxld2FyZSIsCiAgICAgICJhZ2dyZWdhdGUiOiBbCiAgICAgICAgewogICAgICAgICAgImZ1bmN0aW9uIjogInN1bW1hcnkiLAogICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICJjaG9yaWFfdmVyc2lvbiIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmdW5jdGlvbiI6ICJzdW1tYXJ5IiwKICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAiY2xpZW50X3ZlcnNpb24iCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZnVuY3Rpb24iOiAic3VtbWFyeSIsCiAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgImNsaWVudF9mbGF2b3VyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZ1bmN0aW9uIjogInN1bW1hcnkiLAogICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICJjb25uZWN0ZWRfc2VydmVyIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZ1bmN0aW9uIjogInN1bW1hcnkiLAogICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICJzcnZfZG9tYWluIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZ1bmN0aW9uIjogInN1bW1hcnkiLAogICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICJ1c2luZ19zcnYiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZnVuY3Rpb24iOiAic3VtbWFyeSIsCiAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgInNlY3VyZV9wcm90b2NvbCIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmdW5jdGlvbiI6ICJzdW1tYXJ5IiwKICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAiY29ubmVjdG9yX3RscyIKICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJhY3Rpb24iOiAibWFjaGluZV9zdGF0ZSIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJSZXRyaWV2ZXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYSBzcGVjaWZpYyBDaG9yaWEgQXV0b25vbW91cyBBZ2VudCIsCiAgICAgICJkaXNwbGF5IjogIm9rIiwKICAgICAgImlucHV0IjogewogICAgICAgICJpbnN0YW5jZSI6IHsKICAgICAgICAgICJwcm9tcHQiOiAiSW5zdGFuY2UgSUQiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1hY2hpbmUgSW5zdGFuY2UgSUQiLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZWZhdWx0IjogbnVsbCwKICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAidmFsaWRhdGlvbiI6ICJeListListListListLiskIiwKICAgICAgICAgICJtYXhsZW5ndGgiOiAzNgogICAgICAgIH0sCiAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAicHJvbXB0IjogIk5hbWUiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1hY2hpbmUgTmFtZSIsCiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlZmF1bHQiOiBudWxsLAogICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICJ2YWxpZGF0aW9uIjogIl5bYS16QS1aXVthLXpBLVowLTlfLV0rIiwKICAgICAgICAgICJtYXhsZW5ndGgiOiAxMjgKICAgICAgICB9LAogICAgICAgICJwYXRoIjogewogICAgICAgICAgInByb21wdCI6ICJQYXRoIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJNYWNoaW5lIFBhdGgiLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZWZhdWx0IjogbnVsbCwKICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAidmFsaWRhdGlvbiI6ICIuKyIsCiAgICAgICAgICAibWF4bGVuZ3RoIjogNTEyCiAgICAgICAgfQogICAgICB9LAogICAgICAiYWdncmVnYXRlIjogWwogICAgICAgIHsKICAgICAgICAgICJmdW5jdGlvbiI6ICJzdW1tYXJ5IiwKICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAic3RhdGUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZnVuY3Rpb24iOiAic3VtbWFyeSIsCiAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgIm5hbWUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZnVuY3Rpb24iOiAic3VtbWFyeSIsCiAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgInZlcnNpb24iCiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdLAogICAgICAib3V0cHV0IjogewogICAgICAgICJuYW1lIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBvZiB0aGUgYXV0b25vbW91cyBhZ2VudCIsCiAgICAgICAgICAiZGlzcGxheV9hcyI6ICJOYW1lIgogICAgICAgIH0sCiAgICAgICAgInZlcnNpb24iOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB2ZXJzaW9uIG9mIHRoZSBhdXRvbm9tb3VzIGFnZW50IiwKICAgICAgICAgICJkaXNwbGF5X2FzIjogIlZlcnNpb24iCiAgICAgICAgfSwKICAgICAgICAic3RhdGUiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjdXJyZW50IHN0YXRlIHRoZSBhZ2VudCBpcyBpbiIsCiAgICAgICAgICAiZGlzcGxheV9hcyI6ICJTdGF0ZSIKICAgICAgICB9LAogICAgICAgICJwYXRoIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbG9jYXRpb24gb24gZGlzayB3aGVyZSB0aGUgYXV0b25vbW91cyBhZ2VudCBpcyBzdG9yZWQiLAogICAgICAgICAgImRpc3BsYXlfYXMiOiAiUGF0aCIKICAgICAgICB9LAogICAgICAgICJpZCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHVuaXF1ZSBydW5uaW5nIElEIG9mIHRoZSBhdXRvbm9tb3VzIGFnZW50IiwKICAgICAgICAgICJkaXNwbGF5X2FzIjogIklEIgogICAgICAgIH0sCiAgICAgICAgInN0YXJ0X3RpbWUiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0aW1lIHRoZSBhdXRvbm9tb3VzIGFnZW50IHdhcyBzdGFydGVkIGluIHVuaXggc2Vjb25kcyIsCiAgICAgICAgICAiZGlzcGxheV9hcyI6ICJTdGFydGVkIgogICAgICAgIH0sCiAgICAgICAgImF2YWlsYWJsZV90cmFuc2l0aW9ucyI6IHsKICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbGlzdCBvZiBhdmFpbGFibGUgdHJhbnNpdGlvbnMgdGhpcyBhdXRvbm9tb3VzIGFnZW50IGNhbiBtYWtlIiwKICAgICAgICAgICJkaXNwbGF5X2FzIjogIkF2YWlsYWJsZSBUcmFuc2l0aW9ucyIKICAgICAgICB9LAogICAgICAgICJzY291dCI6IHsKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRydWUgd2hlbiB0aGlzIGF1dG9ub21vdXMgYWdlbnQgcmVwcmVzZW50cyBhIENob3JpYSBTY291dCBDaGVjayIsCiAgICAgICAgICAiZGlzcGxheV9hcyI6ICJTY291dCBDaGVjayIKICAgICAgICB9LAogICAgICAgICJjdXJyZW50X3N0YXRlIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBDaG9yaWEgU2NvdXQgc3BlY2lmaWMgc3RhdGUgZm9yIFNjb3V0IGNoZWNrcyIsCiAgICAgICAgICAiZGlzcGxheV9hcyI6ICJTY291dCBTdGF0ZSIKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhY3Rpb24iOiAibWFjaGluZV9zdGF0ZXMiLAogICAgICAiaW5wdXQiOiB7CiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgIm1hY2hpbmVfbmFtZXMiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTGlzdCBvZiBydW5uaW5nIG1hY2hpbmUgbmFtZXMiLAogICAgICAgICAgImRpc3BsYXlfYXMiOiAiTWFjaGluZSBOYW1lcyIsCiAgICAgICAgICAidHlwZSI6ICJhcnJheSIKICAgICAgICB9LAogICAgICAgICJtYWNoaW5lX2lkcyI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJMaXN0IG9mIHJ1bm5pbmcgbWFjaGluZSBJRHMiLAogICAgICAgICAgImRpc3BsYXlfYXMiOiAiTWFjaGluZSBJRHMiLAogICAgICAgICAgInR5cGUiOiAiYXJyYXkiCiAgICAgICAgfSwKICAgICAgICAic3RhdGVzIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhhc2ggbWFwIG9mIG1hY2hpbmUgc3RhdHVzc2VzIGluZGV4ZWQgYnkgbWFjaGluZSBJRCIsCiAgICAgICAgICAiZGlzcGxheV9hcyI6ICJNYWNoaW5lIFN0YXRlcyIsCiAgICAgICAgICAidHlwZSI6ICJoYXNoIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImRpc3BsYXkiOiAiYWx3YXlzIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlN0YXRlcyBvZiB0aGUgaG9zdGVkIENob3JpYSBBdXRvbm9tb3VzIEFnZW50cyIsCiAgICAgICJhZ2dyZWdhdGUiOiBbCiAgICAgICAgewogICAgICAgICAgImZ1bmN0aW9uIjogInN1bW1hcnkiLAogICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICJtYWNoaW5lX25hbWVzIgogICAgICAgICAgXQogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImFjdGlvbiI6ICJtYWNoaW5lX3RyYW5zaXRpb24iLAogICAgICAiaW5wdXQiOiB7CiAgICAgICAgImluc3RhbmNlIjogewogICAgICAgICAgInByb21wdCI6ICJJbnN0YW5jZSBJRCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTWFjaGluZSBJbnN0YW5jZSBJRCIsCiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlZmF1bHQiOiBudWxsLAogICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICJ2YWxpZGF0aW9uIjogIl4uKy0uKy0uKy0uKy0uKyQiLAogICAgICAgICAgIm1heGxlbmd0aCI6IDM2CiAgICAgICAgfSwKICAgICAgICAidmVyc2lvbiI6IHsKICAgICAgICAgICJwcm9tcHQiOiAiVmVyc2lvbiIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTWFjaGluZSBWZXJzaW9uIiwKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVmYXVsdCI6IG51bGwsCiAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgInZhbGlkYXRpb24iOiAiXlxcZCtcXC5cXGQrXFwuXFxkKyQiLAogICAgICAgICAgIm1heGxlbmd0aCI6IDIwCiAgICAgICAgfSwKICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICJwcm9tcHQiOiAiTmFtZSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTWFjaGluZSBOYW1lIiwKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVmYXVsdCI6IG51bGwsCiAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgInZhbGlkYXRpb24iOiAiXlthLXpBLVpdW2EtekEtWjAtOV8tXSsiLAogICAgICAgICAgIm1heGxlbmd0aCI6IDEyOAogICAgICAgIH0sCiAgICAgICAgInBhdGgiOiB7CiAgICAgICAgICAicHJvbXB0IjogIlBhdGgiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1hY2hpbmUgUGF0aCIsCiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlZmF1bHQiOiBudWxsLAogICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICJ2YWxpZGF0aW9uIjogIi4rIiwKICAgICAgICAgICJtYXhsZW5ndGgiOiA1MTIKICAgICAgICB9LAogICAgICAgICJ0cmFuc2l0aW9uIjogewogICAgICAgICAgInByb21wdCI6ICJUcmFuc2l0aW9uIE5hbWUiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0cmFuc2l0aW9uIGV2ZW50IHRvIHNlbmQgdG8gdGhlIG1hY2hpbmUiLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZWZhdWx0IjogbnVsbCwKICAgICAgICAgICJvcHRpb25hbCI6IGZhbHNlLAogICAgICAgICAgInZhbGlkYXRpb24iOiAiXlthLXpBLVpdW2EtekEtWjAtOV8tXSskIiwKICAgICAgICAgICJtYXhsZW5ndGgiOiAxMjgKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgInN1Y2Nlc3MiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSW5kaWNhdGVzIGlmIHRoZSB0cmFuc2l0aW9uIHdhcyBzdWNjZXNzZnVsbHkgYWNjZXB0ZWQiLAogICAgICAgICAgImRpc3BsYXlfYXMiOiAiQWNjZXB0ZWQiLAogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJkaXNwbGF5IjogImZhaWxlZCIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJBdHRlbXB0cyB0byBmb3JjZSBhIHRyYW5zaXRpb24gaW4gYSBob3N0ZWQgQ2hvcmlhIEF1dG9ub21vdXMgQWdlbnQiCiAgICB9CiAgXQp9Cg=="

// DDLBytes is the raw JSON encoded DDL file for the agent
func DDLBytes() ([]byte, error) {
	return base64.StdEncoding.DecodeString(rawDDL)
}

// DDL is a parsed and loaded DDL for the agent
func DDL() (*agent.DDL, error) {
	ddlj, err := DDLBytes()
	if err != nil {
		return nil, err
	}

	ddl := &agent.DDL{}
	err = json.Unmarshal(ddlj, ddl)
	if err != nil {
		return nil, err
	}

	return ddl, nil
}
