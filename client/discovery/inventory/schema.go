package inventory

import (
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/xeipuuv/gojsonschema"
)

const schema = `ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIiwKICAiaWQiOiAiaHR0cHM6Ly9jaG9yaWEuaW8vc2NoZW1hcy9jaG9yaWEvZGlzY292ZXJ5L3YxL2ludmVudG9yeV9maWxlLmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJTdHJ1Y3R1cmUgb2YgdGhlIGRhdGEgZmlsZSBmb3IgaW52ZW50b3J5IGZpbGUgZGlzY292ZXJ5IG1ldGhvZCIsCiAgInRpdGxlIjogImlvLmNob3JpYS5jaG9yaWEuZGlzY292ZXJ5LnYxLmludmVudG9yeV9maWxlIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJyZXF1aXJlZCI6IFsiJHNjaGVtYSIsImdyb3VwcyIsIm5vZGVzIl0sCiAgInByb3BlcnRpZXMiOiB7CiAgICAiJHNjaGVtYSI6ewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiY29uc3QiOiAiaHR0cHM6Ly9jaG9yaWEuaW8vc2NoZW1hcy9jaG9yaWEvZGlzY292ZXJ5L3YxL2ludmVudG9yeV9maWxlLmpzb24iCiAgICB9LAogICAgImdyb3VwcyI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlByZWRlZmluZWQgZ3JvdXBzIGJhc2VkIG9uIGRpc2NvdmVyeSBxdWVyaWVzIiwKICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAiaXRlbXMiOiB7CiAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAicmVxdWlyZWQiOiBbIm5hbWUiXSwKICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRGVzY3JpcHRpdmUgbmFtZSBmb3IgdGhlIGdyb3VwIiwKICAgICAgICAgICAgInBhdHRlcm4iOiAiXlthLXpBLVowLTlfLV0rJCIsCiAgICAgICAgICAgICJtaW5MZW5ndGgiOiAxCiAgICAgICAgICB9LAogICAgICAgICAgImZpbHRlciI6IHsKICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkZpbHRlciB0byBhcHBseSB0byB0aGUgbm9kZXMgaW4gdGhlIGRhdGEgd2hlbiByZXNvbHZpbmcgdGhpcyBncm91cCIsCiAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICJhZ2VudHMiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTmFtZXMgb2YgYWdlbnRzIHRvIG1hdGNoIiwKICAgICAgICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImNsYXNzZXMiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTmFtZXMgb2YgY2xhc3NlcyB0byBtYXRjaCIsCiAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJmYWN0cyI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJGYWN0cyBmaWx0ZXJzIHRvIG1hdGNoIiwKICAgICAgICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImlkZW50aXRpZXMiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSWRlbnRpdGllcyB0byBtYXRjaCIsCiAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJjb21wb3VuZCI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQ29tcG91bmQgZmlsdGVyIHRvIG1hdGNoIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJub2RlcyI6IHsKICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAiaXRlbXMiOiB7CiAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAicmVxdWlyZWQiOiBbIm5hbWUiLCAiY29sbGVjdGl2ZXMiLCAiZmFjdHMiLCAiY2xhc3NlcyIsICJhZ2VudHMiXSwKICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVW5pcXVlIG5hbWUgZm9yIHRoaXMgbm9kZSIsCiAgICAgICAgICAgICJtaW5MZW5ndGgiOiAxCiAgICAgICAgICB9LAogICAgICAgICAgImNvbGxlY3RpdmVzIjogewogICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJMaXN0IG9mIGNvbGxlY3RpdmVzIHRoaXMgbm9kZSBiZWxvbmdzIHRvIiwKICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICJmYWN0cyI6IHsKICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkZhY3RzIGRlc2NyaWJpbmcgdGhpcyBub2RlIgogICAgICAgICAgfSwKICAgICAgICAgICJjbGFzc2VzIjogewogICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJMaXN0IG9mIGNsYXNzZXMgdGhpcyBub2RlIGlzIHRhZ2dlZCB3aXRoIiwKICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICJhZ2VudHMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkxpc3Qgb2YgYWdlbnRzIGhvc3RlZCBieSB0aGlzIG5vZGUiLAogICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbIm5hbWUiLCJ2ZXJzaW9uIl0sCiAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgIm1pbkxlbmd0aCI6IDEsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdW5pcXVlIG5hbWUgb2YgdGhlIGFnZW50IiwKICAgICAgICAgICAgICAgICAgInBhdHRlcm4iOiAiXlthLXpBLVowLTldKyQiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICJtaW5MZW5ndGgiOiA1LAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU2VtdmVyIHZlcnNpb24gb2YgdGhlIGhvc3RlZCBhZ2VudCIsCiAgICAgICAgICAgICAgICAgICJwYXR0ZXJuIjogIl5cXGQrXFwuXFxkK1xcLlxcZCskIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQo=`

func ValidateInventory(i []byte) (err error) {
	jschema, err := base64.StdEncoding.DecodeString(schema)
	if err != nil {
		return err
	}

	schemaLoader := gojsonschema.NewBytesLoader(jschema)
	documentLoader := gojsonschema.NewBytesLoader(i)
	result, err := gojsonschema.Validate(schemaLoader, documentLoader)
	if err != nil {
		return fmt.Errorf("could not perform schema validation: %s", err)
	}

	if result.Valid() {
		return nil
	}

	validationErrors := []string{}
	for _, desc := range result.Errors() {
		validationErrors = append(validationErrors, desc.String())
	}

	if len(validationErrors) == 0 {
		return fmt.Errorf("inventory validation failed: unknown error")
	}

	return fmt.Errorf("inventory validation failed: %s", strings.Join(validationErrors, ", "))
}
