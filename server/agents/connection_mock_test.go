// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/choria-io/go-choria/choria (interfaces: AgentConnector)

// Package agents is a generated GoMock package.
package agents

import (
	context "context"
	choria "github.com/choria-io/go-choria/choria"
	gomock "github.com/golang/mock/gomock"
	nats_go "github.com/nats-io/nats.go"
	reflect "reflect"
)

// MockAgentConnector is a mock of AgentConnector interface
type MockAgentConnector struct {
	ctrl     *gomock.Controller
	recorder *MockAgentConnectorMockRecorder
}

// MockAgentConnectorMockRecorder is the mock recorder for MockAgentConnector
type MockAgentConnectorMockRecorder struct {
	mock *MockAgentConnector
}

// NewMockAgentConnector creates a new mock instance
func NewMockAgentConnector(ctrl *gomock.Controller) *MockAgentConnector {
	mock := &MockAgentConnector{ctrl: ctrl}
	mock.recorder = &MockAgentConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgentConnector) EXPECT() *MockAgentConnectorMockRecorder {
	return m.recorder
}

// AgentBroadcastTarget mocks base method
func (m *MockAgentConnector) AgentBroadcastTarget(arg0, arg1 string) string {
	ret := m.ctrl.Call(m, "AgentBroadcastTarget", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// AgentBroadcastTarget indicates an expected call of AgentBroadcastTarget
func (mr *MockAgentConnectorMockRecorder) AgentBroadcastTarget(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentBroadcastTarget", reflect.TypeOf((*MockAgentConnector)(nil).AgentBroadcastTarget), arg0, arg1)
}

// ConnectedServer mocks base method
func (m *MockAgentConnector) ConnectedServer() string {
	ret := m.ctrl.Call(m, "ConnectedServer")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConnectedServer indicates an expected call of ConnectedServer
func (mr *MockAgentConnectorMockRecorder) ConnectedServer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedServer", reflect.TypeOf((*MockAgentConnector)(nil).ConnectedServer))
}

// ConnectionOptions mocks base method
func (m *MockAgentConnector) ConnectionOptions() nats_go.Options {
	ret := m.ctrl.Call(m, "ConnectionOptions")
	ret0, _ := ret[0].(nats_go.Options)
	return ret0
}

// ConnectionOptions indicates an expected call of ConnectionOptions
func (mr *MockAgentConnectorMockRecorder) ConnectionOptions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionOptions", reflect.TypeOf((*MockAgentConnector)(nil).ConnectionOptions))
}

// ConnectionStats mocks base method
func (m *MockAgentConnector) ConnectionStats() nats_go.Statistics {
	ret := m.ctrl.Call(m, "ConnectionStats")
	ret0, _ := ret[0].(nats_go.Statistics)
	return ret0
}

// ConnectionStats indicates an expected call of ConnectionStats
func (mr *MockAgentConnectorMockRecorder) ConnectionStats() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionStats", reflect.TypeOf((*MockAgentConnector)(nil).ConnectionStats))
}

// QueueSubscribe mocks base method
func (m *MockAgentConnector) QueueSubscribe(arg0 context.Context, arg1, arg2, arg3 string, arg4 chan *choria.ConnectorMessage) error {
	ret := m.ctrl.Call(m, "QueueSubscribe", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSubscribe indicates an expected call of QueueSubscribe
func (mr *MockAgentConnectorMockRecorder) QueueSubscribe(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockAgentConnector)(nil).QueueSubscribe), arg0, arg1, arg2, arg3, arg4)
}

// Unsubscribe mocks base method
func (m *MockAgentConnector) Unsubscribe(arg0 string) error {
	ret := m.ctrl.Call(m, "Unsubscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockAgentConnectorMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockAgentConnector)(nil).Unsubscribe), arg0)
}
