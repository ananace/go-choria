// Code generated by MockGen. DO NOT EDIT.
// Source: ../../choria/connection.go

// Package agents is a generated GoMock package.
package agents

import (
	"context"
	"reflect"

	"github.com/choria-io/go-choria/choria"
	"github.com/choria-io/go-choria/srvcache"
	"github.com/golang/mock/gomock"
	"github.com/nats-io/nats.go"
	"github.com/sirupsen/logrus"
)

// MockConnectionManager is a mock of ConnectionManager interface.
type MockConnectionManager struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionManagerMockRecorder
}

// MockConnectionManagerMockRecorder is the mock recorder for MockConnectionManager.
type MockConnectionManagerMockRecorder struct {
	mock *MockConnectionManager
}

// NewMockConnectionManager creates a new mock instance.
func NewMockConnectionManager(ctrl *gomock.Controller) *MockConnectionManager {
	mock := &MockConnectionManager{ctrl: ctrl}
	mock.recorder = &MockConnectionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionManager) EXPECT() *MockConnectionManagerMockRecorder {
	return m.recorder
}

// NewConnector mocks base method.
func (m *MockConnectionManager) NewConnector(ctx context.Context, servers func() (srvcache.Servers, error), name string, logger *logrus.Entry) (choria.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConnector", ctx, servers, name, logger)
	ret0, _ := ret[0].(choria.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConnector indicates an expected call of NewConnector.
func (mr *MockConnectionManagerMockRecorder) NewConnector(ctx, servers, name, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConnector", reflect.TypeOf((*MockConnectionManager)(nil).NewConnector), ctx, servers, name, logger)
}

// MockPublishableConnector is a mock of PublishableConnector interface.
type MockPublishableConnector struct {
	ctrl     *gomock.Controller
	recorder *MockPublishableConnectorMockRecorder
}

// MockPublishableConnectorMockRecorder is the mock recorder for MockPublishableConnector.
type MockPublishableConnectorMockRecorder struct {
	mock *MockPublishableConnector
}

// NewMockPublishableConnector creates a new mock instance.
func NewMockPublishableConnector(ctrl *gomock.Controller) *MockPublishableConnector {
	mock := &MockPublishableConnector{ctrl: ctrl}
	mock.recorder = &MockPublishableConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublishableConnector) EXPECT() *MockPublishableConnectorMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPublishableConnector) Publish(msg *choria.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPublishableConnectorMockRecorder) Publish(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublishableConnector)(nil).Publish), msg)
}

// MockRawPublishableConnector is a mock of RawPublishableConnector interface.
type MockRawPublishableConnector struct {
	ctrl     *gomock.Controller
	recorder *MockRawPublishableConnectorMockRecorder
}

// MockRawPublishableConnectorMockRecorder is the mock recorder for MockRawPublishableConnector.
type MockRawPublishableConnectorMockRecorder struct {
	mock *MockRawPublishableConnector
}

// NewMockRawPublishableConnector creates a new mock instance.
func NewMockRawPublishableConnector(ctrl *gomock.Controller) *MockRawPublishableConnector {
	mock := &MockRawPublishableConnector{ctrl: ctrl}
	mock.recorder = &MockRawPublishableConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawPublishableConnector) EXPECT() *MockRawPublishableConnectorMockRecorder {
	return m.recorder
}

// PublishRaw mocks base method.
func (m *MockRawPublishableConnector) PublishRaw(target string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRaw", target, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRaw indicates an expected call of PublishRaw.
func (mr *MockRawPublishableConnectorMockRecorder) PublishRaw(target, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRaw", reflect.TypeOf((*MockRawPublishableConnector)(nil).PublishRaw), target, data)
}

// MockAgentConnector is a mock of AgentConnector interface.
type MockAgentConnector struct {
	ctrl     *gomock.Controller
	recorder *MockAgentConnectorMockRecorder
}

// MockAgentConnectorMockRecorder is the mock recorder for MockAgentConnector.
type MockAgentConnectorMockRecorder struct {
	mock *MockAgentConnector
}

// NewMockAgentConnector creates a new mock instance.
func NewMockAgentConnector(ctrl *gomock.Controller) *MockAgentConnector {
	mock := &MockAgentConnector{ctrl: ctrl}
	mock.recorder = &MockAgentConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentConnector) EXPECT() *MockAgentConnectorMockRecorder {
	return m.recorder
}

// AgentBroadcastTarget mocks base method.
func (m *MockAgentConnector) AgentBroadcastTarget(collective, agent string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentBroadcastTarget", collective, agent)
	ret0, _ := ret[0].(string)
	return ret0
}

// AgentBroadcastTarget indicates an expected call of AgentBroadcastTarget.
func (mr *MockAgentConnectorMockRecorder) AgentBroadcastTarget(collective, agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentBroadcastTarget", reflect.TypeOf((*MockAgentConnector)(nil).AgentBroadcastTarget), collective, agent)
}

// ConnectedServer mocks base method.
func (m *MockAgentConnector) ConnectedServer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedServer")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConnectedServer indicates an expected call of ConnectedServer.
func (mr *MockAgentConnectorMockRecorder) ConnectedServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedServer", reflect.TypeOf((*MockAgentConnector)(nil).ConnectedServer))
}

// ConnectionOptions mocks base method.
func (m *MockAgentConnector) ConnectionOptions() nats.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionOptions")
	ret0, _ := ret[0].(nats.Options)
	return ret0
}

// ConnectionOptions indicates an expected call of ConnectionOptions.
func (mr *MockAgentConnectorMockRecorder) ConnectionOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionOptions", reflect.TypeOf((*MockAgentConnector)(nil).ConnectionOptions))
}

// ConnectionStats mocks base method.
func (m *MockAgentConnector) ConnectionStats() nats.Statistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionStats")
	ret0, _ := ret[0].(nats.Statistics)
	return ret0
}

// ConnectionStats indicates an expected call of ConnectionStats.
func (mr *MockAgentConnectorMockRecorder) ConnectionStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionStats", reflect.TypeOf((*MockAgentConnector)(nil).ConnectionStats))
}

// QueueSubscribe mocks base method.
func (m *MockAgentConnector) QueueSubscribe(ctx context.Context, name, subject, group string, output chan *choria.ConnectorMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSubscribe", ctx, name, subject, group, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSubscribe indicates an expected call of QueueSubscribe.
func (mr *MockAgentConnectorMockRecorder) QueueSubscribe(ctx, name, subject, group, output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockAgentConnector)(nil).QueueSubscribe), ctx, name, subject, group, output)
}

// ServiceBroadcastTarget mocks base method.
func (m *MockAgentConnector) ServiceBroadcastTarget(collective, agent string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceBroadcastTarget", collective, agent)
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceBroadcastTarget indicates an expected call of ServiceBroadcastTarget.
func (mr *MockAgentConnectorMockRecorder) ServiceBroadcastTarget(collective, agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceBroadcastTarget", reflect.TypeOf((*MockAgentConnector)(nil).ServiceBroadcastTarget), collective, agent)
}

// Unsubscribe mocks base method.
func (m *MockAgentConnector) Unsubscribe(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockAgentConnectorMockRecorder) Unsubscribe(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockAgentConnector)(nil).Unsubscribe), name)
}

// MockClientConnector is a mock of ClientConnector interface.
type MockClientConnector struct {
	ctrl     *gomock.Controller
	recorder *MockClientConnectorMockRecorder
}

// MockClientConnectorMockRecorder is the mock recorder for MockClientConnector.
type MockClientConnectorMockRecorder struct {
	mock *MockClientConnector
}

// NewMockClientConnector creates a new mock instance.
func NewMockClientConnector(ctrl *gomock.Controller) *MockClientConnector {
	mock := &MockClientConnector{ctrl: ctrl}
	mock.recorder = &MockClientConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientConnector) EXPECT() *MockClientConnectorMockRecorder {
	return m.recorder
}

// ChanQueueSubscribe mocks base method.
func (m *MockClientConnector) ChanQueueSubscribe(name, subject, group string, capacity int) (chan *choria.ConnectorMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChanQueueSubscribe", name, subject, group, capacity)
	ret0, _ := ret[0].(chan *choria.ConnectorMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChanQueueSubscribe indicates an expected call of ChanQueueSubscribe.
func (mr *MockClientConnectorMockRecorder) ChanQueueSubscribe(name, subject, group, capacity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChanQueueSubscribe", reflect.TypeOf((*MockClientConnector)(nil).ChanQueueSubscribe), name, subject, group, capacity)
}

// Publish mocks base method.
func (m *MockClientConnector) Publish(msg *choria.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockClientConnectorMockRecorder) Publish(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockClientConnector)(nil).Publish), msg)
}

// ReplyTarget mocks base method.
func (m *MockClientConnector) ReplyTarget(msg *choria.Message) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyTarget", msg)
	ret0, _ := ret[0].(string)
	return ret0
}

// ReplyTarget indicates an expected call of ReplyTarget.
func (mr *MockClientConnectorMockRecorder) ReplyTarget(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyTarget", reflect.TypeOf((*MockClientConnector)(nil).ReplyTarget), msg)
}

// MockConnectorInfo is a mock of ConnectorInfo interface.
type MockConnectorInfo struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorInfoMockRecorder
}

// MockConnectorInfoMockRecorder is the mock recorder for MockConnectorInfo.
type MockConnectorInfoMockRecorder struct {
	mock *MockConnectorInfo
}

// NewMockConnectorInfo creates a new mock instance.
func NewMockConnectorInfo(ctrl *gomock.Controller) *MockConnectorInfo {
	mock := &MockConnectorInfo{ctrl: ctrl}
	mock.recorder = &MockConnectorInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectorInfo) EXPECT() *MockConnectorInfoMockRecorder {
	return m.recorder
}

// ConnectedServer mocks base method.
func (m *MockConnectorInfo) ConnectedServer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedServer")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConnectedServer indicates an expected call of ConnectedServer.
func (mr *MockConnectorInfoMockRecorder) ConnectedServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedServer", reflect.TypeOf((*MockConnectorInfo)(nil).ConnectedServer))
}

// ConnectionOptions mocks base method.
func (m *MockConnectorInfo) ConnectionOptions() nats.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionOptions")
	ret0, _ := ret[0].(nats.Options)
	return ret0
}

// ConnectionOptions indicates an expected call of ConnectionOptions.
func (mr *MockConnectorInfoMockRecorder) ConnectionOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionOptions", reflect.TypeOf((*MockConnectorInfo)(nil).ConnectionOptions))
}

// ConnectionStats mocks base method.
func (m *MockConnectorInfo) ConnectionStats() nats.Statistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionStats")
	ret0, _ := ret[0].(nats.Statistics)
	return ret0
}

// ConnectionStats indicates an expected call of ConnectionStats.
func (mr *MockConnectorInfoMockRecorder) ConnectionStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionStats", reflect.TypeOf((*MockConnectorInfo)(nil).ConnectionStats))
}

// MockInstanceConnector is a mock of InstanceConnector interface.
type MockInstanceConnector struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceConnectorMockRecorder
}

// MockInstanceConnectorMockRecorder is the mock recorder for MockInstanceConnector.
type MockInstanceConnectorMockRecorder struct {
	mock *MockInstanceConnector
}

// NewMockInstanceConnector creates a new mock instance.
func NewMockInstanceConnector(ctrl *gomock.Controller) *MockInstanceConnector {
	mock := &MockInstanceConnector{ctrl: ctrl}
	mock.recorder = &MockInstanceConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceConnector) EXPECT() *MockInstanceConnectorMockRecorder {
	return m.recorder
}

// AgentBroadcastTarget mocks base method.
func (m *MockInstanceConnector) AgentBroadcastTarget(collective, agent string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentBroadcastTarget", collective, agent)
	ret0, _ := ret[0].(string)
	return ret0
}

// AgentBroadcastTarget indicates an expected call of AgentBroadcastTarget.
func (mr *MockInstanceConnectorMockRecorder) AgentBroadcastTarget(collective, agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentBroadcastTarget", reflect.TypeOf((*MockInstanceConnector)(nil).AgentBroadcastTarget), collective, agent)
}

// Close mocks base method.
func (m *MockInstanceConnector) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockInstanceConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInstanceConnector)(nil).Close))
}

// ConnectedServer mocks base method.
func (m *MockInstanceConnector) ConnectedServer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedServer")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConnectedServer indicates an expected call of ConnectedServer.
func (mr *MockInstanceConnectorMockRecorder) ConnectedServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedServer", reflect.TypeOf((*MockInstanceConnector)(nil).ConnectedServer))
}

// ConnectionOptions mocks base method.
func (m *MockInstanceConnector) ConnectionOptions() nats.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionOptions")
	ret0, _ := ret[0].(nats.Options)
	return ret0
}

// ConnectionOptions indicates an expected call of ConnectionOptions.
func (mr *MockInstanceConnectorMockRecorder) ConnectionOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionOptions", reflect.TypeOf((*MockInstanceConnector)(nil).ConnectionOptions))
}

// ConnectionStats mocks base method.
func (m *MockInstanceConnector) ConnectionStats() nats.Statistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionStats")
	ret0, _ := ret[0].(nats.Statistics)
	return ret0
}

// ConnectionStats indicates an expected call of ConnectionStats.
func (mr *MockInstanceConnectorMockRecorder) ConnectionStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionStats", reflect.TypeOf((*MockInstanceConnector)(nil).ConnectionStats))
}

// IsConnected mocks base method.
func (m *MockInstanceConnector) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockInstanceConnectorMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockInstanceConnector)(nil).IsConnected))
}

// NodeDirectedTarget mocks base method.
func (m *MockInstanceConnector) NodeDirectedTarget(collective, identity string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeDirectedTarget", collective, identity)
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeDirectedTarget indicates an expected call of NodeDirectedTarget.
func (mr *MockInstanceConnectorMockRecorder) NodeDirectedTarget(collective, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeDirectedTarget", reflect.TypeOf((*MockInstanceConnector)(nil).NodeDirectedTarget), collective, identity)
}

// Publish mocks base method.
func (m *MockInstanceConnector) Publish(msg *choria.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockInstanceConnectorMockRecorder) Publish(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockInstanceConnector)(nil).Publish), msg)
}

// PublishRaw mocks base method.
func (m *MockInstanceConnector) PublishRaw(target string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRaw", target, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRaw indicates an expected call of PublishRaw.
func (mr *MockInstanceConnectorMockRecorder) PublishRaw(target, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRaw", reflect.TypeOf((*MockInstanceConnector)(nil).PublishRaw), target, data)
}

// QueueSubscribe mocks base method.
func (m *MockInstanceConnector) QueueSubscribe(ctx context.Context, name, subject, group string, output chan *choria.ConnectorMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSubscribe", ctx, name, subject, group, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSubscribe indicates an expected call of QueueSubscribe.
func (mr *MockInstanceConnectorMockRecorder) QueueSubscribe(ctx, name, subject, group, output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockInstanceConnector)(nil).QueueSubscribe), ctx, name, subject, group, output)
}

// ServiceBroadcastTarget mocks base method.
func (m *MockInstanceConnector) ServiceBroadcastTarget(collective, agent string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceBroadcastTarget", collective, agent)
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceBroadcastTarget indicates an expected call of ServiceBroadcastTarget.
func (mr *MockInstanceConnectorMockRecorder) ServiceBroadcastTarget(collective, agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceBroadcastTarget", reflect.TypeOf((*MockInstanceConnector)(nil).ServiceBroadcastTarget), collective, agent)
}

// Unsubscribe mocks base method.
func (m *MockInstanceConnector) Unsubscribe(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockInstanceConnectorMockRecorder) Unsubscribe(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockInstanceConnector)(nil).Unsubscribe), name)
}

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// AgentBroadcastTarget mocks base method.
func (m *MockConnector) AgentBroadcastTarget(collective, agent string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentBroadcastTarget", collective, agent)
	ret0, _ := ret[0].(string)
	return ret0
}

// AgentBroadcastTarget indicates an expected call of AgentBroadcastTarget.
func (mr *MockConnectorMockRecorder) AgentBroadcastTarget(collective, agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentBroadcastTarget", reflect.TypeOf((*MockConnector)(nil).AgentBroadcastTarget), collective, agent)
}

// ChanQueueSubscribe mocks base method.
func (m *MockConnector) ChanQueueSubscribe(name, subject, group string, capacity int) (chan *choria.ConnectorMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChanQueueSubscribe", name, subject, group, capacity)
	ret0, _ := ret[0].(chan *choria.ConnectorMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChanQueueSubscribe indicates an expected call of ChanQueueSubscribe.
func (mr *MockConnectorMockRecorder) ChanQueueSubscribe(name, subject, group, capacity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChanQueueSubscribe", reflect.TypeOf((*MockConnector)(nil).ChanQueueSubscribe), name, subject, group, capacity)
}

// Close mocks base method.
func (m *MockConnector) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnector)(nil).Close))
}

// Connect mocks base method.
func (m *MockConnector) Connect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockConnectorMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnector)(nil).Connect), ctx)
}

// ConnectedServer mocks base method.
func (m *MockConnector) ConnectedServer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedServer")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConnectedServer indicates an expected call of ConnectedServer.
func (mr *MockConnectorMockRecorder) ConnectedServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedServer", reflect.TypeOf((*MockConnector)(nil).ConnectedServer))
}

// ConnectionOptions mocks base method.
func (m *MockConnector) ConnectionOptions() nats.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionOptions")
	ret0, _ := ret[0].(nats.Options)
	return ret0
}

// ConnectionOptions indicates an expected call of ConnectionOptions.
func (mr *MockConnectorMockRecorder) ConnectionOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionOptions", reflect.TypeOf((*MockConnector)(nil).ConnectionOptions))
}

// ConnectionStats mocks base method.
func (m *MockConnector) ConnectionStats() nats.Statistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionStats")
	ret0, _ := ret[0].(nats.Statistics)
	return ret0
}

// ConnectionStats indicates an expected call of ConnectionStats.
func (mr *MockConnectorMockRecorder) ConnectionStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionStats", reflect.TypeOf((*MockConnector)(nil).ConnectionStats))
}

// IsConnected mocks base method.
func (m *MockConnector) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockConnectorMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockConnector)(nil).IsConnected))
}

// Nats mocks base method.
func (m *MockConnector) Nats() *nats.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nats")
	ret0, _ := ret[0].(*nats.Conn)
	return ret0
}

// Nats indicates an expected call of Nats.
func (mr *MockConnectorMockRecorder) Nats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nats", reflect.TypeOf((*MockConnector)(nil).Nats))
}

// NodeDirectedTarget mocks base method.
func (m *MockConnector) NodeDirectedTarget(collective, identity string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeDirectedTarget", collective, identity)
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeDirectedTarget indicates an expected call of NodeDirectedTarget.
func (mr *MockConnectorMockRecorder) NodeDirectedTarget(collective, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeDirectedTarget", reflect.TypeOf((*MockConnector)(nil).NodeDirectedTarget), collective, identity)
}

// Publish mocks base method.
func (m *MockConnector) Publish(msg *choria.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockConnectorMockRecorder) Publish(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockConnector)(nil).Publish), msg)
}

// PublishRaw mocks base method.
func (m *MockConnector) PublishRaw(target string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRaw", target, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRaw indicates an expected call of PublishRaw.
func (mr *MockConnectorMockRecorder) PublishRaw(target, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRaw", reflect.TypeOf((*MockConnector)(nil).PublishRaw), target, data)
}

// QueueSubscribe mocks base method.
func (m *MockConnector) QueueSubscribe(ctx context.Context, name, subject, group string, output chan *choria.ConnectorMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSubscribe", ctx, name, subject, group, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSubscribe indicates an expected call of QueueSubscribe.
func (mr *MockConnectorMockRecorder) QueueSubscribe(ctx, name, subject, group, output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockConnector)(nil).QueueSubscribe), ctx, name, subject, group, output)
}

// ReplyTarget mocks base method.
func (m *MockConnector) ReplyTarget(msg *choria.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyTarget", msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplyTarget indicates an expected call of ReplyTarget.
func (mr *MockConnectorMockRecorder) ReplyTarget(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyTarget", reflect.TypeOf((*MockConnector)(nil).ReplyTarget), msg)
}

// ServiceBroadcastTarget mocks base method.
func (m *MockConnector) ServiceBroadcastTarget(collective, agent string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceBroadcastTarget", collective, agent)
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceBroadcastTarget indicates an expected call of ServiceBroadcastTarget.
func (mr *MockConnectorMockRecorder) ServiceBroadcastTarget(collective, agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceBroadcastTarget", reflect.TypeOf((*MockConnector)(nil).ServiceBroadcastTarget), collective, agent)
}

// Unsubscribe mocks base method.
func (m *MockConnector) Unsubscribe(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockConnectorMockRecorder) Unsubscribe(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockConnector)(nil).Unsubscribe), name)
}
