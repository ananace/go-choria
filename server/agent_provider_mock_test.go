// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/choria-io/go-choria/server (interfaces: AgentProvider)

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	choria "github.com/choria-io/go-choria/choria"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// MockAgentProvider is a mock of AgentProvider interface.
type MockAgentProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAgentProviderMockRecorder
}

// MockAgentProviderMockRecorder is the mock recorder for MockAgentProvider.
type MockAgentProviderMockRecorder struct {
	mock *MockAgentProvider
}

// NewMockAgentProvider creates a new mock instance.
func NewMockAgentProvider(ctrl *gomock.Controller) *MockAgentProvider {
	mock := &MockAgentProvider{ctrl: ctrl}
	mock.recorder = &MockAgentProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentProvider) EXPECT() *MockAgentProviderMockRecorder {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockAgentProvider) Initialize(arg0 *choria.Framework, arg1 *logrus.Entry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Initialize", arg0, arg1)
}

// Initialize indicates an expected call of Initialize.
func (mr *MockAgentProviderMockRecorder) Initialize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockAgentProvider)(nil).Initialize), arg0, arg1)
}

// RegisterAgents mocks base method.
func (m *MockAgentProvider) RegisterAgents(arg0 context.Context, arg1 AgentManager, arg2 choria.AgentConnector, arg3 *logrus.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAgents", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAgents indicates an expected call of RegisterAgents.
func (mr *MockAgentProviderMockRecorder) RegisterAgents(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAgents", reflect.TypeOf((*MockAgentProvider)(nil).RegisterAgents), arg0, arg1, arg2, arg3)
}

// Version mocks base method.
func (m *MockAgentProvider) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockAgentProviderMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockAgentProvider)(nil).Version))
}
