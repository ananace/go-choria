package client

var templates = map[string]string{
	"action":        "e3sgR2VuZXJhdGVkV2FybmluZyB9fQoKcGFja2FnZSB7eyAuUGFja2FnZSB9fQoKaW1wb3J0ICgKCSJjb250ZXh0IgoJImVuY29kaW5nL2pzb24iCgkiZm10IgoJInN5bmMiCgkiaW8iCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL3Byb3RvY29sIgoJcnBjY2xpZW50ICJnaXRodWIuY29tL2Nob3JpYS1pby9nby1jaG9yaWEvcHJvdmlkZXJzL2FnZW50L21jb3JwYy9jbGllbnQiCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL3Byb3ZpZGVycy9hZ2VudC9tY29ycGMvcmVwbHlmbXQiCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL3Byb3ZpZGVycy9hZ2VudC9tY29ycGMvZGRsL2FnZW50IgopCgovLyB7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fVJlcXVlc3RlciBwZXJmb3JtcyBhIFJQQyByZXF1ZXN0IHRvIHt7IC5BZ2VudE5hbWUgfCBUb0xvd2VyIH19I3t7IC5BY3Rpb25OYW1lIHwgVG9Mb3dlciB9fQp0eXBlIHt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19UmVxdWVzdGVyIHN0cnVjdCB7CglyICAgICpyZXF1ZXN0ZXIKCW91dGMgY2hhbiAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQKfQoKLy8ge3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQgaXMgdGhlIG91dHB1dCBmcm9tIHRoZSB7eyAuQWN0aW9uTmFtZSB8IFRvTG93ZXIgfX0gYWN0aW9uCnR5cGUge3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQgc3RydWN0IHsKCWRldGFpbHMgKlJlc3VsdERldGFpbHMKCXJlcGx5ICAgbWFwW3N0cmluZ11pbnRlcmZhY2V7fQp9CgovLyB7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fVJlc3VsdCBpcyB0aGUgcmVzdWx0IGZyb20gYSB7eyAuQWN0aW9uTmFtZSB8IFRvTG93ZXIgfX0gYWN0aW9uCnR5cGUge3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXN1bHQgc3RydWN0IHsKCWRkbCAqYWdlbnQuRERMCglzdGF0cyAgICpycGNjbGllbnQuU3RhdHMKCW91dHB1dHMgW10qe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQKCXJwY3JlcGxpZXMgW10qcmVwbHlmbXQuUlBDUmVwbHkKCW11IHN5bmMuTXV0ZXgKfQoKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXN1bHQpIFJlbmRlclJlc3VsdHModyBpby5Xcml0ZXIsIGZvcm1hdCBSZW5kZXJGb3JtYXQsIGRpc3BsYXlNb2RlIERpc3BsYXlNb2RlLCB2ZXJib3NlIGJvb2wsIHNpbGVudCBib29sLCBjb2xvcml6ZSBib29sLCBsb2cgTG9nKSBlcnJvciB7CglkLm11LkxvY2soKQoJZGVmZXIgZC5tdS5VbmxvY2soKQoKCWlmIGQuc3RhdHMgPT0gbmlsIHsKCQlyZXR1cm4gZm10LkVycm9yZigicmVzdWx0IHN0YXRzIGlzIG5vdCBzZXQsIHJlc3VsdCB3YXMgbm90IGNvbXBsZXRlZCIpCgl9CgoJcmVzdWx0cyA6PSAmcmVwbHlmbXQuUlBDUmVzdWx0c3sKCQlBZ2VudDogICBkLnN0YXRzLkFnZW50KCksCgkJQWN0aW9uOiAgZC5zdGF0cy5BY3Rpb24oKSwKCQlSZXBsaWVzOiBkLnJwY3JlcGxpZXMsCgkJU3RhdHM6ICAgZC5zdGF0cywKCX0KCglhZGRsLCBlcnIgOj0gZC5kZGwuQWN0aW9uSW50ZXJmYWNlKGQuc3RhdHMuQWN0aW9uKCkpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gZXJyCgl9CgoJc3dpdGNoIGZvcm1hdCB7CgljYXNlIEpTT05Gb3JtYXQ6CgkJcmV0dXJuIHJlc3VsdHMuUmVuZGVySlNPTih3LCBhZGRsKQoJY2FzZSBUYWJsZUZvcm1hdDoKCQlyZXR1cm4gcmVzdWx0cy5SZW5kZXJUYWJsZSh3LCBhZGRsKQoJY2FzZSBUWFRGb290ZXI6CgkJcmVzdWx0cy5SZW5kZXJUWFRGb290ZXIodywgdmVyYm9zZSkKCQlyZXR1cm4gbmlsCglkZWZhdWx0OgoJCXJldHVybiByZXN1bHRzLlJlbmRlclRYVCh3LCBhZGRsLCB2ZXJib3NlLCBzaWxlbnQsIHJlcGx5Zm10LkRpc3BsYXlNb2RlKGRpc3BsYXlNb2RlKSwgY29sb3JpemUsIGxvZykKCX0KfQoKLy8gU3RhdHMgaXMgdGhlIHJwYyByZXF1ZXN0IHN0YXRzCmZ1bmMgKGQgKnt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19UmVzdWx0KSBTdGF0cygpIFN0YXRzIHsKCXJldHVybiBkLnN0YXRzCn0KCi8vIFJlc3VsdERldGFpbHMgaXMgdGhlIGRldGFpbHMgYWJvdXQgdGhlIHJlcXVlc3QKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQpIFJlc3VsdERldGFpbHMoKSAqUmVzdWx0RGV0YWlscyB7CglyZXR1cm4gZC5kZXRhaWxzCn0KCi8vIEhhc2hNYXAgaXMgdGhlIHJhdyBvdXRwdXQgZGF0YQpmdW5jIChkICp7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fU91dHB1dCkgSGFzaE1hcCgpIG1hcFtzdHJpbmddaW50ZXJmYWNle30gewoJcmV0dXJuIGQucmVwbHkKfQoKLy8gSlNPTiBpcyB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgb3V0cHV0IGRhdGEKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQpIEpTT04oKSAoW11ieXRlLCBlcnJvcikgewoJcmV0dXJuIGpzb24uTWFyc2hhbChkLnJlcGx5KQp9CgovLyBQYXJzZU91dHB1dCBwYXJzZXMgdGhlIHJlc3VsdCB2YWx1ZSBmcm9tIHRoZSB7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fSBhY3Rpb24gaW50byB0YXJnZXQKZnVuYyAoZCAqe3sgJC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19T3V0cHV0KSBQYXJzZXt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19T3V0cHV0KHRhcmdldCBpbnRlcmZhY2V7fSkgZXJyb3IgewoJaiwgZXJyIDo9IGQuSlNPTigpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gZm10LkVycm9yZigiY291bGQgbm90IGFjY2VzcyBwYXlsb2FkOiAlcyIsIGVycikKCX0KCgllcnIgPSBqc29uLlVubWFyc2hhbChqLCB0YXJnZXQpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gZm10LkVycm9yZigiY291bGQgbm90IHVubWFyc2hhbCBKU09OIHBheWxvYWQ6ICVzIiwgZXJyKQoJfQoKCXJldHVybiBuaWwKfQoKLy8gRG8gcGVyZm9ybXMgdGhlIHJlcXVlc3QKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXF1ZXN0ZXIpIERvKGN0eCBjb250ZXh0LkNvbnRleHQpICgqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXN1bHQsIGVycm9yKSB7CglkcmVzIDo9ICZ7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fVJlc3VsdHtkZGw6IGQuci5jbGllbnQuZGRsfQoKCWhhbmRsZXIgOj0gZnVuYyhwciBwcm90b2NvbC5SZXBseSwgciAqcnBjY2xpZW50LlJQQ1JlcGx5KSB7CgkJLy8gZmlsdGVyZWQgYnkgZXhwciBmaWx0ZXIKCQlpZiByID09bmlsIHsKCQkJcmV0dXJuCgkJfQoKCQlvdXRwdXQgOj0gJnt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19T3V0cHV0ewoJCQlyZXBseTogbWFrZShtYXBbc3RyaW5nXWludGVyZmFjZXt9KSwKCQkJZGV0YWlsczogJlJlc3VsdERldGFpbHN7CgkJCQlzZW5kZXI6ICBwci5TZW5kZXJJRCgpLAoJCQkJY29kZTogICAgaW50KHIuU3RhdHVzY29kZSksCgkJCQltZXNzYWdlOiByLlN0YXR1c21zZywKCQkJCXRzOiAgICAgIHByLlRpbWUoKSwKCQkJfSwKCQl9CgoJCWVyciA6PSBqc29uLlVubWFyc2hhbChyLkRhdGEsICZvdXRwdXQucmVwbHkpCgkJaWYgZXJyICE9IG5pbCB7CgkJCWQuci5jbGllbnQuZXJyb3JmKCJDb3VsZCBub3QgZGVjb2RlIHJlcGx5IGZyb20gJXM6ICVzIiwgcHIuU2VuZGVySUQoKSwgZXJyKQoJCX0KCgkJLy8gY2FsbGVyIHdhbnRzIGEgY2hhbm5lbCBzbyB3ZSBkb250IHJldHVybiBhIHJlc3Vsc2V0IHRvbyAobG90cyBvZiBtZW1vcnkgZXRjKQoJCS8vIHRoaXMgaXMgdW51c2VkIG5vdywgbm8gc3VwcG9ydCBmb3Igc2V0dGluZyBhIGNoYW5uZWwKCQlpZiBkLm91dGMgIT0gbmlsIHsKCQkJZC5vdXRjIDwtIG91dHB1dAoJCQlyZXR1cm4KCQl9CgoJCS8vIGVsc2UgcHJlcGFyZSBvdXIgcmVzdWx0IHNldAoJCWRyZXMubXUuTG9jaygpCgkJZHJlcy5vdXRwdXRzID0gYXBwZW5kKGRyZXMub3V0cHV0cywgb3V0cHV0KQoJCWRyZXMucnBjcmVwbGllcyA9IGFwcGVuZChkcmVzLnJwY3JlcGxpZXMsICZyZXBseWZtdC5SUENSZXBseXsKCQkJU2VuZGVyOiAgIHByLlNlbmRlcklEKCksCgkJCVJQQ1JlcGx5OiByLAoJCX0pCgkJZHJlcy5tdS5VbmxvY2soKQoJfQoKCXJlcywgZXJyIDo9IGQuci5kbyhjdHgsIGhhbmRsZXIpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCglkcmVzLnN0YXRzID0gcmVzCgoJcmV0dXJuIGRyZXMsIG5pbAp9CgovLyBFYWNoT3V0cHV0IGl0ZXJhdGVzIG92ZXIgYWxsIHJlc3VsdHMgcmVjZWl2ZWQKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXN1bHQpIEVhY2hPdXRwdXQoaCBmdW5jKHIgKnt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19T3V0cHV0KSkgewoJZm9yIF8sIHJlc3AgOj0gcmFuZ2UgZC5vdXRwdXRzIHsKCQloKHJlc3ApCgl9Cn0KCnt7IHJhbmdlICRuYW1lLCAkaW5wdXQgOj0gLk9wdGlvbmFsSW5wdXRzIH19Ci8vIHt7ICRuYW1lIHwgU25ha2VUb0NhbWVsIH19IGlzIGFuIG9wdGlvbmFsIGlucHV0IHRvIHRoZSB7eyAkLkFjdGlvbk5hbWUgfCBUb0xvd2VyIH19IGFjdGlvbgovLwovLyBEZXNjcmlwdGlvbjoge3sgJGlucHV0LkRlc2NyaXB0aW9uIH19CmZ1bmMgKGQgKnt7ICQuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fVJlcXVlc3Rlcikge3sgJG5hbWUgfCBTbmFrZVRvQ2FtZWwgfX0odiB7eyBDaG9yaWFUeXBlVG9Hb1R5cGUgJGlucHV0LlR5cGUgfX0pICp7eyAkLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXF1ZXN0ZXIgewoJZC5yLmFyZ3NbInt7ICRuYW1lIHwgVG9Mb3dlciB9fSJdID0gdgoKCXJldHVybiBkCn0Ke3sgZW5kIH19Cnt7IHJhbmdlICRuYW1lLCAkb3V0cHV0IDo9IC5PdXRwdXRzIH19Ci8vIHt7ICRuYW1lIHwgU25ha2VUb0NhbWVsIH19IGlzIHRoZSB2YWx1ZSBvZiB0aGUge3sgJG5hbWUgfX0gb3V0cHV0Ci8vCi8vIERlc2NyaXB0aW9uOiB7eyAkb3V0cHV0LkRlc2NyaXB0aW9uIH19CmZ1bmMgKGQgKnt7ICQuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fU91dHB1dCkge3sgJG5hbWUgfCBTbmFrZVRvQ2FtZWwgfX0oKSB7eyBDaG9yaWFUeXBlVG9Hb1R5cGUgJG91dHB1dC5UeXBlIH19IHsKCXZhbCA6PSBkLnJlcGx5WyJ7eyAkbmFtZSB9fSJdCglyZXR1cm4ge3sgQ2hvcmlhVHlwZVRvVmFsT2ZUeXBlICRvdXRwdXQuVHlwZSB9fQp9Cnt7IGVuZCB9fQo=",
	"client":        "",
	"ddl":           "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJImVuY29kaW5nL2Jhc2U2NCIKCSJlbmNvZGluZy9qc29uIgoKCSJnaXRodWIuY29tL2Nob3JpYS1pby9nby1jaG9yaWEvcHJvdmlkZXJzL2FnZW50L21jb3JwYy9kZGwvYWdlbnQiCikKCgp2YXIgcmF3RERMID0gInt7IC5SYXdEREwgfCBCYXNlNjRFbmNvZGUgfX0iCgovLyBERExCeXRlcyBpcyB0aGUgcmF3IEpTT04gZW5jb2RlZCBEREwgZmlsZSBmb3IgdGhlIGFnZW50CmZ1bmMgRERMQnl0ZXMoKSAoW11ieXRlLCBlcnJvcikgewoJcmV0dXJuIGJhc2U2NC5TdGRFbmNvZGluZy5EZWNvZGVTdHJpbmcocmF3RERMKQp9CgovLyBEREwgaXMgYSBwYXJzZWQgYW5kIGxvYWRlZCBEREwgZm9yIHRoZSBhZ2VudApmdW5jIERETCgpICgqYWdlbnQuRERMLCBlcnJvcikgewoJZGRsaiwgZXJyIDo9IERETEJ5dGVzKCkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoKCWRkbCA6PSAmYWdlbnQuRERMe30KCWVyciA9IGpzb24uVW5tYXJzaGFsKGRkbGosIGRkbCkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoKCXJldHVybiBkZGwsIG5pbAp9Cg==",
	"discover":      "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJImNvbnRleHQiCgkic3luYyIKCSJ0aW1lIgoJImZtdCIKCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL2NsaWVudC9kaXNjb3ZlcnkvYnJvYWRjYXN0IgoJImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9jbGllbnQvZGlzY292ZXJ5L3B1cHBldGRiIgoJImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9wcm90b2NvbCIKKQoKLy8gQnJvYWRjYXN0TlMgaXMgYSBOb2RlU291cmNlIHRoYXQgdXNlcyB0aGUgQ2hvcmlhIG5ldHdvcmsgYnJvYWRjYXN0IG1ldGhvZCB0byBkaXNjb3ZlciBub2Rlcwp0eXBlIEJyb2FkY2FzdE5TIHN0cnVjdCB7Cglub2RlQ2FjaGUgW11zdHJpbmcKCWYgICAgICAgICAqcHJvdG9jb2wuRmlsdGVyCgoJc3luYy5NdXRleAp9CgovLyBSZXNldCByZXNldHMgdGhlIGludGVybmFsIG5vZGUgY2FjaGUKZnVuYyAoYiAqQnJvYWRjYXN0TlMpIFJlc2V0KCkgewoJYi5Mb2NrKCkKCWRlZmVyIGIuVW5sb2NrKCkKCgliLm5vZGVDYWNoZSA9IFtdc3RyaW5ne30KfQoKLy8gRGlzY292ZXIgcGVyZm9ybXMgdGhlIGRpc2NvdmVyeSBvZiBub2RlcyBhZ2FpbnN0IHRoZSBDaG9yaWEgTmV0d29yawpmdW5jIChiICpCcm9hZGNhc3ROUykgRGlzY292ZXIoY3R4IGNvbnRleHQuQ29udGV4dCwgZncgQ2hvcmlhRnJhbWV3b3JrLCBmaWx0ZXJzIFtdRmlsdGVyRnVuYykgKFtdc3RyaW5nLCBlcnJvcikgewoJYi5Mb2NrKCkKCWRlZmVyIGIuVW5sb2NrKCkKCgljb3BpZXIgOj0gZnVuYygpIFtdc3RyaW5nIHsKCQlvdXQgOj0gbWFrZShbXXN0cmluZywgbGVuKGIubm9kZUNhY2hlKSkKCQlmb3IgaSwgbiA6PSByYW5nZSBiLm5vZGVDYWNoZSB7CgkJCW91dFtpXSA9IG4KCQl9CgoJCXJldHVybiBvdXQKCX0KCglpZiAhKGIubm9kZUNhY2hlID09IG5pbCB8fCBsZW4oYi5ub2RlQ2FjaGUpID09IDApIHsKCQlyZXR1cm4gY29waWVyKCksIG5pbAoJfQoKCWVyciA6PSBiLnBhcnNlRmlsdGVycyhmaWx0ZXJzKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9CgoJaWYgYi5ub2RlQ2FjaGUgPT0gbmlsIHsKCQliLm5vZGVDYWNoZSA9IFtdc3RyaW5ne30KCX0KCgljZmcgOj0gZncuQ29uZmlndXJhdGlvbigpCglub2RlcywgZXJyIDo9IGJyb2FkY2FzdC5OZXcoZncpLkRpc2NvdmVyKGN0eCwgYnJvYWRjYXN0LkZpbHRlcihiLmYpLCBicm9hZGNhc3QuVGltZW91dCh0aW1lLlNlY29uZCp0aW1lLkR1cmF0aW9uKGNmZy5EaXNjb3ZlcnlUaW1lb3V0KSkpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gW11zdHJpbmd7fSwgZXJyCgl9CgoJYi5ub2RlQ2FjaGUgPSBub2RlcwoKCXJldHVybiBjb3BpZXIoKSwgbmlsCn0KCgpmdW5jIChwICpCcm9hZGNhc3ROUykgcGFyc2VGaWx0ZXJzKGZzIFtdRmlsdGVyRnVuYykgZXJyb3IgewoJcC5mID0gcHJvdG9jb2wuTmV3RmlsdGVyKCkKCglmb3IgXywgZiA6PSByYW5nZSBmcyB7CgkJZXJyIDo9IGYocC5mKQoJCWlmIGVyciAhPSBuaWwgewoJCQlyZXR1cm4gZXJyCgkJfQoJfQoKCXJldHVybiBuaWwKfQoKLy8gUHVwcGV0REJOUyBpcyBhIE5vZGVTb3VyY2UgdGhhdCB1c2VzIHRoZSBQdXBwZXREQiBQUUwgUXVlcmllcyB0byBkaXNjb3ZlciBub2Rlcwp0eXBlIFB1cHBldERCTlMgc3RydWN0IHsKCW5vZGVDYWNoZSBbXXN0cmluZwoJZiAgICAgICAgICpwcm90b2NvbC5GaWx0ZXIKCglzeW5jLk11dGV4Cn0KCi8vIFJlc2V0IHJlc2V0cyB0aGUgaW50ZXJuYWwgbm9kZSBjYWNoZQpmdW5jIChwICpQdXBwZXREQk5TKSBSZXNldCgpIHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJcC5ub2RlQ2FjaGUgPSBbXXN0cmluZ3t9Cn0KCi8vIERpc2NvdmVyIHBlcmZvcm1zIHRoZSBkaXNjb3Zlcnkgb2Ygbm9kZXMgYWdhaW5zdCB0aGUgQ2hvcmlhIE5ldHdvcmsKZnVuYyAocCAqUHVwcGV0REJOUykgRGlzY292ZXIoY3R4IGNvbnRleHQuQ29udGV4dCwgZncgQ2hvcmlhRnJhbWV3b3JrLCBmaWx0ZXJzIFtdRmlsdGVyRnVuYykgKFtdc3RyaW5nLCBlcnJvcikgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCgljb3BpZXIgOj0gZnVuYygpIFtdc3RyaW5nIHsKCQlvdXQgOj0gbWFrZShbXXN0cmluZywgbGVuKHAubm9kZUNhY2hlKSkKCQlmb3IgaSwgbiA6PSByYW5nZSBwLm5vZGVDYWNoZSB7CgkJCW91dFtpXSA9IG4KCQl9CgoJCXJldHVybiBvdXQKCX0KCglpZiAhKHAubm9kZUNhY2hlID09IG5pbCB8fCBsZW4ocC5ub2RlQ2FjaGUpID09IDApIHsKCQlyZXR1cm4gY29waWVyKCksIG5pbAoJfQoKCWVyciA6PSBwLnBhcnNlRmlsdGVycyhmaWx0ZXJzKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9CgoJaWYgcC5ub2RlQ2FjaGUgPT0gbmlsIHsKCQlwLm5vZGVDYWNoZSA9IFtdc3RyaW5ne30KCX0KCgljZmcgOj0gZncuQ29uZmlndXJhdGlvbigpCglub2RlcywgZXJyIDo9IHB1cHBldGRiLk5ldyhmdykuRGlzY292ZXIoY3R4LCBwdXBwZXRkYi5GaWx0ZXIocC5mKSwgcHVwcGV0ZGIuVGltZW91dCh0aW1lLlNlY29uZCp0aW1lLkR1cmF0aW9uKGNmZy5EaXNjb3ZlcnlUaW1lb3V0KSkpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gW11zdHJpbmd7fSwgZXJyCgl9CgoJcC5ub2RlQ2FjaGUgPSBub2RlcwoKCXJldHVybiBjb3BpZXIoKSwgbmlsCn0KCmZ1bmMgKHAgKlB1cHBldERCTlMpIHBhcnNlRmlsdGVycyhmcyBbXUZpbHRlckZ1bmMpIGVycm9yIHsKCXAuZiA9IHByb3RvY29sLk5ld0ZpbHRlcigpCgoJZm9yIF8sIGYgOj0gcmFuZ2UgZnMgewoJCWVyciA6PSBmKHAuZikKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcmV0dXJuIGVycgoJCX0KCX0KCglpZiBsZW4ocC5mLkNvbXBvdW5kKSA+IDAgewoJCXJldHVybiBmbXQuRXJyb3JmKCJjb21wb3VuZCBmaWx0ZXJzIGFyZSBub3Qgc3VwcG9ydGVkIGJ5IFB1cHBldERCIikKCX0KCglyZXR1cm4gbmlsCn0K",
	"doc":           "e3sgR2VuZXJhdGVkV2FybmluZyB9fQoKLy8gUGFja2FnZSB7eyAuUGFja2FnZSB9fSBpcyBhbiBBUEkgY2xpZW50IHRvIHRoZSBDaG9yaWEge3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgQ2FwaXRhbGl6ZSB9fSBhZ2VudCBWZXJzaW9uIHt7IC5EREwuTWV0YWRhdGEuVmVyc2lvbiB9fS4KLy8KLy8gQWN0aW9uczoKe3stIHJhbmdlICRpLCAkYWN0aW9uIDo9IC5EREwuQWN0aW9ucyB9fQovLyAgICoge3sgJGFjdGlvbi5OYW1lIHwgU25ha2VUb0NhbWVsIH19IC0ge3sgJGFjdGlvbi5EZXNjcmlwdGlvbiAtfX0Ke3sgZW5kIH19CnBhY2thZ2Uge3sgLlBhY2thZ2UgfX0KCg==",
	"initoptions":   "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJImdpdGh1Yi5jb20vc2lydXBzZW4vbG9ncnVzIgopCgp0eXBlIGluaXRPcHRpb25zIHN0cnVjdCB7CgljZmdGaWxlIHN0cmluZwoJbG9nZ2VyICAqbG9ncnVzLkVudHJ5CglucyBOb2RlU291cmNlCglwcm9ncmVzcyBib29sCn0KCi8vIEluaXRpYWxpemF0aW9uT3B0aW9uIGlzIGFuIG9wdGlvbmFsIHNldHRpbmcgdXNlZCB0byBpbml0aWFsaXplIHRoZSBjbGllbnQKdHlwZSBJbml0aWFsaXphdGlvbk9wdGlvbiBmdW5jKG9wdHMgKmluaXRPcHRpb25zKQoKLy8gQ29uZmlnRmlsZSBzZXRzIHRoZSBjb25maWcgZmlsZSB0byB1c2UsIHdoZW4gbm90IHNldCB3aWxsIHVzZSB0aGUgdXNlciBkZWZhdWx0CmZ1bmMgQ29uZmlnRmlsZShmIHN0cmluZykgSW5pdGlhbGl6YXRpb25PcHRpb24gewoJcmV0dXJuIGZ1bmMobyAqaW5pdE9wdGlvbnMpIHsKCQlvLmNmZ0ZpbGUgPSBmCgl9Cn0KCi8vIExvZ2dlciBzZXRzIHRoZSBsb2dnZXIgdG8gdXNlIGVsc2Ugb25lIGlzIG1hZGUgdmlhIHRoZSBDaG9yaWEgZnJhbWV3b3JrCmZ1bmMgTG9nZ2VyKGwgKmxvZ3J1cy5FbnRyeSkgSW5pdGlhbGl6YXRpb25PcHRpb24gewoJcmV0dXJuIGZ1bmMobyAqaW5pdE9wdGlvbnMpIHsKCQlvLmxvZ2dlciA9IGwKCX0KfQoKLy8gRGlzY292ZXJ5IHNldHMgdGhlIE5vZGVTb3VyY2UgdG8gdXNlIHdoZW4gZmluZGluZyBub2RlcyB0byBtYW5hZ2UKZnVuYyBEaXNjb3ZlcnkobnMgTm9kZVNvdXJjZSkgSW5pdGlhbGl6YXRpb25PcHRpb24gewoJcmV0dXJuIGZ1bmMobyAqaW5pdE9wdGlvbnMpIHsKCQlvLm5zID0gbnMKCX0KfQoKLy8gUHJvZ3Jlc3MgZW5hYmxlcyBkaXNwbGF5aW5nIGEgcHJvZ3Jlc3MgYmFyCmZ1bmMgUHJvZ3Jlc3MoKSBJbml0aWFsaXphdGlvbk9wdGlvbiB7CglyZXR1cm4gZnVuYyhvICppbml0T3B0aW9ucykgewoJCW8ucHJvZ3Jlc3MgPSB0cnVlCgl9Cn0K",
	"logging":       "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgpmdW5jIChjICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIGluZm9mKG1zZyBzdHJpbmcsIGEgLi4uaW50ZXJmYWNle30pIHsKCWMuY2xpZW50T3B0cy5sb2dnZXIuSW5mb2YobXNnLCBhLi4uKQp9CgpmdW5jIChjICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIGVycm9yZihtc2cgc3RyaW5nLCBhIC4uLmludGVyZmFjZXt9KSB7CgljLmNsaWVudE9wdHMubG9nZ2VyLkVycm9yZihtc2csIGEuLi4pCn0K",
	"requester":     "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJImNvbnRleHQiCgkiZm10IgoKCSJnaXRodWIuY29tL2Nob3JpYS1pby9nby1jaG9yaWEvcHJvdG9jb2wiCglycGNjbGllbnQgImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9wcm92aWRlcnMvYWdlbnQvbWNvcnBjL2NsaWVudCIKCSJnaXRodWIuY29tL2dvc3VyaS91aXByb2dyZXNzIgopCgovLyByZXF1ZXN0ZXIgaXMgYSBnZW5lcmljIHJlcXVlc3QgaGFuZGxlcgp0eXBlIHJlcXVlc3RlciBzdHJ1Y3QgewoJY2xpZW50ICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQKCWFjdGlvbiBzdHJpbmcKCWFyZ3MgICBtYXBbc3RyaW5nXWludGVyZmFjZXt9Cglwcm9ncmVzcyAqdWlwcm9ncmVzcy5CYXIKfQoKLy8gZG8gcGVyZm9ybXMgdGhlIHJlcXVlc3QKZnVuYyAociAqcmVxdWVzdGVyKSBkbyhjdHggY29udGV4dC5Db250ZXh0LCBoYW5kbGVyIGZ1bmMocHIgcHJvdG9jb2wuUmVwbHksIHIgKnJwY2NsaWVudC5SUENSZXBseSkpICgqcnBjY2xpZW50LlN0YXRzLCBlcnJvcikgewoJdGFyZ2V0cyA6PSBtYWtlKFtdc3RyaW5nLCBsZW4oci5jbGllbnQudGFyZ2V0cykpCgl2YXIgZXJyIGVycm9yCgoJci5jbGllbnQuTG9jaygpCgljb3B5KHRhcmdldHMsIHIuY2xpZW50LnRhcmdldHMpCglkaXNjb3ZlcmVyIDo9IHIuY2xpZW50Lm5zCglmaWx0ZXJzIDo9IHIuY2xpZW50LmZpbHRlcnMKCWZ3IDo9IHIuY2xpZW50LmZ3Cglwcm9ncmVzcyA6PSByLmNsaWVudC5jbGllbnRPcHRzLnByb2dyZXNzCgoJaWYgbGVuKHRhcmdldHMpID09IDAgewoJCWlmIHByb2dyZXNzIHsKCQkJZm10LlByaW50KCJEaXNjb3ZlcmluZyBub2RlcyAuLi4uICIpCgkJfSBlbHNlIHsKCQkJci5jbGllbnQuaW5mb2YoIlN0YXJ0aW5nIGRpc2NvdmVyeSIpCgkJfQoKCQl0YXJnZXRzLCBlcnIgPSBkaXNjb3ZlcmVyLkRpc2NvdmVyKGN0eCwgZncsIGZpbHRlcnMpCgkJaWYgZXJyICE9IG5pbCB7CgkJCXJldHVybiBuaWwsIGVycgoJCX0KCgkJaWYgbGVuKHRhcmdldHMpID09IDAgewoJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJubyBub2RlcyB3ZXJlIGRpc2NvdmVyZWQiKQoJCX0KCgkJaWYgcHJvZ3Jlc3MgewoJCQlmbXQuUHJpbnRmKCIlZFxuIiwgbGVuKHRhcmdldHMpKQoJCX0gZWxzZSB7CgkJCXIuY2xpZW50LmluZm9mKCJEaXNjb3ZlcmVkICVkIG5vZGVzIiwgbGVuKHRhcmdldHMpKQoJCX0KCX0KCglvcHRzIDo9IFtdcnBjY2xpZW50LlJlcXVlc3RPcHRpb257cnBjY2xpZW50LlRhcmdldHModGFyZ2V0cyl9CglvcHRzID0gYXBwZW5kKG9wdHMsIHIuY2xpZW50LmNsaWVudFJQQ09wdHMuLi4pCglpZiByLmNsaWVudC53b3JrZXJzID4gMCB7CgkJb3B0cyA9IGFwcGVuZChvcHRzLCBycGNjbGllbnQuV29ya2VycyhyLmNsaWVudC53b3JrZXJzKSkKCX0KCglpZiByLmNsaWVudC5leHByRmlsdGVyICE9ICIiIHsKCQlvcHRzID0gYXBwZW5kKG9wdHMsIHJwY2NsaWVudC5SZXBseUV4cHJGaWx0ZXIoci5jbGllbnQuZXhwckZpbHRlcikpCgl9CgoJci5jbGllbnQuVW5sb2NrKCkKCiAgICAgICAgaWYgcHJvZ3Jlc3MgewogICAgICAgIAlmbXQuUHJpbnRsbigpCiAgICAgICAgICAgICAgICByLmNvbmZpZ3VyZVByb2dyZXNzKGxlbih0YXJnZXRzKSkKICAgICAgICB9CgoJYWdlbnQsIGVyciA6PSBycGNjbGllbnQuTmV3KHIuY2xpZW50LmZ3LCByLmNsaWVudC5kZGwuTWV0YWRhdGEuTmFtZSwgcnBjY2xpZW50LkRETChyLmNsaWVudC5kZGwpKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiY291bGQgbm90IGNyZWF0ZSBjbGllbnQ6ICVzIiwgZXJyKQoJfQoKCWlmIHByb2dyZXNzIHsKCQlvcHRzID0gYXBwZW5kKG9wdHMsIHJwY2NsaWVudC5SZXBseUhhbmRsZXIoZnVuYyhwciBwcm90b2NvbC5SZXBseSwgcnBjciAqcnBjY2xpZW50LlJQQ1JlcGx5KSB7CgkJCXIucHJvZ3Jlc3MuSW5jcigpCgkJCWhhbmRsZXIocHIsIHJwY3IpCgkJfSkpCgl9IGVsc2UgewoJCW9wdHMgPSBhcHBlbmQob3B0cywgcnBjY2xpZW50LlJlcGx5SGFuZGxlcihoYW5kbGVyKSkKCX0KCglpZiAhcHJvZ3Jlc3MgewoJCXIuY2xpZW50LmluZm9mKCJJbnZva2luZyAlcyMlcyBhY3Rpb24gd2l0aCAlI3YiLCByLmNsaWVudC5kZGwuTWV0YWRhdGEuTmFtZSwgci5hY3Rpb24sIHIuYXJncykKCX0KCglyZXMsIGVyciA6PSBhZ2VudC5EbyhjdHgsIHIuYWN0aW9uLCByLmFyZ3MsIG9wdHMuLi4pCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJjb3VsZCBub3QgcGVyZm9ybSBkaXNhYmxlIHJlcXVlc3Q6ICVzIiwgZXJyKQoJfQoKICAgICAgICBpZiBwcm9ncmVzcyB7CiAgICAgICAgICAgICAgICB1aXByb2dyZXNzLlN0b3AoKQogICAgICAgICAgICAgICAgZm10LlByaW50bG4oKQogICAgICAgIH0KCglyZXR1cm4gcmVzLlN0YXRzKCksIG5pbAp9CgpmdW5jIChyICpyZXF1ZXN0ZXIpIGNvbmZpZ3VyZVByb2dyZXNzKGNvdW50IGludCkgewogICAgICAgIGlmICFyLmNsaWVudC5jbGllbnRPcHRzLnByb2dyZXNzIHsKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KCiAgICAgICAgci5wcm9ncmVzcyA9IHVpcHJvZ3Jlc3MuQWRkQmFyKGNvdW50KS5BcHBlbmRDb21wbGV0ZWQoKS5QcmVwZW5kRWxhcHNlZCgpCiAgICAgICAgci5wcm9ncmVzcy5QcmVwZW5kRnVuYyhmdW5jKGIgKnVpcHJvZ3Jlc3MuQmFyKSBzdHJpbmcgewogICAgICAgICAgICAgICAgaWYgYi5DdXJyZW50KCkgPCBjb3VudCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLmNsaWVudC5mdy5Db2xvcml6ZSgicmVkIiwiJWQgLyAlZCIsIGIuQ3VycmVudCgpLCBjb3VudCkKICAgICAgICAgICAgICAgIH0KCgkJcmV0dXJuIHIuY2xpZW50LmZ3LkNvbG9yaXplKCJncmVlbiIsICIlZCAvICVkIiwgYi5DdXJyZW50KCksIGNvdW50KQogICAgICAgIH0pCgogICAgICAgIHVpcHJvZ3Jlc3MuU3RhcnQoKQp9Cg==",
	"resultdetails": "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJInRpbWUiCgoJImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9wcm92aWRlcnMvYWdlbnQvbWNvcnBjIgopCgovLyBSZXN1bHREZXRhaWxzIGlzIHRoZSBkZXRhaWxzIGFib3V0IGEgcmVzdWx0CnR5cGUgUmVzdWx0RGV0YWlscyBzdHJ1Y3QgewoJc2VuZGVyICBzdHJpbmcKCWNvZGUgICAgaW50CgltZXNzYWdlIHN0cmluZwoJdHMgICAgICB0aW1lLlRpbWUKfQoKLy8gU3RhdHVzQ29kZSBpcyBhIHJlcGx5IHN0YXR1cyBhcyBkZWZpbmVkIGJ5IE1Db2xsZWN0aXZlIFNpbXBsZVJQQyAtIGludGVnZXJzIDAgdG8gNQovLwovLyBTZWUgdGhlIGNvbnN0YW50cyBPSywgUlBDQWJvcnRlZCwgVW5rbm93blJQQ0FjdGlvbiwgTWlzc2luZ1JQQ0RhdGEsIEludmFsaWRSUENEYXRhIGFuZCBVbmtub3duUlBDRXJyb3IKdHlwZSBTdGF0dXNDb2RlIHVpbnQ4Cgpjb25zdCAoCgkvLyBPSyBpcyB0aGUgcmVwbHkgc3RhdHVzIHdoZW4gYWxsIHdvcmtlZAoJT0sgPSBTdGF0dXNDb2RlKGlvdGEpCgoJLy8gQWJvcnRlZCBpcyBzdGF0dXMgZm9yIHdoZW4gdGhlIGFjdGlvbiBjb3VsZCBub3QgcnVuLCBtb3N0IGZhaWx1cmVzIGluIGFuIGFjdGlvbiBzaG91bGQgc2V0IHRoaXMKCUFib3J0ZWQKCgkvLyBVbmtub3duQWN0aW9uIGlzIHRoZSBzdGF0dXMgZm9yIHVua25vd24gYWN0aW9ucyByZXF1ZXN0ZWQKCVVua25vd25BY3Rpb24KCgkvLyBNaXNzaW5nRGF0YSBpcyB0aGUgc3RhdHVzIGZvciBtaXNzaW5nIGlucHV0IGRhdGEKCU1pc3NpbmdEYXRhCgoJLy8gSW52YWxpZERhdGEgaXMgdGhlIHN0YXR1cyBmb3IgaW52YWxpZCBpbnB1dCBkYXRhCglJbnZhbGlkRGF0YQoKCS8vIFVua25vd25FcnJvciBpcyB0aGUgc3RhdHVzIGdlbmVyYWwgZmFpbHVyZXMgaW4gYWdlbnRzIHNob3VsZCBzZXQgd2hlbiB0aGluZ3MgZ28gYmFkCglVbmtub3duRXJyb3IKKQoKLy8gU2VuZGVyIGlzIHRoZSBpZGVudGl0eSBvZiB0aGUgcmVtb3RlIHRoYXQgcHJvZHVjZWQgdGhlIG1lc3NhZ2UKZnVuYyAoZCAqUmVzdWx0RGV0YWlscykgU2VuZGVyKCkgc3RyaW5nIHsKCXJldHVybiBkLnNlbmRlcgp9CgovLyBPSyBkZXRlcm1pbmVzIGlmIHRoZSByZXF1ZXN0IHdhcyBzdWNjZXNzZnVsCmZ1bmMgKGQgKlJlc3VsdERldGFpbHMpIE9LKCkgYm9vbCB7CglyZXR1cm4gbWNvcnBjLlN0YXR1c0NvZGUoZC5jb2RlKSA9PSBtY29ycGMuT0sKfQoKLy8gU3RhdHVzTWVzc2FnZSBpcyB0aGUgc3RhdHVzIG1lc3NhZ2UgcHJvZHVjZWQgYnkgdGhlIHJlbW90ZQpmdW5jIChkICpSZXN1bHREZXRhaWxzKSBTdGF0dXNNZXNzYWdlKCkgc3RyaW5nIHsKCXJldHVybiBkLm1lc3NhZ2UKfQoKLy8gU3RhdHVzQ29kZSBpcyB0aGUgc3RhdHVzIGNvZGUgcHJvZHVjZWQgYnkgdGhlIHJlbW90ZQpmdW5jIChkICpSZXN1bHREZXRhaWxzKSBTdGF0dXNDb2RlKCkgU3RhdHVzQ29kZSB7CglyZXR1cm4gU3RhdHVzQ29kZShkLmNvZGUpCn0K",
	"rpcoptions":    "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJInRpbWUiCgoJY29yZWNsaWVudCAiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL2NsaWVudC9jbGllbnQiCglycGNjbGllbnQgImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9wcm92aWRlcnMvYWdlbnQvbWNvcnBjL2NsaWVudCIKKQoKLy8gT3B0aW9uUmVzZXQgcmVzZXRzIHRoZSBjbGllbnQgb3B0aW9ucyB0byB1c2UgYWNyb3NzIHJlcXVlc3RzIHRvIGFuIGVtcHR5IGxpc3QKZnVuYyAocCAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSBPcHRpb25SZXNldCgpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglwLmNsaWVudFJQQ09wdHMgPSBbXXJwY2NsaWVudC5SZXF1ZXN0T3B0aW9ue30KCXAubnMgPSBwLmNsaWVudE9wdHMubnMKCXAudGFyZ2V0cyA9IFtdc3RyaW5ne30KCXAuZmlsdGVycyA9IFtdRmlsdGVyRnVuY3sKCSAgICBGaWx0ZXJGdW5jKGNvcmVjbGllbnQuQWdlbnRGaWx0ZXIoInt7IC5EREwuTWV0YWRhdGEuTmFtZSB9fSIpKSwKCX0KCglyZXR1cm4gcAp9CgovLyBPcHRpb25JZGVudGl0eUZpbHRlciBhZGRzIGFuIGlkZW50aXR5IGZpbHRlcgpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbklkZW50aXR5RmlsdGVyKGYgLi4uc3RyaW5nKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJZm9yIF8sIGkgOj0gcmFuZ2UgZiB7CgkJcC5maWx0ZXJzID0gYXBwZW5kKHAuZmlsdGVycywgRmlsdGVyRnVuYyhjb3JlY2xpZW50LklkZW50aXR5RmlsdGVyKGkpKSkKCX0KCglwLm5zLlJlc2V0KCkKCglyZXR1cm4gcAp9CgovLyBPcHRpb25DbGFzc0ZpbHRlciBhZGRzIGEgY2xhc3MgZmlsdGVyCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uQ2xhc3NGaWx0ZXIoZiAuLi5zdHJpbmcpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglmb3IgXywgaSA6PSByYW5nZSBmIHsKCQlwLmZpbHRlcnMgPSBhcHBlbmQocC5maWx0ZXJzLCBGaWx0ZXJGdW5jKGNvcmVjbGllbnQuQ2xhc3NGaWx0ZXIoaSkpKQoJfQoKCXAubnMuUmVzZXQoKQoKCXJldHVybiBwCn0KCi8vIE9wdGlvbkZhY3RGaWx0ZXIgYWRkcyBhIGZhY3QgZmlsdGVyCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uRmFjdEZpbHRlcihmIC4uLnN0cmluZykgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCWZvciBfLCBpIDo9IHJhbmdlIGYgewoJCXAuZmlsdGVycyA9IGFwcGVuZChwLmZpbHRlcnMsIEZpbHRlckZ1bmMoY29yZWNsaWVudC5GYWN0RmlsdGVyKGkpKSkKCX0KCglwLm5zLlJlc2V0KCkKCglyZXR1cm4gcAp9CgovLyBPcHRpb25BZ2VudEZpbHRlciBhZGRzIGFuIGFnZW50IGZpbHRlcgpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbkFnZW50RmlsdGVyKGEgLi4uc3RyaW5nKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJZm9yIF8sIGYgOj0gcmFuZ2UgYSB7CgkJcC5maWx0ZXJzID0gYXBwZW5kKHAuZmlsdGVycywgRmlsdGVyRnVuYyhjb3JlY2xpZW50LkFnZW50RmlsdGVyKGYpKSkKCX0KCglwLm5zLlJlc2V0KCkKCglyZXR1cm4gcAp9CgovLyBPcHRpb25Db21iaW5lZEZpbHRlciBhZGRzIGEgY29tYmluZWQgZmlsdGVyCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uQ29tYmluZWRGaWx0ZXIoZiAuLi5zdHJpbmcpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglmb3IgXywgaSA6PSByYW5nZSBmIHsKCQlwLmZpbHRlcnMgPSBhcHBlbmQocC5maWx0ZXJzLCBGaWx0ZXJGdW5jKGNvcmVjbGllbnQuQ29tYmluZWRGaWx0ZXIoaSkpKQoJfQoKCXAubnMuUmVzZXQoKQoKCXJldHVybiBwCn0KCi8vIE9wdGlvbkNvbXBvdW5kRmlsdGVyIGFkZHMgYSBjb21wb3VuZCBmaWx0ZXIKZnVuYyAocCAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSBPcHRpb25Db21wb3VuZEZpbHRlcihmIC4uLnN0cmluZykgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCWZvciBfLCBpIDo9IHJhbmdlIGYgewoJCXAuZmlsdGVycyA9IGFwcGVuZChwLmZpbHRlcnMsIEZpbHRlckZ1bmMoY29yZWNsaWVudC5Db21wb3VuZEZpbHRlcihpKSkpCgl9CgoJcC5ucy5SZXNldCgpCgoJcmV0dXJuIHAKfQoKLy8gT3B0aW9uQ29sbGVjdGl2ZSBzZXRzIHRoZSBjb2xsZWN0aXZlIHRvIHRhcmdldApmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbkNvbGxlY3RpdmUoYyBzdHJpbmcpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglwLmNsaWVudFJQQ09wdHMgPSBhcHBlbmQocC5jbGllbnRSUENPcHRzLCBycGNjbGllbnQuQ29sbGVjdGl2ZShjKSkKCXJldHVybiBwCn0KCi8vIE9wdGlvbkluQmF0Y2hlcyBwZXJmb3JtcyByZXF1ZXN0cyBpbiBiYXRjaGVzCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uSW5CYXRjaGVzKHNpemUgaW50LCBzbGVlcCBpbnQpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglwLmNsaWVudFJQQ09wdHMgPSBhcHBlbmQocC5jbGllbnRSUENPcHRzLCBycGNjbGllbnQuSW5CYXRjaGVzKHNpemUsIHNsZWVwKSkKCXJldHVybiBwCn0KCi8vIE9wdGlvbkRpc2NvdmVyeVRpbWVvdXQgY29uZmlndXJlcyB0aGUgcmVxdWVzdCBkaXNjb3ZlcnkgdGltZW91dCwgZGVmYXVsdHMgdG8gY29uZmlndXJlZCBkaXNjb3ZlcnkgdGltZW91dApmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbkRpc2NvdmVyeVRpbWVvdXQodCB0aW1lLkR1cmF0aW9uKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJcC5jbGllbnRSUENPcHRzID0gYXBwZW5kKHAuY2xpZW50UlBDT3B0cywgcnBjY2xpZW50LkRpc2NvdmVyeVRpbWVvdXQodCkpCglyZXR1cm4gcAp9CgovLyBPcHRpb25MaW1pdE1ldGhvZCBjb25maWd1cmVzIHRoZSBtZXRob2QgdG8gdXNlIHdoZW4gbGltaXRpbmcgdGFyZ2V0cyAtICJyYW5kb20iIG9yICJmaXJzdCIKZnVuYyAocCAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSBPcHRpb25MaW1pdE1ldGhvZChtIHN0cmluZykgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCXAuY2xpZW50UlBDT3B0cyA9IGFwcGVuZChwLmNsaWVudFJQQ09wdHMsIHJwY2NsaWVudC5MaW1pdE1ldGhvZChtKSkKCXJldHVybiBwCn0KCi8vIE9wdGlvbkxpbWl0U2l6ZSBzZXRzIGxpbWl0cyBvbiB0aGUgdGFyZ2V0cywgZWl0aGVyIGEgbnVtYmVyIG9mIGEgcGVyY2VudGFnZSBsaWtlICIxMCUiCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uTGltaXRTaXplKHMgc3RyaW5nKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJcC5jbGllbnRSUENPcHRzID0gYXBwZW5kKHAuY2xpZW50UlBDT3B0cywgcnBjY2xpZW50LkxpbWl0U2l6ZShzKSkKCXJldHVybiBwCn0KCi8vIE9wdGlvbkxpbWl0U2VlZCBzZXRzIHRoZSByYW5kb20gc2VlZCB1c2VkIHRvIHNlbGVjdCB0YXJnZXRzIHdoZW4gbGltaXRpbmcgYW5kIGxpbWl0IG1ldGhvZCBpcyAicmFuZG9tIgpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbkxpbWl0U2VlZChzIGludDY0KSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJcC5jbGllbnRSUENPcHRzID0gYXBwZW5kKHAuY2xpZW50UlBDT3B0cywgcnBjY2xpZW50LkxpbWl0U2VlZChzKSkKCXJldHVybiBwCn0KCi8vIE9wdGlvblRhcmdldHMgc2V0cyBzcGVjaWZpYyBub2RlIHRhcmdldHMgd2hpY2ggd291bGQgYXZvaWQgZGlzY292ZXJ5IGZvciBhbGwgYWN0aW9uIGNhbGxzIHVudGlsIHJlc2V0CmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uVGFyZ2V0cyh0IFtdc3RyaW5nKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJcC50YXJnZXRzID0gdAoJcmV0dXJuIHAKfQoKLy8gT3B0aW9uV29ya2VycyBzZXRzIGhvdyBtYW55IHdvcmtlciBjb25uZWN0aW9ucyBzaG91bGQgYmUgc3RhcnRlZCB0byB0aGUgYnJva2VyCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uV29ya2Vycyh3IGludCkgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCXAud29ya2VycyA9IHcKCXJldHVybiBwCn0KCi8vIE9wdGlvbkV4cHJGaWx0ZXIgc2V0cyBhIGZpbHRlciBleHByZXNzaW9uIHRoYXQgd2lsbCByZW1vdmUgcmVzdWx0cyBmcm9tIHRoZSByZXN1bHQgc2V0CmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uRXhwckZpbHRlcihmIHN0cmluZykgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCXAuZXhwckZpbHRlciA9IGYKCXJldHVybiBwCn0K",
}
