package client

var templates = map[string]string{
	"action":        "e3sgR2VuZXJhdGVkV2FybmluZyB9fQoKcGFja2FnZSB7eyAuUGFja2FnZSB9fQoKaW1wb3J0ICgKCSJjb250ZXh0IgoJImVuY29kaW5nL2pzb24iCgkiZm10IgoJInN5bmMiCgkiaW8iCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL3Byb3RvY29sIgoJcnBjY2xpZW50ICJnaXRodWIuY29tL2Nob3JpYS1pby9nby1jaG9yaWEvcHJvdmlkZXJzL2FnZW50L21jb3JwYy9jbGllbnQiCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL3Byb3ZpZGVycy9hZ2VudC9tY29ycGMvcmVwbHlmbXQiCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL3Byb3ZpZGVycy9hZ2VudC9tY29ycGMvZGRsL2FnZW50IgopCgovLyB7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fVJlcXVlc3RlciBwZXJmb3JtcyBhIFJQQyByZXF1ZXN0IHRvIHt7IC5BZ2VudE5hbWUgfCBUb0xvd2VyIH19I3t7IC5BY3Rpb25OYW1lIHwgVG9Mb3dlciB9fQp0eXBlIHt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19UmVxdWVzdGVyIHN0cnVjdCB7CglyICAgICpyZXF1ZXN0ZXIKCW91dGMgY2hhbiAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQKfQoKLy8ge3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQgaXMgdGhlIG91dHB1dCBmcm9tIHRoZSB7eyAuQWN0aW9uTmFtZSB8IFRvTG93ZXIgfX0gYWN0aW9uCnR5cGUge3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQgc3RydWN0IHsKCWRldGFpbHMgKlJlc3VsdERldGFpbHMKCXJlcGx5ICAgbWFwW3N0cmluZ11pbnRlcmZhY2V7fQp9CgovLyB7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fVJlc3VsdCBpcyB0aGUgcmVzdWx0IGZyb20gYSB7eyAuQWN0aW9uTmFtZSB8IFRvTG93ZXIgfX0gYWN0aW9uCnR5cGUge3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXN1bHQgc3RydWN0IHsKCWRkbCAqYWdlbnQuRERMCglzdGF0cyAgICpycGNjbGllbnQuU3RhdHMKCW91dHB1dHMgW10qe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQKCXJwY3JlcGxpZXMgW10qcmVwbHlmbXQuUlBDUmVwbHkKCW11IHN5bmMuTXV0ZXgKfQoKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXN1bHQpIFJlbmRlclJlc3VsdHModyBpby5Xcml0ZXIsIGZvcm1hdCBSZW5kZXJGb3JtYXQsIGRpc3BsYXlNb2RlIERpc3BsYXlNb2RlLCB2ZXJib3NlIGJvb2wsIHNpbGVudCBib29sLCBjb2xvcml6ZSBib29sLCBsb2cgTG9nKSBlcnJvciB7CglkLm11LkxvY2soKQoJZGVmZXIgZC5tdS5VbmxvY2soKQoKCWlmIGQuc3RhdHMgPT0gbmlsIHsKCQlyZXR1cm4gZm10LkVycm9yZigicmVzdWx0IHN0YXRzIGlzIG5vdCBzZXQsIHJlc3VsdCB3YXMgbm90IGNvbXBsZXRlZCIpCgl9CgoJcmVzdWx0cyA6PSAmcmVwbHlmbXQuUlBDUmVzdWx0c3sKCQlBZ2VudDogICBkLnN0YXRzLkFnZW50KCksCgkJQWN0aW9uOiAgZC5zdGF0cy5BY3Rpb24oKSwKCQlSZXBsaWVzOiBkLnJwY3JlcGxpZXMsCgkJU3RhdHM6ICAgZC5zdGF0cywKCX0KCglhZGRsLCBlcnIgOj0gZC5kZGwuQWN0aW9uSW50ZXJmYWNlKGQuc3RhdHMuQWN0aW9uKCkpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gZXJyCgl9CgoJc3dpdGNoIGZvcm1hdCB7CgljYXNlIEpTT05Gb3JtYXQ6CgkJcmV0dXJuIHJlc3VsdHMuUmVuZGVySlNPTih3LCBhZGRsKQoJY2FzZSBUYWJsZUZvcm1hdDoKCQlyZXR1cm4gcmVzdWx0cy5SZW5kZXJUYWJsZSh3LCBhZGRsKQoJY2FzZSBUWFRGb290ZXI6CgkJcmVzdWx0cy5SZW5kZXJUWFRGb290ZXIodywgdmVyYm9zZSkKCQlyZXR1cm4gbmlsCglkZWZhdWx0OgoJCXJldHVybiByZXN1bHRzLlJlbmRlclRYVCh3LCBhZGRsLCB2ZXJib3NlLCBzaWxlbnQsIHJlcGx5Zm10LkRpc3BsYXlNb2RlKGRpc3BsYXlNb2RlKSwgY29sb3JpemUsIGxvZykKCX0KfQoKLy8gU3RhdHMgaXMgdGhlIHJwYyByZXF1ZXN0IHN0YXRzCmZ1bmMgKGQgKnt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19UmVzdWx0KSBTdGF0cygpIFN0YXRzIHsKCXJldHVybiBkLnN0YXRzCn0KCi8vIFJlc3VsdERldGFpbHMgaXMgdGhlIGRldGFpbHMgYWJvdXQgdGhlIHJlcXVlc3QKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQpIFJlc3VsdERldGFpbHMoKSAqUmVzdWx0RGV0YWlscyB7CglyZXR1cm4gZC5kZXRhaWxzCn0KCi8vIEhhc2hNYXAgaXMgdGhlIHJhdyBvdXRwdXQgZGF0YQpmdW5jIChkICp7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fU91dHB1dCkgSGFzaE1hcCgpIG1hcFtzdHJpbmddaW50ZXJmYWNle30gewoJcmV0dXJuIGQucmVwbHkKfQoKLy8gSlNPTiBpcyB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgb3V0cHV0IGRhdGEKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQpIEpTT04oKSAoW11ieXRlLCBlcnJvcikgewoJcmV0dXJuIGpzb24uTWFyc2hhbChkLnJlcGx5KQp9CgovLyBQYXJzZU91dHB1dCBwYXJzZXMgdGhlIHJlc3VsdCB2YWx1ZSBmcm9tIHRoZSB7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fSBhY3Rpb24gaW50byB0YXJnZXQKZnVuYyAoZCAqe3sgJC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19T3V0cHV0KSBQYXJzZXt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19T3V0cHV0KHRhcmdldCBpbnRlcmZhY2V7fSkgZXJyb3IgewoJaiwgZXJyIDo9IGQuSlNPTigpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gZm10LkVycm9yZigiY291bGQgbm90IGFjY2VzcyBwYXlsb2FkOiAlcyIsIGVycikKCX0KCgllcnIgPSBqc29uLlVubWFyc2hhbChqLCB0YXJnZXQpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gZm10LkVycm9yZigiY291bGQgbm90IHVubWFyc2hhbCBKU09OIHBheWxvYWQ6ICVzIiwgZXJyKQoJfQoKCXJldHVybiBuaWwKfQoKLy8gRG8gcGVyZm9ybXMgdGhlIHJlcXVlc3QKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXF1ZXN0ZXIpIERvKGN0eCBjb250ZXh0LkNvbnRleHQpICgqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXN1bHQsIGVycm9yKSB7CglkcmVzIDo9ICZ7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fVJlc3VsdHtkZGw6IGQuci5jbGllbnQuZGRsfQoKCWhhbmRsZXIgOj0gZnVuYyhwciBwcm90b2NvbC5SZXBseSwgciAqcnBjY2xpZW50LlJQQ1JlcGx5KSB7CgkJb3V0cHV0IDo9ICZ7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fU91dHB1dHsKCQkJcmVwbHk6IG1ha2UobWFwW3N0cmluZ11pbnRlcmZhY2V7fSksCgkJCWRldGFpbHM6ICZSZXN1bHREZXRhaWxzewoJCQkJc2VuZGVyOiAgcHIuU2VuZGVySUQoKSwKCQkJCWNvZGU6ICAgIGludChyLlN0YXR1c2NvZGUpLAoJCQkJbWVzc2FnZTogci5TdGF0dXNtc2csCgkJCQl0czogICAgICBwci5UaW1lKCksCgkJCX0sCgkJfQoKCQllcnIgOj0ganNvbi5Vbm1hcnNoYWwoci5EYXRhLCAmb3V0cHV0LnJlcGx5KQoJCWlmIGVyciAhPSBuaWwgewoJCQlkLnIuY2xpZW50LmVycm9yZigiQ291bGQgbm90IGRlY29kZSByZXBseSBmcm9tICVzOiAlcyIsIHByLlNlbmRlcklEKCksIGVycikKCQl9CgoJCS8vIGNhbGxlciB3YW50cyBhIGNoYW5uZWwgc28gd2UgZG9udCByZXR1cm4gYSByZXN1bHNldCB0b28gKGxvdHMgb2YgbWVtb3J5IGV0YykKCQkvLyB0aGlzIGlzIHVudXNlZCBub3csIG5vIHN1cHBvcnQgZm9yIHNldHRpbmcgYSBjaGFubmVsCgkJaWYgZC5vdXRjICE9IG5pbCB7CgkJCWQub3V0YyA8LSBvdXRwdXQKCQkJcmV0dXJuCgkJfQoKCQkvLyBlbHNlIHByZXBhcmUgb3VyIHJlc3VsdCBzZXQKCQlkcmVzLm11LkxvY2soKQoJCWRyZXMub3V0cHV0cyA9IGFwcGVuZChkcmVzLm91dHB1dHMsIG91dHB1dCkKCQlkcmVzLnJwY3JlcGxpZXMgPSBhcHBlbmQoZHJlcy5ycGNyZXBsaWVzLCAmcmVwbHlmbXQuUlBDUmVwbHl7CgkJCVNlbmRlcjogICBwci5TZW5kZXJJRCgpLAoJCQlSUENSZXBseTogciwKCQl9KQoJCWRyZXMubXUuVW5sb2NrKCkKCX0KCglyZXMsIGVyciA6PSBkLnIuZG8oY3R4LCBoYW5kbGVyKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9CgoJZHJlcy5zdGF0cyA9IHJlcwoKCXJldHVybiBkcmVzLCBuaWwKfQoKLy8gRWFjaE91dHB1dCBpdGVyYXRlcyBvdmVyIGFsbCByZXN1bHRzIHJlY2VpdmVkCmZ1bmMgKGQgKnt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19UmVzdWx0KSBFYWNoT3V0cHV0KGggZnVuYyhyICp7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fU91dHB1dCkpIHsKCWZvciBfLCByZXNwIDo9IHJhbmdlIGQub3V0cHV0cyB7CgkJaChyZXNwKQoJfQp9Cgp7eyByYW5nZSAkbmFtZSwgJGlucHV0IDo9IC5PcHRpb25hbElucHV0cyB9fQovLyB7eyAkbmFtZSB8IFNuYWtlVG9DYW1lbCB9fSBpcyBhbiBvcHRpb25hbCBpbnB1dCB0byB0aGUge3sgJC5BY3Rpb25OYW1lIHwgVG9Mb3dlciB9fSBhY3Rpb24KLy8KLy8gRGVzY3JpcHRpb246IHt7ICRpbnB1dC5EZXNjcmlwdGlvbiB9fQpmdW5jIChkICp7eyAkLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXF1ZXN0ZXIpIHt7ICRuYW1lIHwgU25ha2VUb0NhbWVsIH19KHYge3sgQ2hvcmlhVHlwZVRvR29UeXBlICRpbnB1dC5UeXBlIH19KSAqe3sgJC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19UmVxdWVzdGVyIHsKCWQuci5hcmdzWyJ7eyAkbmFtZSB8IFRvTG93ZXIgfX0iXSA9IHYKCglyZXR1cm4gZAp9Cnt7IGVuZCB9fQp7eyByYW5nZSAkbmFtZSwgJG91dHB1dCA6PSAuT3V0cHV0cyB9fQovLyB7eyAkbmFtZSB8IFNuYWtlVG9DYW1lbCB9fSBpcyB0aGUgdmFsdWUgb2YgdGhlIHt7ICRuYW1lIH19IG91dHB1dAovLwovLyBEZXNjcmlwdGlvbjoge3sgJG91dHB1dC5EZXNjcmlwdGlvbiB9fQpmdW5jIChkICp7eyAkLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQpIHt7ICRuYW1lIHwgU25ha2VUb0NhbWVsIH19KCkge3sgQ2hvcmlhVHlwZVRvR29UeXBlICRvdXRwdXQuVHlwZSB9fSB7Cgl2YWwgOj0gZC5yZXBseVsie3sgJG5hbWUgfX0iXQoJcmV0dXJuIHt7IENob3JpYVR5cGVUb1ZhbE9mVHlwZSAkb3V0cHV0LlR5cGUgfX0KfQp7eyBlbmQgfX0K",
	"client":        "",
	"ddl":           "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJImVuY29kaW5nL2Jhc2U2NCIKCSJlbmNvZGluZy9qc29uIgoKCSJnaXRodWIuY29tL2Nob3JpYS1pby9nby1jaG9yaWEvcHJvdmlkZXJzL2FnZW50L21jb3JwYy9kZGwvYWdlbnQiCikKCgp2YXIgcmF3RERMID0gInt7IC5SYXdEREwgfCBCYXNlNjRFbmNvZGUgfX0iCgovLyBERExCeXRlcyBpcyB0aGUgcmF3IEpTT04gZW5jb2RlZCBEREwgZmlsZSBmb3IgdGhlIGFnZW50CmZ1bmMgRERMQnl0ZXMoKSAoW11ieXRlLCBlcnJvcikgewoJcmV0dXJuIGJhc2U2NC5TdGRFbmNvZGluZy5EZWNvZGVTdHJpbmcocmF3RERMKQp9CgovLyBEREwgaXMgYSBwYXJzZWQgYW5kIGxvYWRlZCBEREwgZm9yIHRoZSBhZ2VudApmdW5jIERETCgpICgqYWdlbnQuRERMLCBlcnJvcikgewoJZGRsaiwgZXJyIDo9IERETEJ5dGVzKCkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoKCWRkbCA6PSAmYWdlbnQuRERMe30KCWVyciA9IGpzb24uVW5tYXJzaGFsKGRkbGosIGRkbCkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoKCXJldHVybiBkZGwsIG5pbAp9Cg==",
	"discover":      "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJImNvbnRleHQiCgkic3luYyIKCSJ0aW1lIgoKCSJnaXRodWIuY29tL2Nob3JpYS1pby9nby1jaG9yaWEvY2xpZW50L2Rpc2NvdmVyeS9icm9hZGNhc3QiCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL2NsaWVudC9kaXNjb3ZlcnkvcHVwcGV0ZGIiCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL3Byb3RvY29sIgopCgovLyBCcm9hZGNhc3ROUyBpcyBhIE5vZGVTb3VyY2UgdGhhdCB1c2VzIHRoZSBDaG9yaWEgbmV0d29yayBicm9hZGNhc3QgbWV0aG9kIHRvIGRpc2NvdmVyIG5vZGVzCnR5cGUgQnJvYWRjYXN0TlMgc3RydWN0IHsKCW5vZGVDYWNoZSBbXXN0cmluZwoJZiAgICAgICAgICpwcm90b2NvbC5GaWx0ZXIKCglzeW5jLk11dGV4Cn0KCi8vIFJlc2V0IHJlc2V0cyB0aGUgaW50ZXJuYWwgbm9kZSBjYWNoZQpmdW5jIChiICpCcm9hZGNhc3ROUykgUmVzZXQoKSB7CgliLkxvY2soKQoJZGVmZXIgYi5VbmxvY2soKQoKCWIubm9kZUNhY2hlID0gW11zdHJpbmd7fQp9CgovLyBEaXNjb3ZlciBwZXJmb3JtcyB0aGUgZGlzY292ZXJ5IG9mIG5vZGVzIGFnYWluc3QgdGhlIENob3JpYSBOZXR3b3JrCmZ1bmMgKGIgKkJyb2FkY2FzdE5TKSBEaXNjb3ZlcihjdHggY29udGV4dC5Db250ZXh0LCBmdyBDaG9yaWFGcmFtZXdvcmssIGZpbHRlcnMgW11GaWx0ZXJGdW5jKSAoW11zdHJpbmcsIGVycm9yKSB7CgliLkxvY2soKQoJZGVmZXIgYi5VbmxvY2soKQoKCWNvcGllciA6PSBmdW5jKCkgW11zdHJpbmcgewoJCW91dCA6PSBtYWtlKFtdc3RyaW5nLCBsZW4oYi5ub2RlQ2FjaGUpKQoJCWZvciBpLCBuIDo9IHJhbmdlIGIubm9kZUNhY2hlIHsKCQkJb3V0W2ldID0gbgoJCX0KCgkJcmV0dXJuIG91dAoJfQoKCWlmICEoYi5ub2RlQ2FjaGUgPT0gbmlsIHx8IGxlbihiLm5vZGVDYWNoZSkgPT0gMCkgewoJCXJldHVybiBjb3BpZXIoKSwgbmlsCgl9CgoJZXJyIDo9IGIucGFyc2VGaWx0ZXJzKGZpbHRlcnMpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCglpZiBiLm5vZGVDYWNoZSA9PSBuaWwgewoJCWIubm9kZUNhY2hlID0gW11zdHJpbmd7fQoJfQoKCWNmZyA6PSBmdy5Db25maWd1cmF0aW9uKCkKCW5vZGVzLCBlcnIgOj0gYnJvYWRjYXN0Lk5ldyhmdykuRGlzY292ZXIoY3R4LCBicm9hZGNhc3QuRmlsdGVyKGIuZiksIGJyb2FkY2FzdC5UaW1lb3V0KHRpbWUuU2Vjb25kKnRpbWUuRHVyYXRpb24oY2ZnLkRpc2NvdmVyeVRpbWVvdXQpKSkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBbXXN0cmluZ3t9LCBlcnIKCX0KCgliLm5vZGVDYWNoZSA9IG5vZGVzCgoJcmV0dXJuIGNvcGllcigpLCBuaWwKfQoKCmZ1bmMgKHAgKkJyb2FkY2FzdE5TKSBwYXJzZUZpbHRlcnMoZnMgW11GaWx0ZXJGdW5jKSBlcnJvciB7CglwLmYgPSBwcm90b2NvbC5OZXdGaWx0ZXIoKQoKCWZvciBfLCBmIDo9IHJhbmdlIGZzIHsKCQllcnIgOj0gZihwLmYpCgkJaWYgZXJyICE9IG5pbCB7CgkJCXJldHVybiBlcnIKCQl9Cgl9CgoJcmV0dXJuIG5pbAp9CgovLyBQdXBwZXREQk5TIGlzIGEgTm9kZVNvdXJjZSB0aGF0IHVzZXMgdGhlIFB1cHBldERCIFBRTCBRdWVyaWVzIHRvIGRpc2NvdmVyIG5vZGVzCnR5cGUgUHVwcGV0REJOUyBzdHJ1Y3QgewoJbm9kZUNhY2hlIFtdc3RyaW5nCglmICAgICAgICAgKnByb3RvY29sLkZpbHRlcgoKCXN5bmMuTXV0ZXgKfQoKLy8gUmVzZXQgcmVzZXRzIHRoZSBpbnRlcm5hbCBub2RlIGNhY2hlCmZ1bmMgKHAgKlB1cHBldERCTlMpIFJlc2V0KCkgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglwLm5vZGVDYWNoZSA9IFtdc3RyaW5ne30KfQoKLy8gRGlzY292ZXIgcGVyZm9ybXMgdGhlIGRpc2NvdmVyeSBvZiBub2RlcyBhZ2FpbnN0IHRoZSBDaG9yaWEgTmV0d29yawpmdW5jIChwICpQdXBwZXREQk5TKSBEaXNjb3ZlcihjdHggY29udGV4dC5Db250ZXh0LCBmdyBDaG9yaWFGcmFtZXdvcmssIGZpbHRlcnMgW11GaWx0ZXJGdW5jKSAoW11zdHJpbmcsIGVycm9yKSB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCWNvcGllciA6PSBmdW5jKCkgW11zdHJpbmcgewoJCW91dCA6PSBtYWtlKFtdc3RyaW5nLCBsZW4ocC5ub2RlQ2FjaGUpKQoJCWZvciBpLCBuIDo9IHJhbmdlIHAubm9kZUNhY2hlIHsKCQkJb3V0W2ldID0gbgoJCX0KCgkJcmV0dXJuIG91dAoJfQoKCWlmICEocC5ub2RlQ2FjaGUgPT0gbmlsIHx8IGxlbihwLm5vZGVDYWNoZSkgPT0gMCkgewoJCXJldHVybiBjb3BpZXIoKSwgbmlsCgl9CgoJZXJyIDo9IHAucGFyc2VGaWx0ZXJzKGZpbHRlcnMpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCglpZiBwLm5vZGVDYWNoZSA9PSBuaWwgewoJCXAubm9kZUNhY2hlID0gW11zdHJpbmd7fQoJfQoKCWNmZyA6PSBmdy5Db25maWd1cmF0aW9uKCkKCW5vZGVzLCBlcnIgOj0gcHVwcGV0ZGIuTmV3KGZ3KS5EaXNjb3ZlcihjdHgsIHB1cHBldGRiLkZpbHRlcihwLmYpLCBwdXBwZXRkYi5UaW1lb3V0KHRpbWUuU2Vjb25kKnRpbWUuRHVyYXRpb24oY2ZnLkRpc2NvdmVyeVRpbWVvdXQpKSkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBbXXN0cmluZ3t9LCBlcnIKCX0KCglwLm5vZGVDYWNoZSA9IG5vZGVzCgoJcmV0dXJuIGNvcGllcigpLCBuaWwKfQoKZnVuYyAocCAqUHVwcGV0REJOUykgcGFyc2VGaWx0ZXJzKGZzIFtdRmlsdGVyRnVuYykgZXJyb3IgewoJcC5mID0gcHJvdG9jb2wuTmV3RmlsdGVyKCkKCglmb3IgXywgZiA6PSByYW5nZSBmcyB7CgkJZXJyIDo9IGYocC5mKQoJCWlmIGVyciAhPSBuaWwgewoJCQlyZXR1cm4gZXJyCgkJfQoJfQoKCXJldHVybiBuaWwKfQo=",
	"doc":           "e3sgR2VuZXJhdGVkV2FybmluZyB9fQoKLy8gUGFja2FnZSB7eyAuUGFja2FnZSB9fSBpcyBhbiBBUEkgY2xpZW50IHRvIHRoZSBDaG9yaWEge3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgQ2FwaXRhbGl6ZSB9fSBhZ2VudCBWZXJzaW9uIHt7IC5EREwuTWV0YWRhdGEuVmVyc2lvbiB9fS4KLy8KLy8gQWN0aW9uczoKe3stIHJhbmdlICRpLCAkYWN0aW9uIDo9IC5EREwuQWN0aW9ucyB9fQovLyAgICoge3sgJGFjdGlvbi5OYW1lIHwgU25ha2VUb0NhbWVsIH19IC0ge3sgJGFjdGlvbi5EZXNjcmlwdGlvbiAtfX0Ke3sgZW5kIH19CnBhY2thZ2Uge3sgLlBhY2thZ2UgfX0KCg==",
	"initoptions":   "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJImdpdGh1Yi5jb20vc2lydXBzZW4vbG9ncnVzIgopCgp0eXBlIGluaXRPcHRpb25zIHN0cnVjdCB7CgljZmdGaWxlIHN0cmluZwoJbG9nZ2VyICAqbG9ncnVzLkVudHJ5CglucyBOb2RlU291cmNlCglwcm9ncmVzcyBib29sCn0KCi8vIEluaXRpYWxpemF0aW9uT3B0aW9uIGlzIGFuIG9wdGlvbmFsIHNldHRpbmcgdXNlZCB0byBpbml0aWFsaXplIHRoZSBjbGllbnQKdHlwZSBJbml0aWFsaXphdGlvbk9wdGlvbiBmdW5jKG9wdHMgKmluaXRPcHRpb25zKQoKLy8gQ29uZmlnRmlsZSBzZXRzIHRoZSBjb25maWcgZmlsZSB0byB1c2UsIHdoZW4gbm90IHNldCB3aWxsIHVzZSB0aGUgdXNlciBkZWZhdWx0CmZ1bmMgQ29uZmlnRmlsZShmIHN0cmluZykgSW5pdGlhbGl6YXRpb25PcHRpb24gewoJcmV0dXJuIGZ1bmMobyAqaW5pdE9wdGlvbnMpIHsKCQlvLmNmZ0ZpbGUgPSBmCgl9Cn0KCi8vIExvZ2dlciBzZXRzIHRoZSBsb2dnZXIgdG8gdXNlIGVsc2Ugb25lIGlzIG1hZGUgdmlhIHRoZSBDaG9yaWEgZnJhbWV3b3JrCmZ1bmMgTG9nZ2VyKGwgKmxvZ3J1cy5FbnRyeSkgSW5pdGlhbGl6YXRpb25PcHRpb24gewoJcmV0dXJuIGZ1bmMobyAqaW5pdE9wdGlvbnMpIHsKCQlvLmxvZ2dlciA9IGwKCX0KfQoKLy8gRGlzY292ZXJ5IHNldHMgdGhlIE5vZGVTb3VyY2UgdG8gdXNlIHdoZW4gZmluZGluZyBub2RlcyB0byBtYW5hZ2UKZnVuYyBEaXNjb3ZlcnkobnMgTm9kZVNvdXJjZSkgSW5pdGlhbGl6YXRpb25PcHRpb24gewoJcmV0dXJuIGZ1bmMobyAqaW5pdE9wdGlvbnMpIHsKCQlvLm5zID0gbnMKCX0KfQoKLy8gUHJvZ3Jlc3MgZW5hYmxlcyBkaXNwbGF5aW5nIGEgcHJvZ3Jlc3MgYmFyCmZ1bmMgUHJvZ3Jlc3MoKSBJbml0aWFsaXphdGlvbk9wdGlvbiB7CglyZXR1cm4gZnVuYyhvICppbml0T3B0aW9ucykgewoJCW8ucHJvZ3Jlc3MgPSB0cnVlCgl9Cn0K",
	"logging":       "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgpmdW5jIChjICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIGluZm9mKG1zZyBzdHJpbmcsIGEgLi4uaW50ZXJmYWNle30pIHsKCWMuY2xpZW50T3B0cy5sb2dnZXIuSW5mb2YobXNnLCBhLi4uKQp9CgpmdW5jIChjICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIGVycm9yZihtc2cgc3RyaW5nLCBhIC4uLmludGVyZmFjZXt9KSB7CgljLmNsaWVudE9wdHMubG9nZ2VyLkVycm9yZihtc2csIGEuLi4pCn0K",
	"requester":     "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJImNvbnRleHQiCgkiZm10IgoKCSJnaXRodWIuY29tL2Nob3JpYS1pby9nby1jaG9yaWEvcHJvdG9jb2wiCglycGNjbGllbnQgImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9wcm92aWRlcnMvYWdlbnQvbWNvcnBjL2NsaWVudCIKCSJnaXRodWIuY29tL2dvc3VyaS91aXByb2dyZXNzIgopCgovLyByZXF1ZXN0ZXIgaXMgYSBnZW5lcmljIHJlcXVlc3QgaGFuZGxlcgp0eXBlIHJlcXVlc3RlciBzdHJ1Y3QgewoJY2xpZW50ICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQKCWFjdGlvbiBzdHJpbmcKCWFyZ3MgICBtYXBbc3RyaW5nXWludGVyZmFjZXt9Cglwcm9ncmVzcyAqdWlwcm9ncmVzcy5CYXIKfQoKLy8gZG8gcGVyZm9ybXMgdGhlIHJlcXVlc3QKZnVuYyAociAqcmVxdWVzdGVyKSBkbyhjdHggY29udGV4dC5Db250ZXh0LCBoYW5kbGVyIGZ1bmMocHIgcHJvdG9jb2wuUmVwbHksIHIgKnJwY2NsaWVudC5SUENSZXBseSkpICgqcnBjY2xpZW50LlN0YXRzLCBlcnJvcikgewoJdGFyZ2V0cyA6PSBtYWtlKFtdc3RyaW5nLCBsZW4oci5jbGllbnQudGFyZ2V0cykpCgl2YXIgZXJyIGVycm9yCgoJci5jbGllbnQuTG9jaygpCgljb3B5KHRhcmdldHMsIHIuY2xpZW50LnRhcmdldHMpCglkaXNjb3ZlcmVyIDo9IHIuY2xpZW50Lm5zCglmaWx0ZXJzIDo9IHIuY2xpZW50LmZpbHRlcnMKCWZ3IDo9IHIuY2xpZW50LmZ3Cglwcm9ncmVzcyA6PSByLmNsaWVudC5jbGllbnRPcHRzLnByb2dyZXNzCgoJaWYgbGVuKHRhcmdldHMpID09IDAgewoJCWlmIHByb2dyZXNzIHsKCQkJZm10LlByaW50KCJEaXNjb3ZlcmluZyBub2RlcyAuLi4uICIpCgkJfSBlbHNlIHsKCQkJci5jbGllbnQuaW5mb2YoIlN0YXJ0aW5nIGRpc2NvdmVyeSIpCgkJfQoKCQl0YXJnZXRzLCBlcnIgPSBkaXNjb3ZlcmVyLkRpc2NvdmVyKGN0eCwgZncsIGZpbHRlcnMpCgkJaWYgZXJyICE9IG5pbCB7CgkJCXJldHVybiBuaWwsIGVycgoJCX0KCgkJaWYgbGVuKHRhcmdldHMpID09IDAgewoJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJubyBub2RlcyB3ZXJlIGRpc2NvdmVyZWQiKQoJCX0KCgkJaWYgcHJvZ3Jlc3MgewoJCQlmbXQuUHJpbnRmKCIlZFxuIiwgbGVuKHRhcmdldHMpKQoJCX0gZWxzZSB7CgkJCXIuY2xpZW50LmluZm9mKCJEaXNjb3ZlcmVkICVkIG5vZGVzIiwgbGVuKHRhcmdldHMpKQoJCX0KCX0KCglvcHRzIDo9IFtdcnBjY2xpZW50LlJlcXVlc3RPcHRpb257cnBjY2xpZW50LlRhcmdldHModGFyZ2V0cyl9CglvcHRzID0gYXBwZW5kKG9wdHMsIHIuY2xpZW50LmNsaWVudFJQQ09wdHMuLi4pCglpZiByLmNsaWVudC53b3JrZXJzID4gMCB7CgkJb3B0cyA9IGFwcGVuZChvcHRzLCBycGNjbGllbnQuV29ya2VycyhyLmNsaWVudC53b3JrZXJzKSkKCX0KCXIuY2xpZW50LlVubG9jaygpCgogICAgICAgIGlmIHByb2dyZXNzIHsKICAgICAgICAJZm10LlByaW50bG4oKQogICAgICAgICAgICAgICAgci5jb25maWd1cmVQcm9ncmVzcyhsZW4odGFyZ2V0cykpCiAgICAgICAgfQoKCWFnZW50LCBlcnIgOj0gcnBjY2xpZW50Lk5ldyhyLmNsaWVudC5mdywgci5jbGllbnQuZGRsLk1ldGFkYXRhLk5hbWUsIHJwY2NsaWVudC5EREwoci5jbGllbnQuZGRsKSkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoImNvdWxkIG5vdCBjcmVhdGUgY2xpZW50OiAlcyIsIGVycikKCX0KCglpZiBwcm9ncmVzcyB7CgkJb3B0cyA9IGFwcGVuZChvcHRzLCBycGNjbGllbnQuUmVwbHlIYW5kbGVyKGZ1bmMocHIgcHJvdG9jb2wuUmVwbHksIHJwY3IgKnJwY2NsaWVudC5SUENSZXBseSkgewoJCQlyLnByb2dyZXNzLkluY3IoKQoJCQloYW5kbGVyKHByLCBycGNyKQoJCX0pKQoJfSBlbHNlIHsKCQlvcHRzID0gYXBwZW5kKG9wdHMsIHJwY2NsaWVudC5SZXBseUhhbmRsZXIoaGFuZGxlcikpCgl9CgoJaWYgIXByb2dyZXNzIHsKCQlyLmNsaWVudC5pbmZvZigiSW52b2tpbmcgJXMjJXMgYWN0aW9uIHdpdGggJSN2Iiwgci5jbGllbnQuZGRsLk1ldGFkYXRhLk5hbWUsIHIuYWN0aW9uLCByLmFyZ3MpCgl9CgoJcmVzLCBlcnIgOj0gYWdlbnQuRG8oY3R4LCByLmFjdGlvbiwgci5hcmdzLCBvcHRzLi4uKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiY291bGQgbm90IHBlcmZvcm0gZGlzYWJsZSByZXF1ZXN0OiAlcyIsIGVycikKCX0KCiAgICAgICAgaWYgcHJvZ3Jlc3MgewogICAgICAgICAgICAgICAgdWlwcm9ncmVzcy5TdG9wKCkKICAgICAgICAgICAgICAgIGZtdC5QcmludGxuKCkKICAgICAgICB9CgoJcmV0dXJuIHJlcy5TdGF0cygpLCBuaWwKfQoKZnVuYyAociAqcmVxdWVzdGVyKSBjb25maWd1cmVQcm9ncmVzcyhjb3VudCBpbnQpIHsKICAgICAgICBpZiAhci5jbGllbnQuY2xpZW50T3B0cy5wcm9ncmVzcyB7CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICB9CgogICAgICAgIHIucHJvZ3Jlc3MgPSB1aXByb2dyZXNzLkFkZEJhcihjb3VudCkuQXBwZW5kQ29tcGxldGVkKCkuUHJlcGVuZEVsYXBzZWQoKQogICAgICAgIHIucHJvZ3Jlc3MuUHJlcGVuZEZ1bmMoZnVuYyhiICp1aXByb2dyZXNzLkJhcikgc3RyaW5nIHsKICAgICAgICAgICAgICAgIGlmIGIuQ3VycmVudCgpIDwgY291bnQgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5jbGllbnQuZncuQ29sb3JpemUoInJlZCIsIiVkIC8gJWQiLCBiLkN1cnJlbnQoKSwgY291bnQpCiAgICAgICAgICAgICAgICB9CgoJCXJldHVybiByLmNsaWVudC5mdy5Db2xvcml6ZSgiZ3JlZW4iLCAiJWQgLyAlZCIsIGIuQ3VycmVudCgpLCBjb3VudCkKICAgICAgICB9KQoKICAgICAgICB1aXByb2dyZXNzLlN0YXJ0KCkKfQo=",
	"resultdetails": "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJInRpbWUiCgoJImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9wcm92aWRlcnMvYWdlbnQvbWNvcnBjIgopCgovLyBSZXN1bHREZXRhaWxzIGlzIHRoZSBkZXRhaWxzIGFib3V0IGEgcmVzdWx0CnR5cGUgUmVzdWx0RGV0YWlscyBzdHJ1Y3QgewoJc2VuZGVyICBzdHJpbmcKCWNvZGUgICAgaW50CgltZXNzYWdlIHN0cmluZwoJdHMgICAgICB0aW1lLlRpbWUKfQoKLy8gU3RhdHVzQ29kZSBpcyBhIHJlcGx5IHN0YXR1cyBhcyBkZWZpbmVkIGJ5IE1Db2xsZWN0aXZlIFNpbXBsZVJQQyAtIGludGVnZXJzIDAgdG8gNQovLwovLyBTZWUgdGhlIGNvbnN0YW50cyBPSywgUlBDQWJvcnRlZCwgVW5rbm93blJQQ0FjdGlvbiwgTWlzc2luZ1JQQ0RhdGEsIEludmFsaWRSUENEYXRhIGFuZCBVbmtub3duUlBDRXJyb3IKdHlwZSBTdGF0dXNDb2RlIHVpbnQ4Cgpjb25zdCAoCgkvLyBPSyBpcyB0aGUgcmVwbHkgc3RhdHVzIHdoZW4gYWxsIHdvcmtlZAoJT0sgPSBTdGF0dXNDb2RlKGlvdGEpCgoJLy8gQWJvcnRlZCBpcyBzdGF0dXMgZm9yIHdoZW4gdGhlIGFjdGlvbiBjb3VsZCBub3QgcnVuLCBtb3N0IGZhaWx1cmVzIGluIGFuIGFjdGlvbiBzaG91bGQgc2V0IHRoaXMKCUFib3J0ZWQKCgkvLyBVbmtub3duQWN0aW9uIGlzIHRoZSBzdGF0dXMgZm9yIHVua25vd24gYWN0aW9ucyByZXF1ZXN0ZWQKCVVua25vd25BY3Rpb24KCgkvLyBNaXNzaW5nRGF0YSBpcyB0aGUgc3RhdHVzIGZvciBtaXNzaW5nIGlucHV0IGRhdGEKCU1pc3NpbmdEYXRhCgoJLy8gSW52YWxpZERhdGEgaXMgdGhlIHN0YXR1cyBmb3IgaW52YWxpZCBpbnB1dCBkYXRhCglJbnZhbGlkRGF0YQoKCS8vIFVua25vd25FcnJvciBpcyB0aGUgc3RhdHVzIGdlbmVyYWwgZmFpbHVyZXMgaW4gYWdlbnRzIHNob3VsZCBzZXQgd2hlbiB0aGluZ3MgZ28gYmFkCglVbmtub3duRXJyb3IKKQoKLy8gU2VuZGVyIGlzIHRoZSBpZGVudGl0eSBvZiB0aGUgcmVtb3RlIHRoYXQgcHJvZHVjZWQgdGhlIG1lc3NhZ2UKZnVuYyAoZCAqUmVzdWx0RGV0YWlscykgU2VuZGVyKCkgc3RyaW5nIHsKCXJldHVybiBkLnNlbmRlcgp9CgovLyBPSyBkZXRlcm1pbmVzIGlmIHRoZSByZXF1ZXN0IHdhcyBzdWNjZXNzZnVsCmZ1bmMgKGQgKlJlc3VsdERldGFpbHMpIE9LKCkgYm9vbCB7CglyZXR1cm4gbWNvcnBjLlN0YXR1c0NvZGUoZC5jb2RlKSA9PSBtY29ycGMuT0sKfQoKLy8gU3RhdHVzTWVzc2FnZSBpcyB0aGUgc3RhdHVzIG1lc3NhZ2UgcHJvZHVjZWQgYnkgdGhlIHJlbW90ZQpmdW5jIChkICpSZXN1bHREZXRhaWxzKSBTdGF0dXNNZXNzYWdlKCkgc3RyaW5nIHsKCXJldHVybiBkLm1lc3NhZ2UKfQoKLy8gU3RhdHVzQ29kZSBpcyB0aGUgc3RhdHVzIGNvZGUgcHJvZHVjZWQgYnkgdGhlIHJlbW90ZQpmdW5jIChkICpSZXN1bHREZXRhaWxzKSBTdGF0dXNDb2RlKCkgU3RhdHVzQ29kZSB7CglyZXR1cm4gU3RhdHVzQ29kZShkLmNvZGUpCn0K",
	"rpcoptions":    "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJInRpbWUiCgoJY29yZWNsaWVudCAiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL2NsaWVudC9jbGllbnQiCglycGNjbGllbnQgImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9wcm92aWRlcnMvYWdlbnQvbWNvcnBjL2NsaWVudCIKKQoKLy8gT3B0aW9uUmVzZXQgcmVzZXRzIHRoZSBjbGllbnQgb3B0aW9ucyB0byB1c2UgYWNyb3NzIHJlcXVlc3RzIHRvIGFuIGVtcHR5IGxpc3QKZnVuYyAocCAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSBPcHRpb25SZXNldCgpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglwLmNsaWVudFJQQ09wdHMgPSBbXXJwY2NsaWVudC5SZXF1ZXN0T3B0aW9ue30KCXAubnMgPSBwLmNsaWVudE9wdHMubnMKCXAudGFyZ2V0cyA9IFtdc3RyaW5ne30KCXAuZmlsdGVycyA9IFtdRmlsdGVyRnVuY3sKCSAgICBGaWx0ZXJGdW5jKGNvcmVjbGllbnQuQWdlbnRGaWx0ZXIoInt7IC5EREwuTWV0YWRhdGEuTmFtZSB9fSIpKSwKCX0KCglyZXR1cm4gcAp9CgovLyBPcHRpb25JZGVudGl0eUZpbHRlciBhZGRzIGFuIGlkZW50aXR5IGZpbHRlcgpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbklkZW50aXR5RmlsdGVyKGYgLi4uc3RyaW5nKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJZm9yIF8sIGkgOj0gcmFuZ2UgZiB7CgkJcC5maWx0ZXJzID0gYXBwZW5kKHAuZmlsdGVycywgRmlsdGVyRnVuYyhjb3JlY2xpZW50LklkZW50aXR5RmlsdGVyKGkpKSkKCX0KCglwLm5zLlJlc2V0KCkKCglyZXR1cm4gcAp9CgovLyBPcHRpb25DbGFzc0ZpbHRlciBhZGRzIGEgY2xhc3MgZmlsdGVyCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uQ2xhc3NGaWx0ZXIoZiAuLi5zdHJpbmcpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglmb3IgXywgaSA6PSByYW5nZSBmIHsKCQlwLmZpbHRlcnMgPSBhcHBlbmQocC5maWx0ZXJzLCBGaWx0ZXJGdW5jKGNvcmVjbGllbnQuQ2xhc3NGaWx0ZXIoaSkpKQoJfQoKCXAubnMuUmVzZXQoKQoKCXJldHVybiBwCn0KCi8vIE9wdGlvbkZhY3RGaWx0ZXIgYWRkcyBhIGZhY3QgZmlsdGVyCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uRmFjdEZpbHRlcihmIC4uLnN0cmluZykgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCWZvciBfLCBpIDo9IHJhbmdlIGYgewoJCXAuZmlsdGVycyA9IGFwcGVuZChwLmZpbHRlcnMsIEZpbHRlckZ1bmMoY29yZWNsaWVudC5GYWN0RmlsdGVyKGkpKSkKCX0KCglwLm5zLlJlc2V0KCkKCglyZXR1cm4gcAp9CgovLyBPcHRpb25BZ2VudEZpbHRlciBhZGRzIGFuIGFnZW50IGZpbHRlcgpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbkFnZW50RmlsdGVyKGEgLi4uc3RyaW5nKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJZm9yIF8sIGYgOj0gcmFuZ2UgYSB7CgkJcC5maWx0ZXJzID0gYXBwZW5kKHAuZmlsdGVycywgRmlsdGVyRnVuYyhjb3JlY2xpZW50LkFnZW50RmlsdGVyKGYpKSkKCX0KCglwLm5zLlJlc2V0KCkKCglyZXR1cm4gcAp9CgovLyBPcHRpb25Db21iaW5lZEZpbHRlciBhZGRzIGEgY29tYmluZWQgZmlsdGVyCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uQ29tYmluZWRGaWx0ZXIoZiAuLi5zdHJpbmcpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglmb3IgXywgaSA6PSByYW5nZSBmIHsKCQlwLmZpbHRlcnMgPSBhcHBlbmQocC5maWx0ZXJzLCBGaWx0ZXJGdW5jKGNvcmVjbGllbnQuQ29tYmluZWRGaWx0ZXIoaSkpKQoJfQoKCXAubnMuUmVzZXQoKQoKCXJldHVybiBwCn0KCi8vIE9wdGlvbkNvbGxlY3RpdmUgc2V0cyB0aGUgY29sbGVjdGl2ZSB0byB0YXJnZXQKZnVuYyAocCAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSBPcHRpb25Db2xsZWN0aXZlKGMgc3RyaW5nKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJcC5jbGllbnRSUENPcHRzID0gYXBwZW5kKHAuY2xpZW50UlBDT3B0cywgcnBjY2xpZW50LkNvbGxlY3RpdmUoYykpCglyZXR1cm4gcAp9CgovLyBPcHRpb25JbkJhdGNoZXMgcGVyZm9ybXMgcmVxdWVzdHMgaW4gYmF0Y2hlcwpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbkluQmF0Y2hlcyhzaXplIGludCwgc2xlZXAgaW50KSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJcC5jbGllbnRSUENPcHRzID0gYXBwZW5kKHAuY2xpZW50UlBDT3B0cywgcnBjY2xpZW50LkluQmF0Y2hlcyhzaXplLCBzbGVlcCkpCglyZXR1cm4gcAp9CgovLyBPcHRpb25EaXNjb3ZlcnlUaW1lb3V0IGNvbmZpZ3VyZXMgdGhlIHJlcXVlc3QgZGlzY292ZXJ5IHRpbWVvdXQsIGRlZmF1bHRzIHRvIGNvbmZpZ3VyZWQgZGlzY292ZXJ5IHRpbWVvdXQKZnVuYyAocCAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSBPcHRpb25EaXNjb3ZlcnlUaW1lb3V0KHQgdGltZS5EdXJhdGlvbikgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCXAuY2xpZW50UlBDT3B0cyA9IGFwcGVuZChwLmNsaWVudFJQQ09wdHMsIHJwY2NsaWVudC5EaXNjb3ZlcnlUaW1lb3V0KHQpKQoJcmV0dXJuIHAKfQoKLy8gT3B0aW9uTGltaXRNZXRob2QgY29uZmlndXJlcyB0aGUgbWV0aG9kIHRvIHVzZSB3aGVuIGxpbWl0aW5nIHRhcmdldHMgLSAicmFuZG9tIiBvciAiZmlyc3QiCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uTGltaXRNZXRob2QobSBzdHJpbmcpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglwLmNsaWVudFJQQ09wdHMgPSBhcHBlbmQocC5jbGllbnRSUENPcHRzLCBycGNjbGllbnQuTGltaXRNZXRob2QobSkpCglyZXR1cm4gcAp9CgovLyBPcHRpb25MaW1pdFNpemUgc2V0cyBsaW1pdHMgb24gdGhlIHRhcmdldHMsIGVpdGhlciBhIG51bWJlciBvZiBhIHBlcmNlbnRhZ2UgbGlrZSAiMTAlIgpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbkxpbWl0U2l6ZShzIHN0cmluZykgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCXAuY2xpZW50UlBDT3B0cyA9IGFwcGVuZChwLmNsaWVudFJQQ09wdHMsIHJwY2NsaWVudC5MaW1pdFNpemUocykpCglyZXR1cm4gcAp9CgovLyBPcHRpb25MaW1pdFNlZWQgc2V0cyB0aGUgcmFuZG9tIHNlZWQgdXNlZCB0byBzZWxlY3QgdGFyZ2V0cyB3aGVuIGxpbWl0aW5nIGFuZCBsaW1pdCBtZXRob2QgaXMgInJhbmRvbSIKZnVuYyAocCAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSBPcHRpb25MaW1pdFNlZWQocyBpbnQ2NCkgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCXAuY2xpZW50UlBDT3B0cyA9IGFwcGVuZChwLmNsaWVudFJQQ09wdHMsIHJwY2NsaWVudC5MaW1pdFNlZWQocykpCglyZXR1cm4gcAp9CgovLyBPcHRpb25UYXJnZXRzIHNldHMgc3BlY2lmaWMgbm9kZSB0YXJnZXRzIHdoaWNoIHdvdWxkIGF2b2lkIGRpc2NvdmVyeSBmb3IgYWxsIGFjdGlvbiBjYWxscyB1bnRpbCByZXNldApmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvblRhcmdldHModCBbXXN0cmluZykgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCXAudGFyZ2V0cyA9IHQKCXJldHVybiBwCn0KCi8vIE9wdGlvbldvcmtlcnMgc2V0cyBob3cgbWFueSB3b3JrZXIgY29ubmVjdGlvbnMgc2hvdWxkIGJlIHN0YXJ0ZWQgdG8gdGhlIGJyb2tlcgpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbldvcmtlcnModyBpbnQpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglwLndvcmtlcnMgPSB3CglyZXR1cm4gcAp9Cg==",
}
