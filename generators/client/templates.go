package client

var templates = map[string]string{
	"action":        "e3sgR2VuZXJhdGVkV2FybmluZyB9fQoKcGFja2FnZSB7eyAuUGFja2FnZSB9fQoKaW1wb3J0ICgKCSJjb250ZXh0IgoJImVuY29kaW5nL2pzb24iCgkiZm10IgoJInN5bmMiCgkiaW8iCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL3Byb3RvY29sIgoJcnBjY2xpZW50ICJnaXRodWIuY29tL2Nob3JpYS1pby9nby1jaG9yaWEvcHJvdmlkZXJzL2FnZW50L21jb3JwYy9jbGllbnQiCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL3Byb3ZpZGVycy9hZ2VudC9tY29ycGMvcmVwbHlmbXQiCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL3Byb3ZpZGVycy9hZ2VudC9tY29ycGMvZGRsL2FnZW50IgopCgovLyB7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fVJlcXVlc3RlciBwZXJmb3JtcyBhIFJQQyByZXF1ZXN0IHRvIHt7IC5BZ2VudE5hbWUgfCBUb0xvd2VyIH19I3t7IC5BY3Rpb25OYW1lIHwgVG9Mb3dlciB9fQp0eXBlIHt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19UmVxdWVzdGVyIHN0cnVjdCB7CglyICAgICpyZXF1ZXN0ZXIKCW91dGMgY2hhbiAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQKfQoKLy8ge3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQgaXMgdGhlIG91dHB1dCBmcm9tIHRoZSB7eyAuQWN0aW9uTmFtZSB8IFRvTG93ZXIgfX0gYWN0aW9uCnR5cGUge3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQgc3RydWN0IHsKCWRldGFpbHMgKlJlc3VsdERldGFpbHMKCXJlcGx5ICAgbWFwW3N0cmluZ11pbnRlcmZhY2V7fQp9CgovLyB7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fVJlc3VsdCBpcyB0aGUgcmVzdWx0IGZyb20gYSB7eyAuQWN0aW9uTmFtZSB8IFRvTG93ZXIgfX0gYWN0aW9uCnR5cGUge3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXN1bHQgc3RydWN0IHsKCWRkbCAqYWdlbnQuRERMCglzdGF0cyAgICpycGNjbGllbnQuU3RhdHMKCW91dHB1dHMgW10qe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQKCXJwY3JlcGxpZXMgW10qcmVwbHlmbXQuUlBDUmVwbHkKCW11IHN5bmMuTXV0ZXgKfQoKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXN1bHQpIFJlbmRlclJlc3VsdHModyBpby5Xcml0ZXIsIGZvcm1hdCBSZW5kZXJGb3JtYXQsIGRpc3BsYXlNb2RlIERpc3BsYXlNb2RlLCB2ZXJib3NlIGJvb2wsIHNpbGVudCBib29sLCBjb2xvcml6ZSBib29sLCBsb2cgTG9nKSBlcnJvciB7CglkLm11LkxvY2soKQoJZGVmZXIgZC5tdS5VbmxvY2soKQoKCWlmIGQuc3RhdHMgPT0gbmlsIHsKCQlyZXR1cm4gZm10LkVycm9yZigicmVzdWx0IHN0YXRzIGlzIG5vdCBzZXQsIHJlc3VsdCB3YXMgbm90IGNvbXBsZXRlZCIpCgl9CgoJcmVzdWx0cyA6PSAmcmVwbHlmbXQuUlBDUmVzdWx0c3sKCQlBZ2VudDogICBkLnN0YXRzLkFnZW50KCksCgkJQWN0aW9uOiAgZC5zdGF0cy5BY3Rpb24oKSwKCQlSZXBsaWVzOiBkLnJwY3JlcGxpZXMsCgkJU3RhdHM6ICAgZC5zdGF0cywKCX0KCglhZGRsLCBlcnIgOj0gZC5kZGwuQWN0aW9uSW50ZXJmYWNlKGQuc3RhdHMuQWN0aW9uKCkpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gZXJyCgl9CgoJc3dpdGNoIGZvcm1hdCB7CgljYXNlIEpTT05Gb3JtYXQ6CgkJcmV0dXJuIHJlc3VsdHMuUmVuZGVySlNPTih3LCBhZGRsKQoJY2FzZSBUYWJsZUZvcm1hdDoKCQlyZXR1cm4gcmVzdWx0cy5SZW5kZXJUYWJsZSh3LCBhZGRsKQoJY2FzZSBUWFRGb290ZXI6CgkJcmVzdWx0cy5SZW5kZXJUWFRGb290ZXIodywgdmVyYm9zZSkKCQlyZXR1cm4gbmlsCglkZWZhdWx0OgoJCXJldHVybiByZXN1bHRzLlJlbmRlclRYVCh3LCBhZGRsLCB2ZXJib3NlLCBzaWxlbnQsIHJlcGx5Zm10LkRpc3BsYXlNb2RlKGRpc3BsYXlNb2RlKSwgY29sb3JpemUsIGxvZykKCX0KfQoKLy8gU3RhdHMgaXMgdGhlIHJwYyByZXF1ZXN0IHN0YXRzCmZ1bmMgKGQgKnt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19UmVzdWx0KSBTdGF0cygpIFN0YXRzIHsKCXJldHVybiBkLnN0YXRzCn0KCi8vIFJlc3VsdERldGFpbHMgaXMgdGhlIGRldGFpbHMgYWJvdXQgdGhlIHJlcXVlc3QKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQpIFJlc3VsdERldGFpbHMoKSAqUmVzdWx0RGV0YWlscyB7CglyZXR1cm4gZC5kZXRhaWxzCn0KCi8vIEhhc2hNYXAgaXMgdGhlIHJhdyBvdXRwdXQgZGF0YQpmdW5jIChkICp7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fU91dHB1dCkgSGFzaE1hcCgpIG1hcFtzdHJpbmddaW50ZXJmYWNle30gewoJcmV0dXJuIGQucmVwbHkKfQoKLy8gSlNPTiBpcyB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgb3V0cHV0IGRhdGEKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQpIEpTT04oKSAoW11ieXRlLCBlcnJvcikgewoJcmV0dXJuIGpzb24uTWFyc2hhbChkLnJlcGx5KQp9CgovLyBQYXJzZU91dHB1dCBwYXJzZXMgdGhlIHJlc3VsdCB2YWx1ZSBmcm9tIHRoZSB7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fSBhY3Rpb24gaW50byB0YXJnZXQKZnVuYyAoZCAqe3sgJC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19T3V0cHV0KSBQYXJzZXt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19T3V0cHV0KHRhcmdldCBpbnRlcmZhY2V7fSkgZXJyb3IgewoJaiwgZXJyIDo9IGQuSlNPTigpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gZm10LkVycm9yZigiY291bGQgbm90IGFjY2VzcyBwYXlsb2FkOiAlcyIsIGVycikKCX0KCgllcnIgPSBqc29uLlVubWFyc2hhbChqLCB0YXJnZXQpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gZm10LkVycm9yZigiY291bGQgbm90IHVubWFyc2hhbCBKU09OIHBheWxvYWQ6ICVzIiwgZXJyKQoJfQoKCXJldHVybiBuaWwKfQoKLy8gRG8gcGVyZm9ybXMgdGhlIHJlcXVlc3QKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXF1ZXN0ZXIpIERvKGN0eCBjb250ZXh0LkNvbnRleHQpICgqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXN1bHQsIGVycm9yKSB7CglkcmVzIDo9ICZ7eyAuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fVJlc3VsdHtkZGw6IGQuci5jbGllbnQuZGRsfQoKCWhhbmRsZXIgOj0gZnVuYyhwciBwcm90b2NvbC5SZXBseSwgciAqcnBjY2xpZW50LlJQQ1JlcGx5KSB7CgkJLy8gZmlsdGVyZWQgYnkgZXhwciBmaWx0ZXIKCQlpZiByID09bmlsIHsKCQkJcmV0dXJuCgkJfQoKCQlvdXRwdXQgOj0gJnt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19T3V0cHV0ewoJCQlyZXBseTogbWFrZShtYXBbc3RyaW5nXWludGVyZmFjZXt9KSwKCQkJZGV0YWlsczogJlJlc3VsdERldGFpbHN7CgkJCQlzZW5kZXI6ICBwci5TZW5kZXJJRCgpLAoJCQkJY29kZTogICAgaW50KHIuU3RhdHVzY29kZSksCgkJCQltZXNzYWdlOiByLlN0YXR1c21zZywKCQkJCXRzOiAgICAgIHByLlRpbWUoKSwKCQkJfSwKCQl9CgoJCWVyciA6PSBqc29uLlVubWFyc2hhbChyLkRhdGEsICZvdXRwdXQucmVwbHkpCgkJaWYgZXJyICE9IG5pbCB7CgkJCWQuci5jbGllbnQuZXJyb3JmKCJDb3VsZCBub3QgZGVjb2RlIHJlcGx5IGZyb20gJXM6ICVzIiwgcHIuU2VuZGVySUQoKSwgZXJyKQoJCX0KCgkJLy8gY2FsbGVyIHdhbnRzIGEgY2hhbm5lbCBzbyB3ZSBkb250IHJldHVybiBhIHJlc3Vsc2V0IHRvbyAobG90cyBvZiBtZW1vcnkgZXRjKQoJCS8vIHRoaXMgaXMgdW51c2VkIG5vdywgbm8gc3VwcG9ydCBmb3Igc2V0dGluZyBhIGNoYW5uZWwKCQlpZiBkLm91dGMgIT0gbmlsIHsKCQkJZC5vdXRjIDwtIG91dHB1dAoJCQlyZXR1cm4KCQl9CgoJCS8vIGVsc2UgcHJlcGFyZSBvdXIgcmVzdWx0IHNldAoJCWRyZXMubXUuTG9jaygpCgkJZHJlcy5vdXRwdXRzID0gYXBwZW5kKGRyZXMub3V0cHV0cywgb3V0cHV0KQoJCWRyZXMucnBjcmVwbGllcyA9IGFwcGVuZChkcmVzLnJwY3JlcGxpZXMsICZyZXBseWZtdC5SUENSZXBseXsKCQkJU2VuZGVyOiAgIHByLlNlbmRlcklEKCksCgkJCVJQQ1JlcGx5OiByLAoJCX0pCgkJZHJlcy5tdS5VbmxvY2soKQoJfQoKCXJlcywgZXJyIDo9IGQuci5kbyhjdHgsIGhhbmRsZXIpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCglkcmVzLnN0YXRzID0gcmVzCgoJcmV0dXJuIGRyZXMsIG5pbAp9CgovLyBFYWNoT3V0cHV0IGl0ZXJhdGVzIG92ZXIgYWxsIHJlc3VsdHMgcmVjZWl2ZWQKZnVuYyAoZCAqe3sgLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXN1bHQpIEVhY2hPdXRwdXQoaCBmdW5jKHIgKnt7IC5BY3Rpb25OYW1lIHwgU25ha2VUb0NhbWVsIH19T3V0cHV0KSkgewoJZm9yIF8sIHJlc3AgOj0gcmFuZ2UgZC5vdXRwdXRzIHsKCQloKHJlc3ApCgl9Cn0KCnt7IHJhbmdlICRuYW1lLCAkaW5wdXQgOj0gLk9wdGlvbmFsSW5wdXRzIH19Ci8vIHt7ICRuYW1lIHwgU25ha2VUb0NhbWVsIH19IGlzIGFuIG9wdGlvbmFsIGlucHV0IHRvIHRoZSB7eyAkLkFjdGlvbk5hbWUgfCBUb0xvd2VyIH19IGFjdGlvbgovLwovLyBEZXNjcmlwdGlvbjoge3sgJGlucHV0LkRlc2NyaXB0aW9uIH19CmZ1bmMgKGQgKnt7ICQuQWN0aW9uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fVJlcXVlc3Rlcikge3sgJG5hbWUgfCBTbmFrZVRvQ2FtZWwgfX0odiB7eyBDaG9yaWFUeXBlVG9Hb1R5cGUgJGlucHV0LlR5cGUgfX0pICp7eyAkLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXF1ZXN0ZXIgewoJZC5yLmFyZ3NbInt7ICRuYW1lIHwgVG9Mb3dlciB9fSJdID0gdgoKCXJldHVybiBkCn0Ke3sgZW5kIH19Cnt7IHJhbmdlICRuYW1lLCAkb3V0cHV0IDo9IC5PdXRwdXRzIH19Cnt7LSAkcmV0dXJuX3R5cGUgOj0gJG91dHB1dC5UeXBlIHwgQ2hvcmlhVHlwZVRvR29UeXBlIC19fQovLyB7eyAkbmFtZSB8IFNuYWtlVG9DYW1lbCB9fSBpcyB0aGUgdmFsdWUgb2YgdGhlIHt7ICRuYW1lIH19IG91dHB1dAovLwovLyBEZXNjcmlwdGlvbjoge3sgJG91dHB1dC5EZXNjcmlwdGlvbiB9fQpmdW5jIChkICp7eyAkLkFjdGlvbk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1PdXRwdXQpIHt7ICRuYW1lIHwgU25ha2VUb0NhbWVsIH19KCkge3sgJHJldHVybl90eXBlIH19IHsKe3stIGlmIGVxICJpbnRlcmZhY2V7fSIgJHJldHVybl90eXBlICAtfX0KCXZhbCwgb2sgOj0gZC5yZXBseVsie3sgJG5hbWUgfX0iXQoJaWYgIW9rIHx8IHZhbCA9PSBuaWwgewoJCS8vIHdlIGhhdmUgdG8gYXZvaWQgcmV0dXJuaW5nIG5pbC4oaW50ZXJmYWNle30pCgkJcmV0dXJuIG5pbAoJfQp7ey0gZWxzZSAtfX0KCXZhbCA6PSBkLnJlcGx5WyJ7eyAkbmFtZSB9fSJdCnt7IGVuZCB9fQoKCXJldHVybiB7eyBDaG9yaWFUeXBlVG9WYWxPZlR5cGUgJG91dHB1dC5UeXBlIH19Cn0Ke3sgZW5kIH19Cg==",
	"client":        "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJImZtdCIKCSJzeW5jIgoJInRpbWUiCgoJImNvbnRleHQiCgoJImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9jaG9yaWEiCgljb3JlY2xpZW50ICJnaXRodWIuY29tL2Nob3JpYS1pby9nby1jaG9yaWEvY2xpZW50L2NsaWVudCIKCSJnaXRodWIuY29tL2Nob3JpYS1pby9nby1jaG9yaWEvY29uZmlnIgoJImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9zcnZjYWNoZSIKCXJwY2NsaWVudCAiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL3Byb3ZpZGVycy9hZ2VudC9tY29ycGMvY2xpZW50IgoJImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9wcm92aWRlcnMvYWdlbnQvbWNvcnBjL2RkbC9hZ2VudCIKCSJnaXRodWIuY29tL2Nob3JpYS1pby9nby1jaG9yaWEvcHJvdG9jb2wiCgkiZ2l0aHViLmNvbS9zaXJ1cHNlbi9sb2dydXMiCikKCi8vIFN0YXRzIGFyZSB0aGUgc3RhdGlzdGljcyBmb3IgYSByZXF1ZXN0CnR5cGUgU3RhdHMgaW50ZXJmYWNlIHsKCUFnZW50KCkgc3RyaW5nCglBY3Rpb24oKSBzdHJpbmcKCUFsbCgpIGJvb2wKCU5vUmVzcG9uc2VGcm9tKCkgW11zdHJpbmcKCVVuZXhwZWN0ZWRSZXNwb25zZUZyb20oKSBbXXN0cmluZwoJRGlzY292ZXJlZENvdW50KCkgaW50CglEaXNjb3ZlcmVkTm9kZXMoKSAqW11zdHJpbmcKCUZhaWxDb3VudCgpIGludAoJT0tDb3VudCgpIGludAoJUmVzcG9uc2VzQ291bnQoKSBpbnQKCVB1Ymxpc2hEdXJhdGlvbigpICh0aW1lLkR1cmF0aW9uLCBlcnJvcikKCVJlcXVlc3REdXJhdGlvbigpICh0aW1lLkR1cmF0aW9uLCBlcnJvcikKCURpc2NvdmVyeUR1cmF0aW9uKCkgKHRpbWUuRHVyYXRpb24sIGVycm9yKQp9CgovLyBOb2RlU291cmNlIGRpc2NvdmVycyBub2Rlcwp0eXBlIE5vZGVTb3VyY2UgaW50ZXJmYWNlIHsKCVJlc2V0KCkKCURpc2NvdmVyKGN0eCBjb250ZXh0LkNvbnRleHQsIGZ3IENob3JpYUZyYW1ld29yaywgZmlsdGVycyBbXUZpbHRlckZ1bmMpIChbXXN0cmluZywgZXJyb3IpCn0KCi8vIENob3JpYUZyYW1ld29yayBpcyB0aGUgQ2hvcmlhIGZyYW1ld29yawp0eXBlIENob3JpYUZyYW1ld29yayBpbnRlcmZhY2UgewoJTG9nZ2VyKHN0cmluZykgKmxvZ3J1cy5FbnRyeQoJU2V0TG9nZ2VyKCpsb2dydXMuTG9nZ2VyKQoJQ29uZmlndXJhdGlvbigpICpjb25maWcuQ29uZmlnCglOZXdNZXNzYWdlKHBheWxvYWQgc3RyaW5nLCBhZ2VudCBzdHJpbmcsIGNvbGxlY3RpdmUgc3RyaW5nLCBtc2dUeXBlIHN0cmluZywgcmVxdWVzdCAqY2hvcmlhLk1lc3NhZ2UpIChtc2cgKmNob3JpYS5NZXNzYWdlLCBlcnIgZXJyb3IpCglOZXdSZXBseUZyb21UcmFuc3BvcnRKU09OKHBheWxvYWQgW11ieXRlLCBza2lwdmFsaWRhdGUgYm9vbCkgKG1zZyBwcm90b2NvbC5SZXBseSwgZXJyIGVycm9yKQoJTmV3VHJhbnNwb3J0RnJvbUpTT04oZGF0YSBzdHJpbmcpIChtZXNzYWdlIHByb3RvY29sLlRyYW5zcG9ydE1lc3NhZ2UsIGVyciBlcnJvcikKCU1pZGRsZXdhcmVTZXJ2ZXJzKCkgKHNlcnZlcnMgc3J2Y2FjaGUuU2VydmVycywgZXJyIGVycm9yKQoJTmV3Q29ubmVjdG9yKGN0eCBjb250ZXh0LkNvbnRleHQsIHNlcnZlcnMgZnVuYygpIChzcnZjYWNoZS5TZXJ2ZXJzLCBlcnJvciksIG5hbWUgc3RyaW5nLCBsb2dnZXIgKmxvZ3J1cy5FbnRyeSkgKGNvbm4gY2hvcmlhLkNvbm5lY3RvciwgZXJyIGVycm9yKQoJTmV3UmVxdWVzdElEKCkgKHN0cmluZywgZXJyb3IpCglDZXJ0bmFtZSgpIHN0cmluZwoJUFFMUXVlcnlDZXJ0TmFtZXMocXVlcnkgc3RyaW5nKSAoW11zdHJpbmcsIGVycm9yKQoJQ29sb3JpemUoYyBzdHJpbmcsIGZvcm1hdCBzdHJpbmcsIGEgLi4uaW50ZXJmYWNle30pIHN0cmluZwp9CgovLyBGaWx0ZXJGdW5jIGNhbiBnZW5lcmF0ZSBhIENob3JpYSBmaWx0ZXIKdHlwZSBGaWx0ZXJGdW5jIGZ1bmMoZiAqcHJvdG9jb2wuRmlsdGVyKSBlcnJvcgoKLy8gUmVuZGVyRm9ybWF0IGlzIHRoZSBmb3JtYXQgdXNlZCBieSB0aGUgUmVuZGVyUmVzdWx0cyBoZWxwZXIKdHlwZSBSZW5kZXJGb3JtYXQgaW50Cgpjb25zdCAoCgkvLyBKU09ORm9ybWF0IHJlbmRlcnMgdGhlIHJlc3VsdHMgYXMgYSBKU09OIGRvY3VtZW50CglKU09ORm9ybWF0IFJlbmRlckZvcm1hdCA9IGlvdGEKCgkvLyBUZXh0Rm9ybWF0IHJlbmRlcnMgdGhlIHJlc3VsdHMgYXMgYSBDaG9yaWEgdHlwaWNhbCByZXN1bHQgc2V0IGluIGxpbmUgd2l0aCBjaG9yaWEgcmVxIG91dHB1dAoJVGV4dEZvcm1hdAoKCS8vIFRhYmxlRm9ybWF0IHJlbmRlcnMgYWxsIHN1Y2Nlc3NmdWwgcmVzcG9uc2VzIGluIGEgdGFibGUKCVRhYmxlRm9ybWF0CgoJLy8gVFhURm9vdGVyIHJlbmRlcnMgb25seSB0aGUgcmVxdWVzdCBzdW1tYXJ5IHN0YXRpc3RpY3MKCVRYVEZvb3RlcgopCgovLyBEaXNwbGF5TW9kZSBvdmVycmlkZXMgdGhlIERETCBkaXNwbGF5IGhpbnRzCnR5cGUgRGlzcGxheU1vZGUgdWludDgKCmNvbnN0ICgKCS8vIERpc3BsYXlEREwgc2hvd3MgcmVzdWx0cyBiYXNlZCBvbiB0aGUgY29uZmlndXJhdGlvbiBpbiB0aGUgRERMIGZpbGUKCURpc3BsYXlEREwgPSBEaXNwbGF5TW9kZShpb3RhKQoJLy8gRGlzcGxheU9LIHNob3dzIG9ubHkgcGFzc2luZyByZXN1bHRzCglEaXNwbGF5T0sKCS8vIERpc3BsYXlGYWlsZWQgc2hvd3Mgb25seSBmYWlsZWQgcmVzdWx0cwoJRGlzcGxheUZhaWxlZAoJLy8gRGlzcGxheUFsbCBzaG93cyBhbGwgcmVzdWx0cwoJRGlzcGxheUFsbAoJLy8gRGlzcGxheU5vbmUgc2hvd3Mgbm8gcmVzdWx0cwoJRGlzcGxheU5vbmUKKQoKdHlwZSBMb2cgaW50ZXJmYWNlIHsKCURlYnVnZihmb3JtYXQgc3RyaW5nLCBhcmdzIC4uLmludGVyZmFjZXt9KQoJSW5mb2YoZm9ybWF0IHN0cmluZywgYXJncyAuLi5pbnRlcmZhY2V7fSkKCVdhcm5mKGZvcm1hdCBzdHJpbmcsIGFyZ3MgLi4uaW50ZXJmYWNle30pCglFcnJvcmYoZm9ybWF0IHN0cmluZywgYXJncyAuLi5pbnRlcmZhY2V7fSkKCUZhdGFsZihmb3JtYXQgc3RyaW5nLCBhcmdzIC4uLmludGVyZmFjZXt9KQoJUGFuaWNmKGZvcm1hdCBzdHJpbmcsIGFyZ3MgLi4uaW50ZXJmYWNle30pCn0KCi8vIHt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB0byB0aGUge3sgLkRETC5NZXRhZGF0YS5OYW1lIH19IGFnZW50CnR5cGUge3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHN0cnVjdCB7CglmdyAgICAgICAgICAgQ2hvcmlhRnJhbWV3b3JrCgljZmcgICAgICAgICAgICpjb25maWcuQ29uZmlnCglkZGwgICAgICAgICAgICphZ2VudC5EREwKCW5zICAgICAgICAgICAgTm9kZVNvdXJjZQoJY2xpZW50T3B0cyAgICAqaW5pdE9wdGlvbnMKCWNsaWVudFJQQ09wdHMgW11ycGNjbGllbnQuUmVxdWVzdE9wdGlvbgoJZmlsdGVycyAgICAgICBbXUZpbHRlckZ1bmMKCXRhcmdldHMgICAgICAgW11zdHJpbmcKCXdvcmtlcnMJICAgICAgaW50CglleHByRmlsdGVyICAgIHN0cmluZwoKCXN5bmMuTXV0ZXgKfQoKLy8gTWV0YWRhdGEgaXMgdGhlIGFnZW50IG1ldGFkYXRhCnR5cGUgTWV0YWRhdGEgc3RydWN0IHsKCUxpY2Vuc2UgICAgIHN0cmluZyBganNvbjoibGljZW5zZSJgCglBdXRob3IgICAgICBzdHJpbmcgYGpzb246ImF1dGhvciJgCglUaW1lb3V0ICAgICBpbnQgICAgYGpzb246InRpbWVvdXQiYAoJTmFtZSAgICAgICAgc3RyaW5nIGBqc29uOiJuYW1lImAKCVZlcnNpb24gICAgIHN0cmluZyBganNvbjoidmVyc2lvbiJgCglVUkwgICAgICAgICBzdHJpbmcgYGpzb246InVybCJgCglEZXNjcmlwdGlvbiBzdHJpbmcgYGpzb246ImRlc2NyaXB0aW9uImAKfQoKLy8gTXVzdCBjcmVhdGUgYSBuZXcgY2xpZW50IGFuZCBwYW5pY3Mgb24gZXJyb3IKZnVuYyBNdXN0KG9wdHMgLi4uSW5pdGlhbGl6YXRpb25PcHRpb24pIChjbGllbnQgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgewoJYywgZXJyIDo9IE5ldyhvcHRzLi4uKQoJaWYgZXJyICE9IG5pbCB7CgkJcGFuaWMoZXJyKQoJfQoKCXJldHVybiBjCn0KCi8vIE5ldyBjcmVhdGVzIGEgbmV3IGNsaWVudCB0byB0aGUge3sgLkRETC5NZXRhZGF0YS5OYW1lIH19IGFnZW50CmZ1bmMgTmV3KG9wdHMgLi4uSW5pdGlhbGl6YXRpb25PcHRpb24pIChjbGllbnQgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCwgZXJyIGVycm9yKSB7CgljIDo9ICZ7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnR7CgkJZGRsOiAgICAgICAgICAgJmFnZW50LkRETHt9LAoJCWNsaWVudFJQQ09wdHM6IFtdcnBjY2xpZW50LlJlcXVlc3RPcHRpb257fSwKCQlmaWx0ZXJzOiAgICAgICBbXUZpbHRlckZ1bmN7CgkJICAgIEZpbHRlckZ1bmMoY29yZWNsaWVudC5BZ2VudEZpbHRlcigie3sgLkRETC5NZXRhZGF0YS5OYW1lIH19IikpLAoJCX0sCgkJY2xpZW50T3B0czogJmluaXRPcHRpb25zewoJCQljZmdGaWxlOiBjaG9yaWEuVXNlckNvbmZpZygpLAoJCX0sCgkJdGFyZ2V0czogW11zdHJpbmd7fSwKCX0KCglmb3IgXywgb3B0IDo9IHJhbmdlIG9wdHMgewoJCW9wdChjLmNsaWVudE9wdHMpCgl9CgoJYy5mdywgZXJyID0gY2hvcmlhLk5ldyhjLmNsaWVudE9wdHMuY2ZnRmlsZSkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoImNvdWxkIG5vdCBpbml0aWFsaXplIENob3JpYTogJXMiLCBlcnIpCgl9CgoJYy5jZmcgPSBjLmZ3LkNvbmZpZ3VyYXRpb24oKQoKCWlmIGMuY2xpZW50T3B0cy5kdCA+IDAgewoJCWMuY2ZnLkRpc2NvdmVyeVRpbWVvdXQgPSBpbnQoYy5jbGllbnRPcHRzLmR0LlNlY29uZHMoKSkKCX0KCglpZiBjLmNsaWVudE9wdHMubnMgPT0gbmlsIHsKCQlzd2l0Y2ggYy5jZmcuRGVmYXVsdERpc2NvdmVyeU1ldGhvZCB7CgkJY2FzZSAiY2hvcmlhIjoKCQkJYy5jbGllbnRPcHRzLm5zID0gJlB1cHBldERCTlN7fQoJCWRlZmF1bHQ6CgkJCWMuY2xpZW50T3B0cy5ucyA9ICZCcm9hZGNhc3ROU3t9CgkJfQoJfQoJYy5ucyA9IGMuY2xpZW50T3B0cy5ucwoKCWlmIGMuY2xpZW50T3B0cy5sb2dnZXIgPT0gbmlsIHsKCQljLmNsaWVudE9wdHMubG9nZ2VyID0gYy5mdy5Mb2dnZXIoInt7IC5EREwuTWV0YWRhdGEuTmFtZSB9fSIpCgl9IGVsc2UgewoJCWMuZncuU2V0TG9nZ2VyKGMuY2xpZW50T3B0cy5sb2dnZXIuTG9nZ2VyKQoJfQoKCWMuZGRsLCBlcnIgPSBEREwoKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiY291bGQgbm90IHBhcnNlIGVtYmVkZGVkIERETDogJXMiLCBlcnIpCgl9CgoJcmV0dXJuIGMsIG5pbAp9CgovLyBBZ2VudE1ldGFkYXRhIGlzIHRoZSBhZ2VudCBtZXRhZGF0YSB0aGlzIGNsaWVudCBzdXBwb3J0cwpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIEFnZW50TWV0YWRhdGEoKSAqTWV0YWRhdGEgewoJcmV0dXJuICZNZXRhZGF0YXsKCQlMaWNlbnNlOiAgICAgcC5kZGwuTWV0YWRhdGEuTGljZW5zZSwKCQlBdXRob3I6ICAgICAgcC5kZGwuTWV0YWRhdGEuQXV0aG9yLAoJCVRpbWVvdXQ6ICAgICBwLmRkbC5NZXRhZGF0YS5UaW1lb3V0LAoJCU5hbWU6ICAgICAgICBwLmRkbC5NZXRhZGF0YS5OYW1lLAoJCVZlcnNpb246ICAgICBwLmRkbC5NZXRhZGF0YS5WZXJzaW9uLAoJCVVSTDogICAgICAgICBwLmRkbC5NZXRhZGF0YS5VUkwsCgkJRGVzY3JpcHRpb246IHAuZGRsLk1ldGFkYXRhLkRlc2NyaXB0aW9uLAoJfQp9CgovLyBEaXNjb3Zlck5vZGVzIHBlcmZvcm1zIGEgZGlzY292ZXJ5IHVzaW5nIHRoZSBjb25maWd1cmVkIGZpbHRlciBhbmQgbm9kZSBzb3VyY2UKZnVuYyAocCAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSBEaXNjb3Zlck5vZGVzKGN0eCBjb250ZXh0LkNvbnRleHQpIChub2RlcyBbXXN0cmluZywgZXJyIGVycm9yKSB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCXJldHVybiBwLm5zLkRpc2NvdmVyKGN0eCwgcC5mdywgcC5maWx0ZXJzKQp9Cgp7eyByYW5nZSAkaSwgJGFjdGlvbiA6PSAuRERMLkFjdGlvbnMgfX0KLy8ge3sgJGFjdGlvbi5OYW1lIHwgU25ha2VUb0NhbWVsIH19IHBlcmZvcm1zIHRoZSB7eyAkYWN0aW9uLk5hbWUgfCBUb0xvd2VyIH19IGFjdGlvbgovLwovLyBEZXNjcmlwdGlvbjoge3sgJGFjdGlvbi5EZXNjcmlwdGlvbiB9fQp7ey0gaWYgQ2hvcmlhUmVxdWlyZWRJbnB1dHMgJGFjdGlvbiB9fQovLwovLyBSZXF1aXJlZCBJbnB1dHM6Cnt7LSByYW5nZSAkbmFtZSwgJGlucHV0IDo9IENob3JpYVJlcXVpcmVkSW5wdXRzICRhY3Rpb24gfX0KLy8gICAgLSB7eyAkbmFtZSB9fSAoe3sgJGlucHV0LlR5cGUgfCBDaG9yaWFUeXBlVG9Hb1R5cGUgfX0pIC0ge3sgJGlucHV0LkRlc2NyaXB0aW9uIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQp7ey0gaWYgQ2hvcmlhT3B0aW9uYWxJbnB1dHMgJGFjdGlvbiB9fQovLwovLyBPcHRpb25hbCBJbnB1dHM6Cnt7LSByYW5nZSAkbmFtZSwgJGlucHV0IDo9IENob3JpYU9wdGlvbmFsSW5wdXRzICRhY3Rpb24gfX0KLy8gICAgLSB7eyAkbmFtZSB9fSAoe3sgJGlucHV0LlR5cGUgfCBDaG9yaWFUeXBlVG9Hb1R5cGUgfX0pIC0ge3sgJGlucHV0LkRlc2NyaXB0aW9uIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQpmdW5jIChwICp7eyAkLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSB7eyAkYWN0aW9uLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX0oe3sgJGFjdGlvbiB8IENob3JpYVJlcXVpcmVkSW5wdXRzVG9GdW5jQXJncyB9fSkgKnt7ICRhY3Rpb24uTmFtZSB8IFNuYWtlVG9DYW1lbCB9fVJlcXVlc3RlciB7CglkIDo9ICZ7eyAkYWN0aW9uLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1SZXF1ZXN0ZXJ7CgkJb3V0YzogbmlsLAoJCXI6ICZyZXF1ZXN0ZXJ7CgkJCWFyZ3M6ICAgbWFwW3N0cmluZ11pbnRlcmZhY2V7fXsKe3stIHJhbmdlICRuYW1lLCAkaW5wdXQgOj0gQ2hvcmlhUmVxdWlyZWRJbnB1dHMgJGFjdGlvbiB9fQoJCQkJInt7ICRuYW1lIH19Ijoge3sgJG5hbWUgfX1JLAp7ey0gZW5kIH19CgkJCX0sCgkJCWFjdGlvbjogInt7ICRhY3Rpb24uTmFtZSB8IFRvTG93ZXIgfX0iLAoJCQljbGllbnQ6IHAsCgkJfSwKCX0KCglyZXR1cm4gZAp9Cnt7IGVuZCB9fQo=",
	"ddl":           "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJImVuY29kaW5nL2Jhc2U2NCIKCSJlbmNvZGluZy9qc29uIgoKCSJnaXRodWIuY29tL2Nob3JpYS1pby9nby1jaG9yaWEvcHJvdmlkZXJzL2FnZW50L21jb3JwYy9kZGwvYWdlbnQiCikKCgp2YXIgcmF3RERMID0gInt7IC5SYXdEREwgfCBCYXNlNjRFbmNvZGUgfX0iCgovLyBERExCeXRlcyBpcyB0aGUgcmF3IEpTT04gZW5jb2RlZCBEREwgZmlsZSBmb3IgdGhlIGFnZW50CmZ1bmMgRERMQnl0ZXMoKSAoW11ieXRlLCBlcnJvcikgewoJcmV0dXJuIGJhc2U2NC5TdGRFbmNvZGluZy5EZWNvZGVTdHJpbmcocmF3RERMKQp9CgovLyBEREwgaXMgYSBwYXJzZWQgYW5kIGxvYWRlZCBEREwgZm9yIHRoZSBhZ2VudApmdW5jIERETCgpICgqYWdlbnQuRERMLCBlcnJvcikgewoJZGRsaiwgZXJyIDo9IERETEJ5dGVzKCkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoKCWRkbCA6PSAmYWdlbnQuRERMe30KCWVyciA9IGpzb24uVW5tYXJzaGFsKGRkbGosIGRkbCkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoKCXJldHVybiBkZGwsIG5pbAp9Cg==",
	"discover":      "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJImNvbnRleHQiCgkiZm10IgoJInN5bmMiCgkidGltZSIKCgkiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL2NsaWVudC9kaXNjb3ZlcnkvYnJvYWRjYXN0IgoJImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9jbGllbnQvZGlzY292ZXJ5L2V4dGVybmFsIgoJImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9jbGllbnQvZGlzY292ZXJ5L3B1cHBldGRiIgoJImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9wcm90b2NvbCIKKQoKLy8gQnJvYWRjYXN0TlMgaXMgYSBOb2RlU291cmNlIHRoYXQgdXNlcyB0aGUgQ2hvcmlhIG5ldHdvcmsgYnJvYWRjYXN0IG1ldGhvZCB0byBkaXNjb3ZlciBub2Rlcwp0eXBlIEJyb2FkY2FzdE5TIHN0cnVjdCB7Cglub2RlQ2FjaGUgW11zdHJpbmcKCWYgICAgICAgICAqcHJvdG9jb2wuRmlsdGVyCgoJc3luYy5NdXRleAp9CgovLyBSZXNldCByZXNldHMgdGhlIGludGVybmFsIG5vZGUgY2FjaGUKZnVuYyAoYiAqQnJvYWRjYXN0TlMpIFJlc2V0KCkgewoJYi5Mb2NrKCkKCWRlZmVyIGIuVW5sb2NrKCkKCgliLm5vZGVDYWNoZSA9IFtdc3RyaW5ne30KfQoKLy8gRGlzY292ZXIgcGVyZm9ybXMgdGhlIGRpc2NvdmVyeSBvZiBub2RlcyBhZ2FpbnN0IHRoZSBDaG9yaWEgTmV0d29yawpmdW5jIChiICpCcm9hZGNhc3ROUykgRGlzY292ZXIoY3R4IGNvbnRleHQuQ29udGV4dCwgZncgQ2hvcmlhRnJhbWV3b3JrLCBmaWx0ZXJzIFtdRmlsdGVyRnVuYykgKFtdc3RyaW5nLCBlcnJvcikgewoJYi5Mb2NrKCkKCWRlZmVyIGIuVW5sb2NrKCkKCgljb3BpZXIgOj0gZnVuYygpIFtdc3RyaW5nIHsKCQlvdXQgOj0gbWFrZShbXXN0cmluZywgbGVuKGIubm9kZUNhY2hlKSkKCQljb3B5KG91dCwgYi5ub2RlQ2FjaGUpCgoJCXJldHVybiBvdXQKCX0KCglpZiAhKGIubm9kZUNhY2hlID09IG5pbCB8fCBsZW4oYi5ub2RlQ2FjaGUpID09IDApIHsKCQlyZXR1cm4gY29waWVyKCksIG5pbAoJfQoKCXZhciBlcnIgZXJyb3IKCgliLmYsIGVyciA9IHBhcnNlRmlsdGVycyhmaWx0ZXJzKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9CgoJaWYgYi5ub2RlQ2FjaGUgPT0gbmlsIHsKCQliLm5vZGVDYWNoZSA9IFtdc3RyaW5ne30KCX0KCgljZmcgOj0gZncuQ29uZmlndXJhdGlvbigpCglub2RlcywgZXJyIDo9IGJyb2FkY2FzdC5OZXcoZncpLkRpc2NvdmVyKGN0eCwgYnJvYWRjYXN0LkZpbHRlcihiLmYpLCBicm9hZGNhc3QuVGltZW91dCh0aW1lLlNlY29uZCp0aW1lLkR1cmF0aW9uKGNmZy5EaXNjb3ZlcnlUaW1lb3V0KSkpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gW11zdHJpbmd7fSwgZXJyCgl9CgoJYi5ub2RlQ2FjaGUgPSBub2RlcwoKCXJldHVybiBjb3BpZXIoKSwgbmlsCn0KCi8vIEV4dGVybmFsTlMgaXMgYSBOb2RlU291cmNlIHRoYXQgY2FsbHMgYW4gZXh0ZXJuYWwgY29tbWFuZCBmb3IgZGlzY292ZXJ5CnR5cGUgRXh0ZXJuYWxOUyBzdHJ1Y3QgewoJbm9kZUNhY2hlIFtdc3RyaW5nCglmICAgICAgICAgKnByb3RvY29sLkZpbHRlcgoKCXN5bmMuTXV0ZXgKfQoKLy8gUmVzZXQgcmVzZXRzIHRoZSBpbnRlcm5hbCBub2RlIGNhY2hlCmZ1bmMgKHAgKkV4dGVybmFsTlMpIFJlc2V0KCkgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglwLm5vZGVDYWNoZSA9IFtdc3RyaW5ne30KfQoKZnVuYyAocCAqRXh0ZXJuYWxOUykgRGlzY292ZXIoY3R4IGNvbnRleHQuQ29udGV4dCwgZncgQ2hvcmlhRnJhbWV3b3JrLCBmaWx0ZXJzIFtdRmlsdGVyRnVuYykgKFtdc3RyaW5nLCBlcnJvcikgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCgljb3BpZXIgOj0gZnVuYygpIFtdc3RyaW5nIHsKCQlvdXQgOj0gbWFrZShbXXN0cmluZywgbGVuKHAubm9kZUNhY2hlKSkKCQljb3B5KG91dCwgcC5ub2RlQ2FjaGUpCgoJCXJldHVybiBvdXQKCX0KCglpZiAhKHAubm9kZUNhY2hlID09IG5pbCB8fCBsZW4ocC5ub2RlQ2FjaGUpID09IDApIHsKCQlyZXR1cm4gY29waWVyKCksIG5pbAoJfQoKCXZhciBlcnIgZXJyb3IKCXAuZiwgZXJyID0gcGFyc2VGaWx0ZXJzKGZpbHRlcnMpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCglpZiBwLm5vZGVDYWNoZSA9PSBuaWwgewoJCXAubm9kZUNhY2hlID0gW11zdHJpbmd7fQoJfQoKCWNmZyA6PSBmdy5Db25maWd1cmF0aW9uKCkKCW5vZGVzLCBlcnIgOj0gZXh0ZXJuYWwuTmV3KGZ3KS5EaXNjb3ZlcihjdHgsIGV4dGVybmFsLkZpbHRlcihwLmYpLCBleHRlcm5hbC5UaW1lb3V0KHRpbWUuU2Vjb25kKnRpbWUuRHVyYXRpb24oY2ZnLkRpc2NvdmVyeVRpbWVvdXQpKSkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBbXXN0cmluZ3t9LCBlcnIKCX0KCglwLm5vZGVDYWNoZSA9IG5vZGVzCgoJcmV0dXJuIGNvcGllcigpLCBuaWwKfQoKLy8gUHVwcGV0REJOUyBpcyBhIE5vZGVTb3VyY2UgdGhhdCB1c2VzIHRoZSBQdXBwZXREQiBQUUwgUXVlcmllcyB0byBkaXNjb3ZlciBub2Rlcwp0eXBlIFB1cHBldERCTlMgc3RydWN0IHsKCW5vZGVDYWNoZSBbXXN0cmluZwoJZiAgICAgICAgICpwcm90b2NvbC5GaWx0ZXIKCglzeW5jLk11dGV4Cn0KCi8vIFJlc2V0IHJlc2V0cyB0aGUgaW50ZXJuYWwgbm9kZSBjYWNoZQpmdW5jIChwICpQdXBwZXREQk5TKSBSZXNldCgpIHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJcC5ub2RlQ2FjaGUgPSBbXXN0cmluZ3t9Cn0KCi8vIERpc2NvdmVyIHBlcmZvcm1zIHRoZSBkaXNjb3Zlcnkgb2Ygbm9kZXMgYWdhaW5zdCB0aGUgQ2hvcmlhIE5ldHdvcmsKZnVuYyAocCAqUHVwcGV0REJOUykgRGlzY292ZXIoY3R4IGNvbnRleHQuQ29udGV4dCwgZncgQ2hvcmlhRnJhbWV3b3JrLCBmaWx0ZXJzIFtdRmlsdGVyRnVuYykgKFtdc3RyaW5nLCBlcnJvcikgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCgljb3BpZXIgOj0gZnVuYygpIFtdc3RyaW5nIHsKCQlvdXQgOj0gbWFrZShbXXN0cmluZywgbGVuKHAubm9kZUNhY2hlKSkKCQljb3B5KG91dCwgcC5ub2RlQ2FjaGUpCgoJCXJldHVybiBvdXQKCX0KCglpZiAhKHAubm9kZUNhY2hlID09IG5pbCB8fCBsZW4ocC5ub2RlQ2FjaGUpID09IDApIHsKCQlyZXR1cm4gY29waWVyKCksIG5pbAoJfQoKCXZhciBlcnIgZXJyb3IKCXAuZiwgZXJyID0gcGFyc2VGaWx0ZXJzKGZpbHRlcnMpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCglpZiBsZW4ocC5mLkNvbXBvdW5kKSA+IDAgewoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoImNvbXBvdW5kIGZpbHRlcnMgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgUHVwcGV0REIiKQoJfQoKCWlmIHAubm9kZUNhY2hlID09IG5pbCB7CgkJcC5ub2RlQ2FjaGUgPSBbXXN0cmluZ3t9Cgl9CgoJY2ZnIDo9IGZ3LkNvbmZpZ3VyYXRpb24oKQoJbm9kZXMsIGVyciA6PSBwdXBwZXRkYi5OZXcoZncpLkRpc2NvdmVyKGN0eCwgcHVwcGV0ZGIuRmlsdGVyKHAuZiksIHB1cHBldGRiLlRpbWVvdXQodGltZS5TZWNvbmQqdGltZS5EdXJhdGlvbihjZmcuRGlzY292ZXJ5VGltZW91dCkpKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIFtdc3RyaW5ne30sIGVycgoJfQoKCXAubm9kZUNhY2hlID0gbm9kZXMKCglyZXR1cm4gY29waWVyKCksIG5pbAp9CgpmdW5jIHBhcnNlRmlsdGVycyhmcyBbXUZpbHRlckZ1bmMpICgqcHJvdG9jb2wuRmlsdGVyLCBlcnJvcikgewoJZmlsdGVyIDo9IHByb3RvY29sLk5ld0ZpbHRlcigpCgoJZm9yIF8sIGYgOj0gcmFuZ2UgZnMgewoJCWVyciA6PSBmKGZpbHRlcikKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcmV0dXJuIG5pbCwgZXJyCgkJfQoJfQoKCXJldHVybiBmaWx0ZXIsIG5pbAp9Cg==",
	"doc":           "e3sgR2VuZXJhdGVkV2FybmluZyB9fQoKLy8gUGFja2FnZSB7eyAuUGFja2FnZSB9fSBpcyBhbiBBUEkgY2xpZW50IHRvIHRoZSBDaG9yaWEge3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgQ2FwaXRhbGl6ZSB9fSBhZ2VudCBWZXJzaW9uIHt7IC5EREwuTWV0YWRhdGEuVmVyc2lvbiB9fS4KLy8KLy8gQWN0aW9uczoKe3stIHJhbmdlICRpLCAkYWN0aW9uIDo9IC5EREwuQWN0aW9ucyB9fQovLyAgICoge3sgJGFjdGlvbi5OYW1lIHwgU25ha2VUb0NhbWVsIH19IC0ge3sgJGFjdGlvbi5EZXNjcmlwdGlvbiAtfX0Ke3sgZW5kIH19CnBhY2thZ2Uge3sgLlBhY2thZ2UgfX0KCg==",
	"initoptions":   "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJInRpbWUiCgkiZ2l0aHViLmNvbS9zaXJ1cHNlbi9sb2dydXMiCikKCnR5cGUgaW5pdE9wdGlvbnMgc3RydWN0IHsKCWNmZ0ZpbGUgc3RyaW5nCglsb2dnZXIgICpsb2dydXMuRW50cnkKCW5zIE5vZGVTb3VyY2UKCWR0IHRpbWUuRHVyYXRpb24KCXByb2dyZXNzIGJvb2wKfQoKLy8gSW5pdGlhbGl6YXRpb25PcHRpb24gaXMgYW4gb3B0aW9uYWwgc2V0dGluZyB1c2VkIHRvIGluaXRpYWxpemUgdGhlIGNsaWVudAp0eXBlIEluaXRpYWxpemF0aW9uT3B0aW9uIGZ1bmMob3B0cyAqaW5pdE9wdGlvbnMpCgovLyBDb25maWdGaWxlIHNldHMgdGhlIGNvbmZpZyBmaWxlIHRvIHVzZSwgd2hlbiBub3Qgc2V0IHdpbGwgdXNlIHRoZSB1c2VyIGRlZmF1bHQKZnVuYyBDb25maWdGaWxlKGYgc3RyaW5nKSBJbml0aWFsaXphdGlvbk9wdGlvbiB7CglyZXR1cm4gZnVuYyhvICppbml0T3B0aW9ucykgewoJCW8uY2ZnRmlsZSA9IGYKCX0KfQoKLy8gTG9nZ2VyIHNldHMgdGhlIGxvZ2dlciB0byB1c2UgZWxzZSBvbmUgaXMgbWFkZSB2aWEgdGhlIENob3JpYSBmcmFtZXdvcmsKZnVuYyBMb2dnZXIobCAqbG9ncnVzLkVudHJ5KSBJbml0aWFsaXphdGlvbk9wdGlvbiB7CglyZXR1cm4gZnVuYyhvICppbml0T3B0aW9ucykgewoJCW8ubG9nZ2VyID0gbAoJfQp9CgovLyBEaXNjb3Zlcnkgc2V0cyB0aGUgTm9kZVNvdXJjZSB0byB1c2Ugd2hlbiBmaW5kaW5nIG5vZGVzIHRvIG1hbmFnZQpmdW5jIERpc2NvdmVyeShucyBOb2RlU291cmNlKSBJbml0aWFsaXphdGlvbk9wdGlvbiB7CglyZXR1cm4gZnVuYyhvICppbml0T3B0aW9ucykgewoJCW8ubnMgPSBucwoJfQp9CgovLyBQcm9ncmVzcyBlbmFibGVzIGRpc3BsYXlpbmcgYSBwcm9ncmVzcyBiYXIKZnVuYyBQcm9ncmVzcygpIEluaXRpYWxpemF0aW9uT3B0aW9uIHsKCXJldHVybiBmdW5jKG8gKmluaXRPcHRpb25zKSB7CgkJby5wcm9ncmVzcyA9IHRydWUKCX0KfQoKLy8gRGlzY292ZXJ5TWV0aG9kIGFjY2VwdHMgYSBkaXNjb3ZlcnkgbWV0aG9kIG5hbWUgYXMgc3VwcGxpZWQgZnJvbSB0aGUgQ0xJIGFuZCBjb25maWd1cmVzIHRoZSBjb3JyZWN0IE5vZGVTb3VyY2UKLy8gcmV2ZXJ0cyB0byBicm9hZGNhc3QgbWV0aG9kIGlmIGFuIHVuc3VwcG9ydGVkIG1ldGhvZCBpcyBzdXBwbGllZCwgY3VzdG9tIG5vZGUgc291cmNlcyBjYW4gYmUgc2V0IHVzaW5nIERpc2NvdmVyeSgpCmZ1bmMgRGlzY292ZXJ5TWV0aG9kKG0gc3RyaW5nKSBJbml0aWFsaXphdGlvbk9wdGlvbiB7CglyZXR1cm4gZnVuYyhvICppbml0T3B0aW9ucykgewoJCXN3aXRjaCBtIHsKCQljYXNlICJjaG9yaWEiLCAicHVwcGV0ZGIiLCAicGRiIjoKCQkJby5ucyA9ICZQdXBwZXREQk5Te30KCQlkZWZhdWx0OgoJCQlvLm5zID0gJkJyb2FkY2FzdE5Te30KCQl9Cgl9Cn0KCgovLyBEaXNjb3ZlcnlUaW1lb3V0IHNldHMgYSB0aW1lb3V0IGZvciBkaXNjb3ZlcnkgZm9yIHRob3NlIG1ldGhvZHMgdGhhdCBzdXBwb3J0IGl0CmZ1bmMgRGlzY292ZXJ5VGltZW91dCh0IHRpbWUuRHVyYXRpb24pIEluaXRpYWxpemF0aW9uT3B0aW9uIHsKCXJldHVybiBmdW5jKG8gKmluaXRPcHRpb25zKSB7CgkJby5kdCA9IHQKCX0KfQo=",
	"logging":       "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgpmdW5jIChjICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIGluZm9mKG1zZyBzdHJpbmcsIGEgLi4uaW50ZXJmYWNle30pIHsKCWMuY2xpZW50T3B0cy5sb2dnZXIuSW5mb2YobXNnLCBhLi4uKQp9CgpmdW5jIChjICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIGVycm9yZihtc2cgc3RyaW5nLCBhIC4uLmludGVyZmFjZXt9KSB7CgljLmNsaWVudE9wdHMubG9nZ2VyLkVycm9yZihtc2csIGEuLi4pCn0K",
	"requester":     "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJImNvbnRleHQiCgkiZm10IgoJInRpbWUiCgoJImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9wcm90b2NvbCIKCXJwY2NsaWVudCAiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL3Byb3ZpZGVycy9hZ2VudC9tY29ycGMvY2xpZW50IgoJImdpdGh1Yi5jb20vZ29zdXJpL3VpcHJvZ3Jlc3MiCikKCi8vIHJlcXVlc3RlciBpcyBhIGdlbmVyaWMgcmVxdWVzdCBoYW5kbGVyCnR5cGUgcmVxdWVzdGVyIHN0cnVjdCB7CgljbGllbnQgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudAoJYWN0aW9uIHN0cmluZwoJYXJncyAgIG1hcFtzdHJpbmddaW50ZXJmYWNle30KCXByb2dyZXNzICp1aXByb2dyZXNzLkJhcgp9CgovLyBkbyBwZXJmb3JtcyB0aGUgcmVxdWVzdApmdW5jIChyICpyZXF1ZXN0ZXIpIGRvKGN0eCBjb250ZXh0LkNvbnRleHQsIGhhbmRsZXIgZnVuYyhwciBwcm90b2NvbC5SZXBseSwgciAqcnBjY2xpZW50LlJQQ1JlcGx5KSkgKCpycGNjbGllbnQuU3RhdHMsIGVycm9yKSB7Cgl0YXJnZXRzIDo9IG1ha2UoW11zdHJpbmcsIGxlbihyLmNsaWVudC50YXJnZXRzKSkKCXZhciBlcnIgZXJyb3IKCglyLmNsaWVudC5Mb2NrKCkKCWNvcHkodGFyZ2V0cywgci5jbGllbnQudGFyZ2V0cykKCWRpc2NvdmVyZXIgOj0gci5jbGllbnQubnMKCWZpbHRlcnMgOj0gci5jbGllbnQuZmlsdGVycwoJZncgOj0gci5jbGllbnQuZncKCXByb2dyZXNzIDo9IHIuY2xpZW50LmNsaWVudE9wdHMucHJvZ3Jlc3MKCiAJdmFyIGRpc2NvdmVyeVN0YXJ0IHRpbWUuVGltZQoJdmFyIGRpc2NvdmVyeUVuZCB0aW1lLlRpbWUKCglpZiBsZW4odGFyZ2V0cykgPT0gMCB7CgkJaWYgcHJvZ3Jlc3MgewoJCQlmbXQuUHJpbnQoIkRpc2NvdmVyaW5nIG5vZGVzIC4uLi4gIikKCQl9IGVsc2UgewoJCQlyLmNsaWVudC5pbmZvZigiU3RhcnRpbmcgZGlzY292ZXJ5IikKCQl9CgoJCWRpc2NvdmVyeVN0YXJ0ID0gdGltZS5Ob3coKQoJCXRhcmdldHMsIGVyciA9IGRpc2NvdmVyZXIuRGlzY292ZXIoY3R4LCBmdywgZmlsdGVycykKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcmV0dXJuIG5pbCwgZXJyCgkJfQoJCWRpc2NvdmVyeUVuZCA9IHRpbWUuTm93KCkKCgkJaWYgbGVuKHRhcmdldHMpID09IDAgewoJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJubyBub2RlcyB3ZXJlIGRpc2NvdmVyZWQiKQoJCX0KCgkJaWYgcHJvZ3Jlc3MgewoJCQlmbXQuUHJpbnRmKCIlZFxuIiwgbGVuKHRhcmdldHMpKQoJCX0gZWxzZSB7CgkJCXIuY2xpZW50LmluZm9mKCJEaXNjb3ZlcmVkICVkIG5vZGVzIiwgbGVuKHRhcmdldHMpKQoJCX0KCX0KCglvcHRzIDo9IFtdcnBjY2xpZW50LlJlcXVlc3RPcHRpb257cnBjY2xpZW50LlRhcmdldHModGFyZ2V0cyl9CglvcHRzID0gYXBwZW5kKG9wdHMsIHIuY2xpZW50LmNsaWVudFJQQ09wdHMuLi4pCglpZiByLmNsaWVudC53b3JrZXJzID4gMCB7CgkJb3B0cyA9IGFwcGVuZChvcHRzLCBycGNjbGllbnQuV29ya2VycyhyLmNsaWVudC53b3JrZXJzKSkKCX0KCglpZiByLmNsaWVudC5leHByRmlsdGVyICE9ICIiIHsKCQlvcHRzID0gYXBwZW5kKG9wdHMsIHJwY2NsaWVudC5SZXBseUV4cHJGaWx0ZXIoci5jbGllbnQuZXhwckZpbHRlcikpCgl9CgoJci5jbGllbnQuVW5sb2NrKCkKCiAgICAgICAgaWYgcHJvZ3Jlc3MgewogICAgICAgIAlmbXQuUHJpbnRsbigpCiAgICAgICAgICAgICAgICByLmNvbmZpZ3VyZVByb2dyZXNzKGxlbih0YXJnZXRzKSkKICAgICAgICB9CgoJYWdlbnQsIGVyciA6PSBycGNjbGllbnQuTmV3KHIuY2xpZW50LmZ3LCByLmNsaWVudC5kZGwuTWV0YWRhdGEuTmFtZSwgcnBjY2xpZW50LkRETChyLmNsaWVudC5kZGwpKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiY291bGQgbm90IGNyZWF0ZSBjbGllbnQ6ICVzIiwgZXJyKQoJfQoKCWlmIHByb2dyZXNzIHsKCQlvcHRzID0gYXBwZW5kKG9wdHMsIHJwY2NsaWVudC5SZXBseUhhbmRsZXIoZnVuYyhwciBwcm90b2NvbC5SZXBseSwgcnBjciAqcnBjY2xpZW50LlJQQ1JlcGx5KSB7CgkJCXIucHJvZ3Jlc3MuSW5jcigpCgkJCWhhbmRsZXIocHIsIHJwY3IpCgkJfSkpCgl9IGVsc2UgewoJCW9wdHMgPSBhcHBlbmQob3B0cywgcnBjY2xpZW50LlJlcGx5SGFuZGxlcihoYW5kbGVyKSkKCX0KCglpZiAhcHJvZ3Jlc3MgewoJCXIuY2xpZW50LmluZm9mKCJJbnZva2luZyAlcyMlcyBhY3Rpb24gd2l0aCAlI3YiLCByLmNsaWVudC5kZGwuTWV0YWRhdGEuTmFtZSwgci5hY3Rpb24sIHIuYXJncykKCX0KCglyZXMsIGVyciA6PSBhZ2VudC5EbyhjdHgsIHIuYWN0aW9uLCByLmFyZ3MsIG9wdHMuLi4pCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJjb3VsZCBub3QgcGVyZm9ybSBkaXNhYmxlIHJlcXVlc3Q6ICVzIiwgZXJyKQoJfQoKICAgICAgICBpZiBwcm9ncmVzcyB7CiAgICAgICAgICAgICAgICB1aXByb2dyZXNzLlN0b3AoKQogICAgICAgICAgICAgICAgZm10LlByaW50bG4oKQogICAgICAgIH0KCglpZiAhZGlzY292ZXJ5U3RhcnQuSXNaZXJvKCkgJiYgIWRpc2NvdmVyeUVuZC5Jc1plcm8oKSB7CgkJcmVzLlN0YXRzKCkuT3ZlcnJpZGVEaXNjb3ZlcnlUaW1lKGRpc2NvdmVyeVN0YXJ0LCBkaXNjb3ZlcnlFbmQpCgl9CgoJcmV0dXJuIHJlcy5TdGF0cygpLCBuaWwKfQoKZnVuYyAociAqcmVxdWVzdGVyKSBjb25maWd1cmVQcm9ncmVzcyhjb3VudCBpbnQpIHsKICAgICAgICBpZiAhci5jbGllbnQuY2xpZW50T3B0cy5wcm9ncmVzcyB7CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICB9CgogICAgICAgIHIucHJvZ3Jlc3MgPSB1aXByb2dyZXNzLkFkZEJhcihjb3VudCkuQXBwZW5kQ29tcGxldGVkKCkuUHJlcGVuZEVsYXBzZWQoKQogICAgICAgIHIucHJvZ3Jlc3MuUHJlcGVuZEZ1bmMoZnVuYyhiICp1aXByb2dyZXNzLkJhcikgc3RyaW5nIHsKICAgICAgICAgICAgICAgIGlmIGIuQ3VycmVudCgpIDwgY291bnQgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5jbGllbnQuZncuQ29sb3JpemUoInJlZCIsIiVkIC8gJWQiLCBiLkN1cnJlbnQoKSwgY291bnQpCiAgICAgICAgICAgICAgICB9CgoJCXJldHVybiByLmNsaWVudC5mdy5Db2xvcml6ZSgiZ3JlZW4iLCAiJWQgLyAlZCIsIGIuQ3VycmVudCgpLCBjb3VudCkKICAgICAgICB9KQoKICAgICAgICB1aXByb2dyZXNzLlN0YXJ0KCkKfQo=",
	"resultdetails": "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJInRpbWUiCgoJImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9wcm92aWRlcnMvYWdlbnQvbWNvcnBjIgopCgovLyBSZXN1bHREZXRhaWxzIGlzIHRoZSBkZXRhaWxzIGFib3V0IGEgcmVzdWx0CnR5cGUgUmVzdWx0RGV0YWlscyBzdHJ1Y3QgewoJc2VuZGVyICBzdHJpbmcKCWNvZGUgICAgaW50CgltZXNzYWdlIHN0cmluZwoJdHMgICAgICB0aW1lLlRpbWUKfQoKLy8gU3RhdHVzQ29kZSBpcyBhIHJlcGx5IHN0YXR1cyBhcyBkZWZpbmVkIGJ5IE1Db2xsZWN0aXZlIFNpbXBsZVJQQyAtIGludGVnZXJzIDAgdG8gNQovLwovLyBTZWUgdGhlIGNvbnN0YW50cyBPSywgUlBDQWJvcnRlZCwgVW5rbm93blJQQ0FjdGlvbiwgTWlzc2luZ1JQQ0RhdGEsIEludmFsaWRSUENEYXRhIGFuZCBVbmtub3duUlBDRXJyb3IKdHlwZSBTdGF0dXNDb2RlIHVpbnQ4Cgpjb25zdCAoCgkvLyBPSyBpcyB0aGUgcmVwbHkgc3RhdHVzIHdoZW4gYWxsIHdvcmtlZAoJT0sgPSBTdGF0dXNDb2RlKGlvdGEpCgoJLy8gQWJvcnRlZCBpcyBzdGF0dXMgZm9yIHdoZW4gdGhlIGFjdGlvbiBjb3VsZCBub3QgcnVuLCBtb3N0IGZhaWx1cmVzIGluIGFuIGFjdGlvbiBzaG91bGQgc2V0IHRoaXMKCUFib3J0ZWQKCgkvLyBVbmtub3duQWN0aW9uIGlzIHRoZSBzdGF0dXMgZm9yIHVua25vd24gYWN0aW9ucyByZXF1ZXN0ZWQKCVVua25vd25BY3Rpb24KCgkvLyBNaXNzaW5nRGF0YSBpcyB0aGUgc3RhdHVzIGZvciBtaXNzaW5nIGlucHV0IGRhdGEKCU1pc3NpbmdEYXRhCgoJLy8gSW52YWxpZERhdGEgaXMgdGhlIHN0YXR1cyBmb3IgaW52YWxpZCBpbnB1dCBkYXRhCglJbnZhbGlkRGF0YQoKCS8vIFVua25vd25FcnJvciBpcyB0aGUgc3RhdHVzIGdlbmVyYWwgZmFpbHVyZXMgaW4gYWdlbnRzIHNob3VsZCBzZXQgd2hlbiB0aGluZ3MgZ28gYmFkCglVbmtub3duRXJyb3IKKQoKLy8gU2VuZGVyIGlzIHRoZSBpZGVudGl0eSBvZiB0aGUgcmVtb3RlIHRoYXQgcHJvZHVjZWQgdGhlIG1lc3NhZ2UKZnVuYyAoZCAqUmVzdWx0RGV0YWlscykgU2VuZGVyKCkgc3RyaW5nIHsKCXJldHVybiBkLnNlbmRlcgp9CgovLyBPSyBkZXRlcm1pbmVzIGlmIHRoZSByZXF1ZXN0IHdhcyBzdWNjZXNzZnVsCmZ1bmMgKGQgKlJlc3VsdERldGFpbHMpIE9LKCkgYm9vbCB7CglyZXR1cm4gbWNvcnBjLlN0YXR1c0NvZGUoZC5jb2RlKSA9PSBtY29ycGMuT0sKfQoKLy8gU3RhdHVzTWVzc2FnZSBpcyB0aGUgc3RhdHVzIG1lc3NhZ2UgcHJvZHVjZWQgYnkgdGhlIHJlbW90ZQpmdW5jIChkICpSZXN1bHREZXRhaWxzKSBTdGF0dXNNZXNzYWdlKCkgc3RyaW5nIHsKCXJldHVybiBkLm1lc3NhZ2UKfQoKLy8gU3RhdHVzQ29kZSBpcyB0aGUgc3RhdHVzIGNvZGUgcHJvZHVjZWQgYnkgdGhlIHJlbW90ZQpmdW5jIChkICpSZXN1bHREZXRhaWxzKSBTdGF0dXNDb2RlKCkgU3RhdHVzQ29kZSB7CglyZXR1cm4gU3RhdHVzQ29kZShkLmNvZGUpCn0K",
	"rpcoptions":    "Ly8gZ2VuZXJhdGVkIGNvZGU7IERPIE5PVCBFRElUCgpwYWNrYWdlIHt7IC5QYWNrYWdlIH19CgppbXBvcnQgKAoJInRpbWUiCgoJY29yZWNsaWVudCAiZ2l0aHViLmNvbS9jaG9yaWEtaW8vZ28tY2hvcmlhL2NsaWVudC9jbGllbnQiCglycGNjbGllbnQgImdpdGh1Yi5jb20vY2hvcmlhLWlvL2dvLWNob3JpYS9wcm92aWRlcnMvYWdlbnQvbWNvcnBjL2NsaWVudCIKKQoKLy8gT3B0aW9uUmVzZXQgcmVzZXRzIHRoZSBjbGllbnQgb3B0aW9ucyB0byB1c2UgYWNyb3NzIHJlcXVlc3RzIHRvIGFuIGVtcHR5IGxpc3QKZnVuYyAocCAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSBPcHRpb25SZXNldCgpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglwLmNsaWVudFJQQ09wdHMgPSBbXXJwY2NsaWVudC5SZXF1ZXN0T3B0aW9ue30KCXAubnMgPSBwLmNsaWVudE9wdHMubnMKCXAudGFyZ2V0cyA9IFtdc3RyaW5ne30KCXAuZmlsdGVycyA9IFtdRmlsdGVyRnVuY3sKCSAgICBGaWx0ZXJGdW5jKGNvcmVjbGllbnQuQWdlbnRGaWx0ZXIoInt7IC5EREwuTWV0YWRhdGEuTmFtZSB9fSIpKSwKCX0KCglyZXR1cm4gcAp9CgovLyBPcHRpb25JZGVudGl0eUZpbHRlciBhZGRzIGFuIGlkZW50aXR5IGZpbHRlcgpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbklkZW50aXR5RmlsdGVyKGYgLi4uc3RyaW5nKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJZm9yIF8sIGkgOj0gcmFuZ2UgZiB7CgkJaWYgaSA9PSAiIiB7CgkJCWNvbnRpbnVlCgkJfQoKCQlwLmZpbHRlcnMgPSBhcHBlbmQocC5maWx0ZXJzLCBGaWx0ZXJGdW5jKGNvcmVjbGllbnQuSWRlbnRpdHlGaWx0ZXIoaSkpKQoJfQoKCXAubnMuUmVzZXQoKQoKCXJldHVybiBwCn0KCi8vIE9wdGlvbkNsYXNzRmlsdGVyIGFkZHMgYSBjbGFzcyBmaWx0ZXIKZnVuYyAocCAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSBPcHRpb25DbGFzc0ZpbHRlcihmIC4uLnN0cmluZykgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCWZvciBfLCBpIDo9IHJhbmdlIGYgewoJCWlmIGkgPT0gIiIgewoJCQljb250aW51ZQoJCX0KCgkJcC5maWx0ZXJzID0gYXBwZW5kKHAuZmlsdGVycywgRmlsdGVyRnVuYyhjb3JlY2xpZW50LkNsYXNzRmlsdGVyKGkpKSkKCX0KCglwLm5zLlJlc2V0KCkKCglyZXR1cm4gcAp9CgovLyBPcHRpb25GYWN0RmlsdGVyIGFkZHMgYSBmYWN0IGZpbHRlcgpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbkZhY3RGaWx0ZXIoZiAuLi5zdHJpbmcpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglmb3IgXywgaSA6PSByYW5nZSBmIHsKCQlpZiBpID09ICIiIHsKCQkJY29udGludWUKCQl9CgoJCXAuZmlsdGVycyA9IGFwcGVuZChwLmZpbHRlcnMsIEZpbHRlckZ1bmMoY29yZWNsaWVudC5GYWN0RmlsdGVyKGkpKSkKCX0KCglwLm5zLlJlc2V0KCkKCglyZXR1cm4gcAp9CgovLyBPcHRpb25BZ2VudEZpbHRlciBhZGRzIGFuIGFnZW50IGZpbHRlcgpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbkFnZW50RmlsdGVyKGEgLi4uc3RyaW5nKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJZm9yIF8sIGYgOj0gcmFuZ2UgYSB7CgkJaWYgZiA9PSAiIiB7CgkJCWNvbnRpbnVlCgkJfQoKCQlwLmZpbHRlcnMgPSBhcHBlbmQocC5maWx0ZXJzLCBGaWx0ZXJGdW5jKGNvcmVjbGllbnQuQWdlbnRGaWx0ZXIoZikpKQoJfQoKCXAubnMuUmVzZXQoKQoKCXJldHVybiBwCn0KCi8vIE9wdGlvbkNvbWJpbmVkRmlsdGVyIGFkZHMgYSBjb21iaW5lZCBmaWx0ZXIKZnVuYyAocCAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSBPcHRpb25Db21iaW5lZEZpbHRlcihmIC4uLnN0cmluZykgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCWZvciBfLCBpIDo9IHJhbmdlIGYgewoJCWlmIGkgPT0gIiIgewoJCQljb250aW51ZQoJCX0KCgkJcC5maWx0ZXJzID0gYXBwZW5kKHAuZmlsdGVycywgRmlsdGVyRnVuYyhjb3JlY2xpZW50LkNvbWJpbmVkRmlsdGVyKGkpKSkKCX0KCglwLm5zLlJlc2V0KCkKCglyZXR1cm4gcAp9CgovLyBPcHRpb25Db21wb3VuZEZpbHRlciBhZGRzIGEgY29tcG91bmQgZmlsdGVyCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uQ29tcG91bmRGaWx0ZXIoZiAuLi5zdHJpbmcpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglmb3IgXywgaSA6PSByYW5nZSBmIHsKCQlpZiBpID09ICIiIHsKCQkJY29udGludWUKCQl9CgoJCXAuZmlsdGVycyA9IGFwcGVuZChwLmZpbHRlcnMsIEZpbHRlckZ1bmMoY29yZWNsaWVudC5Db21wb3VuZEZpbHRlcihpKSkpCgl9CgoJcC5ucy5SZXNldCgpCgoJcmV0dXJuIHAKfQoKLy8gT3B0aW9uQ29sbGVjdGl2ZSBzZXRzIHRoZSBjb2xsZWN0aXZlIHRvIHRhcmdldApmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbkNvbGxlY3RpdmUoYyBzdHJpbmcpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglwLmNsaWVudFJQQ09wdHMgPSBhcHBlbmQocC5jbGllbnRSUENPcHRzLCBycGNjbGllbnQuQ29sbGVjdGl2ZShjKSkKCXJldHVybiBwCn0KCi8vIE9wdGlvbkluQmF0Y2hlcyBwZXJmb3JtcyByZXF1ZXN0cyBpbiBiYXRjaGVzCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uSW5CYXRjaGVzKHNpemUgaW50LCBzbGVlcCBpbnQpICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQgewoJcC5Mb2NrKCkKCWRlZmVyIHAuVW5sb2NrKCkKCglwLmNsaWVudFJQQ09wdHMgPSBhcHBlbmQocC5jbGllbnRSUENPcHRzLCBycGNjbGllbnQuSW5CYXRjaGVzKHNpemUsIHNsZWVwKSkKCXJldHVybiBwCn0KCi8vIE9wdGlvbkRpc2NvdmVyeVRpbWVvdXQgY29uZmlndXJlcyB0aGUgcmVxdWVzdCBkaXNjb3ZlcnkgdGltZW91dCwgZGVmYXVsdHMgdG8gY29uZmlndXJlZCBkaXNjb3ZlcnkgdGltZW91dApmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbkRpc2NvdmVyeVRpbWVvdXQodCB0aW1lLkR1cmF0aW9uKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJcC5jbGllbnRSUENPcHRzID0gYXBwZW5kKHAuY2xpZW50UlBDT3B0cywgcnBjY2xpZW50LkRpc2NvdmVyeVRpbWVvdXQodCkpCglyZXR1cm4gcAp9CgovLyBPcHRpb25MaW1pdE1ldGhvZCBjb25maWd1cmVzIHRoZSBtZXRob2QgdG8gdXNlIHdoZW4gbGltaXRpbmcgdGFyZ2V0cyAtICJyYW5kb20iIG9yICJmaXJzdCIKZnVuYyAocCAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50KSBPcHRpb25MaW1pdE1ldGhvZChtIHN0cmluZykgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCXAuY2xpZW50UlBDT3B0cyA9IGFwcGVuZChwLmNsaWVudFJQQ09wdHMsIHJwY2NsaWVudC5MaW1pdE1ldGhvZChtKSkKCXJldHVybiBwCn0KCi8vIE9wdGlvbkxpbWl0U2l6ZSBzZXRzIGxpbWl0cyBvbiB0aGUgdGFyZ2V0cywgZWl0aGVyIGEgbnVtYmVyIG9mIGEgcGVyY2VudGFnZSBsaWtlICIxMCUiCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uTGltaXRTaXplKHMgc3RyaW5nKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJcC5jbGllbnRSUENPcHRzID0gYXBwZW5kKHAuY2xpZW50UlBDT3B0cywgcnBjY2xpZW50LkxpbWl0U2l6ZShzKSkKCXJldHVybiBwCn0KCi8vIE9wdGlvbkxpbWl0U2VlZCBzZXRzIHRoZSByYW5kb20gc2VlZCB1c2VkIHRvIHNlbGVjdCB0YXJnZXRzIHdoZW4gbGltaXRpbmcgYW5kIGxpbWl0IG1ldGhvZCBpcyAicmFuZG9tIgpmdW5jIChwICp7eyAuRERMLk1ldGFkYXRhLk5hbWUgfCBTbmFrZVRvQ2FtZWwgfX1DbGllbnQpIE9wdGlvbkxpbWl0U2VlZChzIGludDY0KSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJcC5jbGllbnRSUENPcHRzID0gYXBwZW5kKHAuY2xpZW50UlBDT3B0cywgcnBjY2xpZW50LkxpbWl0U2VlZChzKSkKCXJldHVybiBwCn0KCi8vIE9wdGlvblRhcmdldHMgc2V0cyBzcGVjaWZpYyBub2RlIHRhcmdldHMgd2hpY2ggd291bGQgYXZvaWQgZGlzY292ZXJ5IGZvciBhbGwgYWN0aW9uIGNhbGxzIHVudGlsIHJlc2V0CmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uVGFyZ2V0cyh0IFtdc3RyaW5nKSAqe3sgLkRETC5NZXRhZGF0YS5OYW1lIHwgU25ha2VUb0NhbWVsIH19Q2xpZW50IHsKCXAuTG9jaygpCglkZWZlciBwLlVubG9jaygpCgoJcC50YXJnZXRzID0gdAoJcmV0dXJuIHAKfQoKLy8gT3B0aW9uV29ya2VycyBzZXRzIGhvdyBtYW55IHdvcmtlciBjb25uZWN0aW9ucyBzaG91bGQgYmUgc3RhcnRlZCB0byB0aGUgYnJva2VyCmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uV29ya2Vycyh3IGludCkgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCXAud29ya2VycyA9IHcKCXJldHVybiBwCn0KCi8vIE9wdGlvbkV4cHJGaWx0ZXIgc2V0cyBhIGZpbHRlciBleHByZXNzaW9uIHRoYXQgd2lsbCByZW1vdmUgcmVzdWx0cyBmcm9tIHRoZSByZXN1bHQgc2V0CmZ1bmMgKHAgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCkgT3B0aW9uRXhwckZpbHRlcihmIHN0cmluZykgKnt7IC5EREwuTWV0YWRhdGEuTmFtZSB8IFNuYWtlVG9DYW1lbCB9fUNsaWVudCB7CglwLkxvY2soKQoJZGVmZXIgcC5VbmxvY2soKQoKCXAuZXhwckZpbHRlciA9IGYKCXJldHVybiBwCn0K",
}
